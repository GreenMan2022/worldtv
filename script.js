// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const channelsContainer = document.getElementById('channelsContainer');
const mainCategoriesPanel = document.getElementById('mainCategoriesPanel');
const subCategoriesPanel = document.getElementById('subCategoriesPanel');
const playerModal = document.getElementById('playerModal');
const videoPlayerElement = document.getElementById('videoPlayerElement');
const closeModal = document.getElementById('closeModal');
const initialLoader = document.getElementById('initialLoader');
const toastContainer = document.getElementById('toastContainer');
// üëá Firebase: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: "AIzaSyD9mAjCqyhJix9Tiyr-vQXWj-Mejysws44",
  authDomain: "tv-channels-watching.firebaseapp.com",
  databaseURL: "https://tv-channels-watching-default-rtdb.firebaseio.com",
  projectId: "tv-channels-watching",
  storageBucket: "tv-channels-watching.firebasestorage.app",
  messagingSenderId: "625169237639",
  appId: "1:625169237639:web:beeed9dc2d424aeb269a22",
  measurementId: "G-B1HFTLJ7BM"
};
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
const app = firebase.initializeApp(firebaseConfig);
const database = firebase.database();
// üëá –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
let currentLanguage = localStorage.getItem('appLanguage') || 'ru';
// üëá –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
// >>> –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –ë–õ–û–ö –ù–ê –í–ê–® const translations <<<
const translations = {
    ru: {
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ",
        "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å",
        "–°–º–æ—Ç—Ä—è—Ç": "–°–º–æ—Ç—Ä—è—Ç",
        "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        "–°—Ç—Ä–∞–Ω—ã": "–°—Ç—Ä–∞–Ω—ã",
        "–Ø–∑—ã–∫–∏": "–Ø–∑—ã–∫–∏",
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ",
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.",
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª",
        "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...",
        "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!": "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!",
        "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...",
        "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!": "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!",
        "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        "–ó–∞–≥—Ä—É–∑–∫–∞...": "–ó–∞–≥—Ä—É–∑–∫–∞...",
        "–ó–∞–≥—Ä—É–∑–∫–∞": "–ó–∞–≥—Ä—É–∑–∫–∞",
        "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏": "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç": "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
        "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω": "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è": "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!": "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!",
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É",
        "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π",
        "Language changed to English": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        // üëá –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª"
        "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª": "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª",
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        "–ï—â–µ –æ–¥–∏–Ω!": "–ï—â–µ –æ–¥–∏–Ω!"
    },
  en: {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç": "Global Playlist",
      "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": "Watched",
      "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": "Watching Now",
      "–°–º–æ—Ç—Ä—è—Ç": "Most Watched",
      "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": "Custom Playlist",
      "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": "Categories",
      "–°—Ç—Ä–∞–Ω—ã": "Countries",
      "–Ø–∑—ã–∫–∏": "Languages",
      "–†–µ–≥–∏–æ–Ω—ã": "Regions",
      "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ": "Load playlist from URL",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U": "M3U format supported",
      "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "Load Playlist",
      "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.": "Playlist is not loaded.",
      "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª": "Go to submenu and select 'Load from URL'",
      "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "No one in the world is watching yet...",
      "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!": "Turn on a channel for 60+ sec to be the first one here!",
      "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "No one is watching right now...",
      "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!": "Turn on a channel to be the first!",
      "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": "Channels not found",
      "–ó–∞–≥—Ä—É–∑–∫–∞...": "Loading...",
      "–ó–∞–≥—Ä—É–∑–∫–∞": "Loading",
      "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏": "Initialization Error",
      "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": "Application Error",
      "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": "Save Error",
      "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç": "Channel is not responding",
      "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω": "Channel is unavailable",
      "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è": "Click on video to play",
      "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è": "Format not supported",
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "Failed to load playlist",
      "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!": "Playlist loaded!",
      "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É": "Enter URL",
      "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π": "Language changed to Russian",
      "Language changed to English": "Language changed to English",
      // üëá –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª"
      "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª": "Random Channel",
      "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª": "Failed to find an available channel",
      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ": "Please try again later",
      "–ï—â–µ –æ–¥–∏–Ω!": "Another one!",
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
      "–ê–Ω–∏–º–∞—Ü–∏—è": "Animation",
      "–ê–≤—Ç–æ": "Auto",
      "–ë–∏–∑–Ω–µ—Å": "Business",
      "–ö–ª–∞—Å—Å–∏–∫–∞": "Classic",
      "–ö–æ–º–µ–¥–∏–∏": "Comedy",
      "–ö—É–ª–∏–Ω–∞—Ä–∏—è": "Cooking",
      "–ö—É–ª—å—Ç—É—Ä–∞": "Culture",
      "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ": "Documentary",
      "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "Education",
      "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "Entertainment",
      "–°–µ–º–µ–π–Ω—ã–µ": "Family",
      "–û–±—â–∏–µ": "General",
      "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ": "Interactive",
      "–î–µ—Ç—Å–∫–∏–µ": "Kids",
      "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ": "Legislative",
      "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏": "Lifestyle",
      "–ö–∏–Ω–æ": "Movies",
      "–ú—É–∑—ã–∫–∞": "Music",
      "–ù–æ–≤–æ—Å—Ç–∏": "News",
      "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö": "Outdoor",
      "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ": "Public",
      "–†–µ–ª–∞–∫—Å": "Relax",
      "–†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ": "Religious",
      "–ù–∞—É–∫–∞": "Science",
      "–°–µ—Ä–∏–∞–ª—ã": "Series",
      "–®–æ–ø–∏–Ω–≥": "Shop",
      "–°–ø–æ—Ä—Ç": "Sports",
      "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "Travel",
      "–ü–æ–≥–æ–¥–∞": "Weather",
      "XXX": "XXX",
      "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ": "Undefined",
      // –°—Ç—Ä–∞–Ω—ã
      "–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω": "Afghanistan",
      "–ê–ª–±–∞–Ω–∏—è": "Albania",
      "–ê–ª–∂–∏—Ä": "Algeria",
      "–ê–Ω–¥–æ—Ä—Ä–∞": "Andorra",
      "–ê–Ω–≥–æ–ª–∞": "Angola",
      "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": "Argentina",
      "–ê—Ä–º–µ–Ω–∏—è": "Armenia",
      "–ê—Ä—É–±–∞": "Aruba",
      "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": "Australia",
      "–ê–≤—Å—Ç—Ä–∏—è": "Austria",
      "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω": "Azerbaijan",
      "–ë–∞–≥–∞–º—ã": "Bahamas",
      "–ë–∞—Ö—Ä–µ–π–Ω": "Bahrain",
      "–ë–∞–Ω–≥–ª–∞–¥–µ—à": "Bangladesh",
      "–ë–∞—Ä–±–∞–¥–æ—Å": "Barbados",
      "–ë–µ–ª–∞—Ä—É—Å—å": "Belarus",
      "–ë–µ–ª—å–≥–∏—è": "Belgium",
      "–ë–µ–Ω–∏–Ω": "Benin",
      "–ë–µ—Ä–º—É–¥—ã": "Bermuda",
      "–ë—É—Ç–∞–Ω": "Bhutan",
      "–ë–æ–ª–∏–≤–∏—è": "Bolivia",
      "–ë–æ–Ω–∞–π—Ä–µ": "Bonaire",
      "–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞": "Bosnia and Herzegovina",
      "–ë—Ä–∞–∑–∏–ª–∏—è": "Brazil",
      "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "British Virgin Islands",
      "–ë—Ä—É–Ω–µ–π": "Brunei",
      "–ë–æ–ª–≥–∞—Ä–∏—è": "Bulgaria",
      "–ë—É—Ä–∫–∏–Ω–∞-–§–∞—Å–æ": "Burkina Faso",
      "–ö–∞–º–±–æ–¥–∂–∞": "Cambodia",
      "–ö–∞–º–µ—Ä—É–Ω": "Cameroon",
      "–ö–∞–Ω–∞–¥–∞": "Canada",
      "–ö–∞–±–æ-–í–µ—Ä–¥–µ": "Cape Verde",
      "–ß–∞–¥": "Chad",
      "–ß–∏–ª–∏": "Chile",
      "–ö–∏—Ç–∞–π": "China",
      "–ö–æ–ª—É–º–±–∏—è": "Colombia",
      "–ö–æ—Å—Ç–∞-–†–∏–∫–∞": "Costa Rica",
      "–•–æ—Ä–≤–∞—Ç–∏—è": "Croatia",
      "–ö—É–±–∞": "Cuba",
      "–ö—é—Ä–∞—Å–∞–æ": "Curacao",
      "–ö–∏–ø—Ä": "Cyprus",
      "–ß–µ—Ö–∏—è": "Czech Republic",
      "–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ": "Democratic Republic of the Congo",
      "–î–∞–Ω–∏—è": "Denmark",
      "–î–∂–∏–±—É—Ç–∏": "Djibouti",
      "–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞": "Dominican Republic",
      "–≠–∫–≤–∞–¥–æ—Ä": "Ecuador",
      "–ï–≥–∏–ø–µ—Ç": "Egypt",
      "–°–∞–ª—å–≤–∞–¥–æ—Ä": "El Salvador",
      "–≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ì–≤–∏–Ω–µ—è": "Equatorial Guinea",
      "–≠—Ä–∏—Ç—Ä–µ—è": "Eritrea",
      "–≠—Å—Ç–æ–Ω–∏—è": "Estonia",
      "–≠—Ñ–∏–æ–ø–∏—è": "Ethiopia",
      "–§–∞—Ä–µ—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "Faroe Islands",
      "–§–∏–Ω–ª—è–Ω–¥–∏—è": "Finland",
      "–§—Ä–∞–Ω—Ü–∏—è": "France",
      "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ü–æ–ª–∏–Ω–µ–∑–∏—è": "French Polynesia",
      "–ì–∞–±–æ–Ω": "Gabon",
      "–ì–∞–º–±–∏—è": "Gambia",
      "–ì—Ä—É–∑–∏—è": "Georgia",
      "–ì–µ—Ä–º–∞–Ω–∏—è": "Germany",
      "–ì–∞–Ω–∞": "Ghana",
      "–ì—Ä–µ—Ü–∏—è": "Greece",
      "–ì–≤–∞–¥–µ–ª—É–ø–∞": "Guadeloupe",
      "–ì—É–∞–º": "Guam",
      "–ì–≤–∞—Ç–µ–º–∞–ª–∞": "Guatemala",
      "–ì–µ—Ä–Ω—Å–∏": "Guernsey",
      "–ì–≤–∏–Ω–µ—è": "Guinea",
      "–ì–∞–π–∞–Ω–∞": "Guyana",
      "–ì–∞–∏—Ç–∏": "Haiti",
      "–ì–æ–Ω–¥—É—Ä–∞—Å": "Honduras",
      "–ì–æ–Ω–∫–æ–Ω–≥": "Hong Kong",
      "–í–µ–Ω–≥—Ä–∏—è": "Hungary",
      "–ò—Å–ª–∞–Ω–¥–∏—è": "Iceland",
      "–ò–Ω–¥–∏—è": "India",
      "–ò–Ω–¥–æ–Ω–µ–∑–∏—è": "Indonesia",
      "–ò—Ä–∞–Ω": "Iran",
      "–ò—Ä–∞–∫": "Iraq",
      "–ò—Ä–ª–∞–Ω–¥–∏—è": "Ireland",
      "–ò–∑—Ä–∞–∏–ª—å": "Israel",
      "–ò—Ç–∞–ª–∏—è": "Italy",
      "–ö–æ—Ç-–¥'–ò–≤—É–∞—Ä": "Ivory Coast",
      "–Ø–º–∞–π–∫–∞": "Jamaica",
      "–Ø–ø–æ–Ω–∏—è": "Japan",
      "–ò–æ—Ä–¥–∞–Ω–∏—è": "Jordan",
      "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Kazakhstan",
      "–ö–µ–Ω–∏—è": "Kenya",
      "–ö–æ—Å–æ–≤–æ": "Kosovo",
      "–ö—É–≤–µ–π—Ç": "Kuwait",
      "–ö–∏—Ä–≥–∏–∑–∏—è": "Kyrgyzstan",
      "–õ–∞–æ—Å": "Laos",
      "–õ–∞—Ç–≤–∏—è": "Latvia",
      "–õ–∏–≤–∞–Ω": "Lebanon",
      "–õ–∏–±–µ—Ä–∏—è": "Liberia",
      "–õ–∏–≤–∏—è": "Libya",
      "–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω": "Liechtenstein",
      "–õ–∏—Ç–≤–∞": "Lithuania",
      "–õ—é–∫—Å–µ–º–±—É—Ä–≥": "Luxembourg",
      "–ú–∞–∫–∞–æ": "Macao",
      "–ú–∞–ª–∞–π–∑–∏—è": "Malaysia",
      "–ú–∞–ª—å–¥–∏–≤—ã": "Maldives",
      "–ú–∞–ª–∏": "Mali",
      "–ú–∞–ª—å—Ç–∞": "Malta",
      "–ú–∞—Ä—Ç–∏–Ω–∏–∫–∞": "Martinique",
      "–ú–∞–≤—Ä–∏—Ç–∞–Ω–∏—è": "Mauritania",
      "–ú–∞–≤—Ä–∏–∫–∏–π": "Mauritius",
      "–ú–µ–∫—Å–∏–∫–∞": "Mexico",
      "–ú–æ–ª–¥–æ–≤–∞": "Moldova",
      "–ú–æ–Ω–∞–∫–æ": "Monaco",
      "–ú–æ–Ω–≥–æ–ª–∏—è": "Mongolia",
      "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è": "Montenegro",
      "–ú–∞—Ä–æ–∫–∫–æ": "Morocco",
      "–ú–æ–∑–∞–º–±–∏–∫": "Mozambique",
      "–ú—å—è–Ω–º–∞": "Myanmar",
      "–ù–∞–º–∏–±–∏—è": "Namibia",
      "–ù–µ–ø–∞–ª": "Nepal",
      "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": "Netherlands",
      "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è": "New Zealand",
      "–ù–∏–∫–∞—Ä–∞–≥—É–∞": "Nicaragua",
      "–ù–∏–≥–µ—Ä": "Niger",
      "–ù–∏–≥–µ—Ä–∏—è": "Nigeria",
      "–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–µ—è": "North Korea",
      "–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è": "North Macedonia",
      "–ù–æ—Ä–≤–µ–≥–∏—è": "Norway",
      "–û–º–∞–Ω": "Oman",
      "–ü–∞–∫–∏—Å—Ç–∞–Ω": "Pakistan",
      "–ü–∞–ª–µ—Å—Ç–∏–Ω–∞": "Palestine",
      "–ü–∞–Ω–∞–º–∞": "Panama",
      "–ü–∞–ø—É–∞ ‚Äî –ù–æ–≤–∞—è –ì–≤–∏–Ω–µ—è": "Papua New Guinea",
      "–ü–∞—Ä–∞–≥–≤–∞–π": "Paraguay",
      "–ü–µ—Ä—É": "Peru",
      "–§–∏–ª–∏–ø–ø–∏–Ω—ã": "Philippines",
      "–ü–æ–ª—å—à–∞": "Poland",
      "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è": "Portugal",
      "–ü—É—ç—Ä—Ç–æ-–†–∏–∫–æ": "Puerto Rico",
      "–ö–∞—Ç–∞—Ä": "Qatar",
      "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ": "Republic of the Congo",
      "–†–µ—é–Ω—å–æ–Ω": "Reunion",
      "–†—É–º—ã–Ω–∏—è": "Romania",
      "–†–æ—Å—Å–∏—è": "Russia",
      "–†—É–∞–Ω–¥–∞": "Rwanda",
      "–°–µ–Ω—Ç-–ö–∏—Ç—Å –∏ –ù–µ–≤–∏—Å": "Saint Kitts and Nevis",
      "–°–µ–Ω—Ç-–õ—é—Å–∏—è": "Saint Lucia",
      "–°–∞–º–æ–∞": "Samoa",
      "–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ": "San Marino",
      "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è": "Saudi Arabia",
      "–°–µ–Ω–µ–≥–∞–ª": "Senegal",
      "–°–µ—Ä–±–∏—è": "Serbia",
      "–°–∏–Ω–≥–∞–ø—É—Ä": "Singapore",
      "–°–∏–Ω—Ç-–ú–∞—Ä—Ç–µ–Ω": "Sint Maarten",
      "–°–ª–æ–≤–∞–∫–∏—è": "Slovakia",
      "–°–ª–æ–≤–µ–Ω–∏—è": "Slovenia",
      "–°–æ–º–∞–ª–∏": "Somalia",
      "–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "South Africa",
      "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è": "South Korea",
      "–ò—Å–ø–∞–Ω–∏—è": "Spain",
      "–®—Ä–∏-–õ–∞–Ω–∫–∞": "Sri Lanka",
      "–°—É–¥–∞–Ω": "Sudan",
      "–°—É—Ä–∏–Ω–∞–º": "Suriname",
      "–®–≤–µ—Ü–∏—è": "Sweden",
      "–®–≤–µ–π—Ü–∞—Ä–∏—è": "Switzerland",
      "–°–∏—Ä–∏—è": "Syria",
      "–¢–∞–π–≤–∞–Ω—å": "Taiwan",
      "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "Tajikistan",
      "–¢–∞–Ω–∑–∞–Ω–∏—è": "Tanzania",
      "–¢–∞–∏–ª–∞–Ω–¥": "Thailand",
      "–¢–æ–≥–æ": "Togo",
      "–¢—Ä–∏–Ω–∏–¥–∞–¥ –∏ –¢–æ–±–∞–≥–æ": "Trinidad and Tobago",
      "–¢—É–Ω–∏—Å": "Tunisia",
      "–¢—É—Ä—Ü–∏—è": "Turkiye",
      "–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω": "Turkmenistan",
      "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "U.S. Virgin Islands",
      "–£–≥–∞–Ω–¥–∞": "Uganda",
      "–£–∫—Ä–∞–∏–Ω–∞": "Ukraine",
      "–û–ê–≠": "United Arab Emirates",
      "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "United Kingdom",
      "–°–®–ê": "United States",
      "–£—Ä—É–≥–≤–∞–π": "Uruguay",
      "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω": "Uzbekistan",
      "–í–∞—Ç–∏–∫–∞–Ω": "Vatican City",
      "–í–µ–Ω–µ—Å—É—ç–ª–∞": "Venezuela",
      "–í—å–µ—Ç–Ω–∞–º": "Vietnam",
      "–ó–∞–ø–∞–¥–Ω–∞—è –°–∞—Ö–∞—Ä–∞": "Western Sahara",
      "–ô–µ–º–µ–Ω": "Yemen",
      "–ó–∏–º–±–∞–±–≤–µ": "Zimbabwe",
      "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ": "International",
      // –Ø–∑—ã–∫–∏
      "–ê–∫–æ–ª–∏": "Acoli",
      "–ê–¥—Ö–æ–ª–∞": "Adhola",
      "–ê—Ñ–∞—Ä": "Afar",
      "–ê—Ñ—Ä–∏–∫–∞–∞–Ω—Å": "Afrikaans",
      "–ê–ª–±–∞–Ω—Å–∫–∏–π": "Albanian",
      "–ê–ª–∂–∏—Ä—Å–∫–∏–π –∂–µ—Å—Ç–æ–≤—ã–π": "Algerian Sign Language",
      "–ê–ª—É—Ä": "Alur",
      "–ê–º—Ö–∞—Ä—Å–∫–∏–π": "Amharic",
      "–ê—Ä–∞–±—Å–∫–∏–π": "Arabic",
      "–ê—Ä–º—è–Ω—Å–∫–∏–π": "Armenian",
      "–ê—Å—Å–∞–º—Å–∫–∏–π": "Assamese",
      "–ê—Å—Å–∏—Ä–∏–π—Å–∫–∏–π –Ω–µ–æ–∞—Ä–∞–º–µ–π—Å–∫–∏–π": "Assyrian Neo-Aramaic",
      "–ê–π–∏–∑–æ –≥–±–µ": "Ayizo Gbe",
      "–ê–π–º–∞—Ä–∞": "Aymara",
      "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π": "Azerbaijani",
      "–ë–∞–∞—Ç–æ–Ω—É–º": "Baatonum",
      "–ë–∞–º–±–∞—Ä–∞": "Bambara",
      "–ë–∞—à–∫–∏—Ä—Å–∫–∏–π": "Bashkir",
      "–ë–∞—Å–∫—Å–∫–∏–π": "Basque",
      "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": "Belarusian",
      "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π": "Bengali",
      "–ë—Ö–æ–¥–∂–ø—É—Ä–∏": "Bhojpuri",
      "–ë–æ—Å–Ω–∏–π—Å–∫–∏–π": "Bosnian",
      "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π": "Bulgarian",
      "–ë–∏—Ä–º–∞–Ω—Å–∫–∏–π": "Burmese",
      "–ö–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π": "Catalan",
      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ç–ª–∞—Å —Ç–∞–º–∞–∑–∏–≥—Ö—Ç": "Central Atlas Tamazight",
      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—É—Ä–¥—Å–∫–∏–π": "Central Kurdish",
      "–ß–µ–Ω—É–∞": "Chenoua",
      "–ß—Ö–∞—Ç—Ç–∏—Å–≥–∞—Ä—Ö–∏": "Chhattisgarhi",
      "–ß–∏–≥–∞": "Chiga",
      "–ö–∏—Ç–∞–π—Å–∫–∏–π": "Chinese",
      "–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π": "Croatian",
      "–ß–µ—à—Å–∫–∏–π": "Czech",
      "–î–∞—Ç—Å–∫–∏–π": "Danish",
      "–î–∞—Ä–∏ (–ü–∞—Ä—Å–∏)": "Dari (Parsi)",
      "–î–µ–Ω–¥–∏ (–ë–µ–Ω–∏–Ω)": "Dendi (Benin)",
      "–î—Ö–∞–Ω–≤–∞—Ä (–ù–µ–ø–∞–ª)": "Dhanwar (Nepal)",
      "–î–∏–≤–µ—Ö–∏": "Dhivehi",
      "–î—Ö–æ–ª—É–æ": "Dholuo",
      "–î–∏–º–∏–ª–∏": "Dimili",
      "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π": "Dutch",
      "–î—å—é–ª–∞": "Dyula",
      "–ï–≥–∏–ø–µ—Ç—Å–∫–∏–π –∞—Ä–∞–±—Å–∫–∏–π": "Egyptian Arabic",
      "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "English",
      "–≠—Å—Ç–æ–Ω—Å–∫–∏–π": "Estonian",
      "–≠–≤–µ": "Ewe",
      "–§–∞—Ä–µ—Ä—Å–∫–∏–π": "Faroese",
      "–§–∞—Ç–∞–ª–∏–∫–∞": "Fataleka",
      "–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π": "Filipino",
      "–§–∏–Ω—Å–∫–∏–π": "Finnish",
      "–§–æ–Ω": "Fon",
      "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "French",
      "–§—É–ª–∞—Ö": "Fulah",
      "–ì—ç–ª—å—Å–∫–∏–π": "Gaelic",
      "–ì–∞–Ω–¥–∞": "Ganda",
      "–ì–µ–Ω": "Gen",
      "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π": "Georgian",
      "–ù–µ–º–µ—Ü–∫–∏–π": "German",
      "–ì–∏–∫—É—é": "Gikuyu",
      "–ì–æ–∞–Ω –ö–æ–Ω–∫–∞–Ω–∏": "Goan Konkani",
      "–ì—Ä–µ—á–µ—Å–∫–∏–π": "Greek",
      "–ì–≤–∞–¥–µ–ª—É–ø—Å–∫–∏–π –∫—Ä–µ–æ–ª—å—Å–∫–∏–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "Guadeloupean Creole French",
      "–ì—É–¥–∂–∞—Ä–∞—Ç–∏": "Gujarati",
      "–ì—É–Ω": "Gun",
      "–ì–∞–∏—Ç—è–Ω—Å–∫–∏–π": "Haitian",
      "–•–∞—É—Å–∞": "Hausa",
      "–ò–≤—Ä–∏—Ç": "Hebrew",
      "–•–∏–Ω–¥–∏": "Hindi",
      "–•–º–æ–Ω–≥": "Hmong",
      "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π": "Hungarian",
      "–ò—Å–ª–∞–Ω–¥—Å–∫–∏–π": "Icelandic",
      "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π": "Indonesian",
      "–ò–Ω—É–∫—Ç–∏—Ç—É—Ç": "Inuktitut",
      "–ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π": "Irish",
      "–ò—Å–µ–∫–∏—Ä–∏": "Isekiri",
      "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "Italian",
      "–Ø–ø–æ–Ω—Å–∫–∏–π": "Japanese",
      "–Ø–≤–∞–Ω—Å–∫–∏–π": "Javanese",
      "–ö–∞–±–∏–π–µ": "Kabiy√®",
      "–ö–∞–±–∏–ª—å—Å–∫–∏–π": "Kabyle",
      "–ö–∞–Ω–Ω–∞–¥–∞": "Kannada",
      "–ö–∞–ø–∞–º–ø–∞–Ω–≥–∞–Ω": "Kapampangan",
      "–ö–∞–∑–∞—Ö—Å–∫–∏–π": "Kazakh",
      "–ö—Ö–º–µ—Ä—Å–∫–∏–π": "Khmer",
      "–•–æ—Ä–∞—Å–∞–Ω–∏-—Ç—É—Ä–µ—Ü–∫–∏–π": "Khorasani Turkish",
      "–ö–∏–Ω—å—è—Ä—É–∞–Ω–¥–∞": "Kinyarwanda",
      "–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π": "Kirghiz",
      "–ö–∏—Ç—É–±–∞ (–ö–æ–Ω–≥–æ)": "Kituba (Congo)",
      "–ö–æ–Ω–≥–æ": "Kongo",
      "–ö–æ–Ω–∫–∞–Ω–∏ (–º–∞–∫—Ä–æ—è–∑—ã–∫)": "Konkani (macrolanguage)",
      "–ö–æ—Ä–µ–π—Å–∫–∏–π": "Korean",
      "–ö—É–º–∞–º": "Kumam",
      "–ö—É—Ä–¥—Å–∫–∏–π": "Kurdish",
      "–õ–∞–Ω–≥–æ (–£–≥–∞–Ω–¥–∞)": "Lango (Uganda)",
      "–õ–∞–æ—Å—Å–∫–∏–π": "Lao",
      "–õ–∞—Ç–∏–Ω—Å–∫–∏–π": "Latin",
      "–õ–∞—Ç—ã—à—Å–∫–∏–π": "Latvian",
      "–õ—é–∫—Å–µ–º–±—É—Ä–≥—Å–∫–∏–π": "Luxembourgish",
      "–õ–∏–Ω–≥–∞–ª–∞": "Lingala",
      "–õ–∏—Ç–æ–≤—Å–∫–∏–π": "Lithuanian",
      "–õ—É–±–∞-–õ—É–ª—É–∞": "Luba-Lulua",
      "–õ—É—à–∞–π": "Lushai",
      "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π": "Macedonian",
      "–ú–∞–ª–∞–π—Å–∫–∏–π": "Malay",
      "–ú–∞–ª–∞—è–ª–∞–º": "Malayalam",
      "–ú–∞–ª—å—Ç–∏–π—Å–∫–∏–π": "Maltese",
      "–ú–∞–Ω–¥–∞—Ä–∏–Ω –∫–∏—Ç–∞–π—Å–∫–∏–π": "Mandarin Chinese",
      "–ú–∞–Ω–¥–∏–Ω–∫–∞": "Mandinka",
      "–ú–∞–æ—Ä–∏": "Maori",
      "–ú–∞—Ä–∞—Ç—Ö–∏": "Marathi",
      "–ú–∏–Ω—å –ù–∞–Ω—å –∫–∏—Ç–∞–π—Å–∫–∏–π": "Min Nan Chinese",
      "–ú–æ–Ω–≥–æ–ª—å—Å–∫–∏–π": "Mongolian",
      "–ß–µ—Ä–Ω–æ–≥–æ—Ä—Å–∫–∏–π": "Montenegrin",
      "–ú–æ—Ä–∏—Å—å–µ–Ω": "Morisyen",
      "–ú–∞—Ä–æ–∫–∫–∞–Ω—Å–∫–∏–π –∂–µ—Å—Ç–æ–≤—ã–π": "Moroccan Sign Language",
      "–ú–æ—Å—Å–∏": "Mossi",
      "–ú–∏–∫–µ–Ω—Å–∫–∏–π –≥—Ä–µ—á–µ—Å–∫–∏–π": "Mycenaean Greek",
      "–ù–µ–ø–∞–ª—å—Å–∫–∏–π": "Nepali",
      "–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π": "Norwegian",
      "–ù—å—è–Ω–∫–æ–ª–µ": "Nyankole",
      "–ù—å–æ—Ä–æ": "Nyoro",
      "–û—Ä–∏—è (–º–∞–∫—Ä–æ—è–∑—ã–∫)": "Oriya (macrolanguage)",
      "–ü–∞–Ω–¥–∂–∞–±–∏": "Punjabi",
      "–ü–∞–ø—å—è–º–µ–Ω—Ç–æ": "Papiamento",
      "–ü—É—à—Ç—É": "Pashto",
      "–ü–µ—Ä—Å–∏–¥—Å–∫–∏–π": "Persian",
      "–ü–æ–ª—å—Å–∫–∏–π": "Polish",
      "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π": "Portuguese",
      "–ü—É–ª–∞–∞—Ä": "Pulaar",
      "–ö–µ—á—É–∞": "Quechua",
      "–†—É–º—ã–Ω—Å–∫–∏–π": "Romanian",
      "–†—É—Å—Å–∫–∏–π": "Russian",
      "–°–µ–Ω—Ç-–õ—é—Å–∏–π—Å–∫–∏–π –∫—Ä–µ–æ–ª—å—Å–∫–∏–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "Saint Lucian Creole French",
      "–°–∞–º–æ–∞–Ω—Å–∫–∏–π": "Samoan",
      "–°–∞–Ω—Ç–∞–ª—å—Å–∫–∏–π": "Santali",
      "–°–µ—Ä–±—Å–∫–∏–π": "Serbian",
      "–°–µ—Ä–±–æ-—Ö–æ—Ä–≤–∞—Ç—Å–∫–∏–π": "Serbo-Croatian",
      "–°–∏–Ω–≥–∞–ª—å—Å–∫–∏–π": "Sinhala",
      "–°–ª–æ–≤–∞—Ü–∫–∏–π": "Slovak",
      "–°–ª–æ–≤–µ–Ω—Å–∫–∏–π": "Slovenian",
      "–°–æ–º–∞–ª–∏–π—Å–∫–∏–π": "Somali",
      "–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∂–µ—Å—Ç–æ–≤—ã–π": "South African Sign Language",
      "–Æ–∂–Ω—ã–π –Ω–¥–µ–±–µ–ª–µ": "South Ndebele",
      "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "Spanish",
      "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞—Ä–∞–±—Å–∫–∏–π": "Standard Arabic",
      "–°—É–∞—Ö–∏–ª–∏": "Swahili",
      "–°–≤–∞—Ç–∏": "Swati",
      "–®–≤–µ–¥—Å–∫–∏–π": "Swedish",
      "–¢–∞—á–∞–≤–∏—Ç": "Tachawit",
      "–¢–∞—à–µ–ª—Ö–∏—Ç": "Tachelhit",
      "–¢–∞–≥–∞–ª—å—Å–∫–∏–π": "Tagalog",
      "–¢–∞–∏—Ç—è–Ω—Å–∫–∏–π": "Tahitian",
      "–¢–∞–¥–∂–∏–∫—Å–∫–∏–π": "Tajik",
      "–¢–∞–º–∞—à–µ–∫": "Tamashek",
      "–¢–∞–º–∏–ª—å—Å–∫–∏–π": "Tamil",
      "–¢–∞—Ä–∏—Ñ–∏—Ç": "Tarifit",
      "–¢–∞—Ç–∞—Ä—Å–∫–∏–π": "Tatar",
      "–¢–µ–ª—É–≥—É": "Telugu",
      "–¢–∞–π—Å–∫–∏–π": "Thai",
      "–¢–∏–±–µ—Ç—Å–∫–∏–π": "Tibetan",
      "–¢–∏–≥—Ä–µ": "Tigre",
      "–¢–∏–≥—Ä–∏–Ω—å—è": "Tigrinya",
      "–¢–æ—Ä–æ": "Tooro",
      "–¶–æ–Ω–≥–∞": "Tsonga",
      "–¢—É–º–∑–∞–±—Ç": "Tumzabt",
      "–¢—É—Ä–µ—Ü–∫–∏–π": "Turkish",
      "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π": "Turkmen",
      "–£–π–≥—É—Ä—Å–∫–∏–π": "Uighur",
      "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "Ukrainian",
      "–£—Ä–¥—É": "Urdu",
      "–£–∑–±–µ–∫—Å–∫–∏–π": "Uzbek",
      "–í–µ–Ω–¥–∞": "Venda",
      "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π": "Vietnamese",
      "–í–∞–ª–ª–∏–π—Å–∫–∏–π": "Welsh",
      "–ó–∞–ø–∞–¥–Ω–æ-—Ñ—Ä–∏–∑—Å–∫–∏–π": "Western Frisian",
      "–í–æ–ª–æ—Ñ": "Wolof",
      "–ö–æ—Å–∞": "Xhosa",
      "–Ø–∫—É—Ç—Å–∫–∏–π": "Yakut",
      "–ô–æ—Ä—É–±–∞": "Yoruba",
      "–Æ–∫–∞—Ç–µ–∫ –ú–∞–π—è": "Yucatec Maya",
      "–Æ—ç –∫–∏—Ç–∞–π—Å–∫–∏–π": "Yue Chinese",
      "–ó–∞—Ä–º–∞": "Zarma",
      "–ó—É–ª—É": "Zulu",
      // –†–µ–≥–∏–æ–Ω—ã
      "–ê—Ñ—Ä–∏–∫–∞": "Africa",
      "–ê–º–µ—Ä–∏–∫–∞": "Americas",
      "–ê—Ä–∞–±—Å–∫–∏–π –º–∏—Ä": "Arab world",
      "–ê–∑–∏—è": "Asia",
      "–ê–∑–∏–∞—Ç—Å–∫–æ-–¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω": "Asia-Pacific",
      "–ê–°–ï–ê–ù": "Association of Southeast Asian Nations",
      "–ë–∞–ª–∫–∞–Ω—ã": "Balkan",
      "–ë–µ–Ω–∏–ª—é–∫—Å": "Benelux",
      "–ö–∞—Ä–∏–±—ã": "Caribbean",
      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "Central America",
      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏ –í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "Central and Eastern Europe",
      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è": "Central Asia",
      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "Central Europe",
      "–°–ù–ì": "Commonwealth of Independent States",
      "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "East Africa",
      "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è": "East Asia",
      "–ï–≤—Ä–æ–ø–∞": "Europe",
      "–ï–≤—Ä–æ–ø–∞, –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫ –∏ –ê—Ñ—Ä–∏–∫–∞": "Europe, the Middle East and Africa",
      "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Å–æ—é–∑": "European Union",
      "–°–æ–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–∞–±—Å–∫–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –ü–µ—Ä—Å–∏–¥—Å–∫–æ–≥–æ –∑–∞–ª–∏–≤–∞": "Gulf Cooperation Council",
      "–ò—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "Hispanic America",
      "–õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞": "Latin America",
      "–õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞ –∏ –ö–∞—Ä–∏–±—ã": "Latin America and the Caribbean",
      "–ú–∞–≥—Ä–∏–±": "Maghreb",
      "–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫": "Middle East",
      "–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫ –∏ –°–µ–≤–µ—Ä–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "Middle East and North Africa",
      "–°—Ç—Ä–∞–Ω—ã –°–µ–≤–µ—Ä–Ω–æ–π –ï–≤—Ä–æ–ø—ã": "Nordics",
      "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "North America",
      "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ (–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç)": "Northern America",
      "–°–µ–≤–µ—Ä–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "Northern Europe",
      "–û–∫–µ–∞–Ω–∏—è": "Oceania",
      "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "South America",
      "–Æ–∂–Ω–∞—è –ê–∑–∏—è": "South Asia",
      "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è": "Southeast Asia",
      "–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "Southern Africa",
      "–Æ–∂–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "Southern Europe",
      "–ê—Ñ—Ä–∏–∫–∞ –∫ —é–≥—É –æ—Ç –°–∞—Ö–∞—Ä—ã": "Sub-Saharan Africa",
      "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –ù–∞—Ü–∏–π": "United Nations",
      "–ó–∞–ø–∞–¥–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "West Africa",
      "–ó–∞–ø–∞–¥–Ω–∞—è –ê–∑–∏—è": "West Asia",
      "–ó–∞–ø–∞–¥–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "Western Europe",
      "–í—Å–µ–º–∏—Ä–Ω—ã–π": "Worldwide"
  }
};
// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
function translateText(key) {
    return translations[currentLanguage][key] || key;
}
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
let currentSubcategory = '';
let currentMainCategoryIndex = 0;
let currentSubCategoryIndex = 0;
let currentChannelIndex = 0;
let currentMiniPlayer = null;
let miniPlayers = new Map();
let focusTimer = null;
let loadedPlaylists = {};
let navigationState = 'channels';
// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentWatchedChannel = null; // { name, url, group, logo }
let watchStartTime = null;        // timestamp –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞
// üëá –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
// >>> –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –ë–õ–û–ö –ù–ê –í–ê–® const categoryTree <<<
const categoryTree = {
  "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": {},
  "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": {},
  "–°–º–æ—Ç—Ä—è—Ç": {},
  "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": {},
  "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç": "https://iptv-org.github.io/iptv/index.m3u",
  "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª": {}, // <-- –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø
  "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": {
    "–ê–≤—Ç–æ": "https://iptv-org.github.io/iptv/categories/auto.m3u  ",
    "–ê–Ω–∏–º–∞—Ü–∏—è": "https://iptv-org.github.io/iptv/categories/animation.m3u  ",
    "–ë–∏–∑–Ω–µ—Å": "https://iptv-org.github.io/iptv/categories/business.m3u  ",
    "–î–µ—Ç—Å–∫–∏–µ": "https://iptv-org.github.io/iptv/categories/kids.m3u  ",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/documentary.m3u  ",
    "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/legislative.m3u  ",
    "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/interactive.m3u  ",
    "–ö–∏–Ω–æ": "https://iptv-org.github.io/iptv/categories/movies.m3u  ",
    "–ö–ª–∞—Å—Å–∏–∫–∞": "https://iptv-org.github.io/iptv/categories/classic.m3u  ",
    "–ö–æ–º–µ–¥–∏–∏": "https://iptv-org.github.io/iptv/categories/comedy.m3u  ",
    "–ö—É–ª–∏–Ω–∞—Ä–∏—è": "https://iptv-org.github.io/iptv/categories/cooking.m3u  ",
    "–ö—É–ª—å—Ç—É—Ä–∞": "https://iptv-org.github.io/iptv/categories/culture.m3u  ",
    "–ú—É–∑—ã–∫–∞": "https://iptv-org.github.io/iptv/categories/music.m3u  ",
    "–ù–∞—É–∫–∞": "https://iptv-org.github.io/iptv/categories/science.m3u  ",
    "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ": "https://iptv-org.github.io/iptv/categories/undefined.m3u  ",
    "–ù–æ–≤–æ—Å—Ç–∏": "https://iptv-org.github.io/iptv/categories/news.m3u  ",
    "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏": "https://iptv-org.github.io/iptv/categories/lifestyle.m3u  ",
    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "https://iptv-org.github.io/iptv/categories/education.m3u  ",
    "–û–±—â–∏–µ": "https://iptv-org.github.io/iptv/categories/general.m3u  ",
    "–ü–æ–≥–æ–¥–∞": "https://iptv-org.github.io/iptv/categories/weather.m3u  ",
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/categories/entertainment.m3u  ",
    "–†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/religious.m3u  ",
    "–†–µ–ª–∞–∫—Å": "https://iptv-org.github.io/iptv/categories/relax.m3u  ",
    "–°–µ–º–µ–π–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/family.m3u  ",
    "–°–µ—Ä–∏–∞–ª—ã": "https://iptv-org.github.io/iptv/categories/series.m3u  ",
    "–°–ø–æ—Ä—Ç": "https://iptv-org.github.io/iptv/categories/sports.m3u  ",
    "–®–æ–ø–∏–Ω–≥": "https://iptv-org.github.io/iptv/categories/shop.m3u  ",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "https://iptv-org.github.io/iptv/categories/travel.m3u  ",
    "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/public.m3u  ",
    "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö": "https://iptv-org.github.io/iptv/categories/outdoor.m3u  ",
    "XXX": "https://iptv-org.github.io/iptv/categories/xxx.m3u  "
  },
  "–°—Ç—Ä–∞–Ω—ã": {
    "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/au.m3u  ",
    "–ê–≤—Å—Ç—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/at.m3u  ",
    "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω": "https://iptv-org.github.io/iptv/countries/az.m3u  ",
    "–ê–ª–±–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/al.m3u  ",
    "–ê–ª–∂–∏—Ä": "https://iptv-org.github.io/iptv/countries/dz.m3u  ",
    "–ê–Ω–≥–æ–ª–∞": "https://iptv-org.github.io/iptv/countries/ao.m3u  ",
    "–ê–Ω–¥–æ—Ä—Ä–∞": "https://iptv-org.github.io/iptv/countries/ad.m3u  ",
    "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": "https://iptv-org.github.io/iptv/countries/ar.m3u  ",
    "–ê—Ä–º–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/am.m3u  ",
    "–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/af.m3u  ",
    "–ë–∞–≥–∞–º—ã": "https://iptv-org.github.io/iptv/countries/bs.m3u  ",
    "–ë–∞–Ω–≥–ª–∞–¥–µ—à": "https://iptv-org.github.io/iptv/countries/bd.m3u  ",
    "–ë–∞—Ä–±–∞–¥–æ—Å": "https://iptv-org.github.io/iptv/countries/bb.m3u  ",
    "–ë–∞—Ö—Ä–µ–π–Ω": "https://iptv-org.github.io/iptv/countries/bh.m3u  ",
    "–ë–µ–ª–∞—Ä—É—Å—å": "https://iptv-org.github.io/iptv/countries/by.m3u  ",
    "–ë–µ–ª–∏–∑": "https://iptv-org.github.io/iptv/countries/bz.m3u  ",
    "–ë–µ–Ω–∏–Ω": "https://iptv-org.github.io/iptv/countries/bj.m3u  ",
    "–ë–µ—Ä–º—É–¥—ã": "https://iptv-org.github.io/iptv/countries/bm.m3u  ",
    "–ë–æ–ª–≥–∞—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/bg.m3u  ",
    "–ë–æ–ª–∏–≤–∏—è": "https://iptv-org.github.io/iptv/countries/bo.m3u  ",
    "–ë–æ–Ω–∞–π—Ä–µ": "https://iptv-org.github.io/iptv/countries/bq.m3u  ",
    "–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞": "https://iptv-org.github.io/iptv/countries/ba.m3u  ",
    "–ë—Ä–∞–∑–∏–ª–∏—è": "https://iptv-org.github.io/iptv/countries/br.m3u  ",
    "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "https://iptv-org.github.io/iptv/countries/vg.m3u  ",
    "–ë—Ä—É–Ω–µ–π": "https://iptv-org.github.io/iptv/countries/bn.m3u  ",
    "–ë—É—Ä–∫–∏–Ω–∞-–§–∞—Å–æ": "https://iptv-org.github.io/iptv/countries/bf.m3u  ",
    "–ë—É—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/bt.m3u  ",
    "–í–∞—Ç–∏–∫–∞–Ω": "https://iptv-org.github.io/iptv/countries/va.m3u  ",
    "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/uk.m3u  ",
    "–í–µ–Ω–≥—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/hu.m3u  ",
    "–í–µ–Ω–µ—Å—É—ç–ª–∞": "https://iptv-org.github.io/iptv/countries/ve.m3u  ",
    "–í—å–µ—Ç–Ω–∞–º": "https://iptv-org.github.io/iptv/countries/vn.m3u  ",
    "–ì–∞–∏—Ç–∏": "https://iptv-org.github.io/iptv/countries/ht.m3u  ",
    "–ì–∞–π–∞–Ω–∞": "https://iptv-org.github.io/iptv/countries/gy.m3u  ",
    "–ì–∞–º–±–∏—è": "https://iptv-org.github.io/iptv/countries/gm.m3u  ",
    "–ì–∞–Ω–∞": "https://iptv-org.github.io/iptv/countries/gh.m3u  ",
    "–ì–≤–∞–¥–µ–ª—É–ø–∞": "https://iptv-org.github.io/iptv/countries/gp.m3u  ",
    "–ì–≤–∞—Ç–µ–º–∞–ª–∞": "https://iptv-org.github.io/iptv/countries/gt.m3u  ",
    "–ì–≤–∏–Ω–µ—è": "https://iptv-org.github.io/iptv/countries/gn.m3u  ",
    "–ì–µ—Ä–Ω—Å–∏": "https://iptv-org.github.io/iptv/countries/gg.m3u  ",
    "–ì–µ—Ä–º–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/de.m3u  ",
    "–ì–æ–Ω–¥—É—Ä–∞—Å": "https://iptv-org.github.io/iptv/countries/hn.m3u  ",
    "–ì–æ–Ω–∫–æ–Ω–≥": "https://iptv-org.github.io/iptv/countries/hk.m3u  ",
    "–ì—Ä–µ—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/gr.m3u  ",
    "–ì—Ä—É–∑–∏—è": "https://iptv-org.github.io/iptv/countries/ge.m3u  ",
    "–ì—É–∞–º": "https://iptv-org.github.io/iptv/countries/gu.m3u  ",
    "–î–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/dk.m3u  ",
    "–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ": "https://iptv-org.github.io/iptv/countries/cd.m3u  ",
    "–î–∂–∏–±—É—Ç–∏": "https://iptv-org.github.io/iptv/countries/dj.m3u  ",
    "–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/do.m3u  ",
    "–ï–≥–∏–ø–µ—Ç": "https://iptv-org.github.io/iptv/countries/eg.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–∞—è –°–∞—Ö–∞—Ä–∞": "https://iptv-org.github.io/iptv/countries/eh.m3u  ",
    "–ó–∏–º–±–∞–±–≤–µ": "https://iptv-org.github.io/iptv/countries/zw.m3u  ",
    "–ò–∑—Ä–∞–∏–ª—å": "https://iptv-org.github.io/iptv/countries/il.m3u  ",
    "–ò–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/in.m3u  ",
    "–ò–Ω–¥–æ–Ω–µ–∑–∏—è": "https://iptv-org.github.io/iptv/countries/id.m3u  ",
    "–ò–æ—Ä–¥–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/jo.m3u  ",
    "–ò—Ä–∞–∫": "https://iptv-org.github.io/iptv/countries/iq.m3u  ",
    "–ò—Ä–∞–Ω": "https://iptv-org.github.io/iptv/countries/ir.m3u  ",
    "–ò—Ä–ª–∞–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/ie.m3u  ",
    "–ò—Å–ª–∞–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/is.m3u  ",
    "–ò—Å–ø–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/es.m3u  ",
    "–ò—Ç–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/it.m3u  ",
    "–ô–µ–º–µ–Ω": "https://iptv-org.github.io/iptv/countries/ye.m3u  ",
    "–ö–∞–±–æ-–í–µ—Ä–¥–µ": "https://iptv-org.github.io/iptv/countries/cv.m3u  ",
    "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/kz.m3u  ",
    "–ö–∞–º–±–æ–¥–∂–∞": "https://iptv-org.github.io/iptv/countries/kh.m3u  ",
    "–ö–∞–º–µ—Ä—É–Ω": "https://iptv-org.github.io/iptv/countries/cm.m3u  ",
    "–ö–∞–Ω–∞–¥–∞": "https://iptv-org.github.io/iptv/countries/ca.m3u  ",
    "–ö–∞—Ç–∞—Ä": "https://iptv-org.github.io/iptv/countries/qa.m3u  ",
    "–ö–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/ke.m3u  ",
    "–ö–∏–ø—Ä": "https://iptv-org.github.io/iptv/countries/cy.m3u  ",
    "–ö–∏—Ä–≥–∏–∑–∏—è": "https://iptv-org.github.io/iptv/countries/kg.m3u  ",
    "–ö–∏—Ç–∞–π": "https://iptv-org.github.io/iptv/countries/cn.m3u  ",
    "–ö–æ–ª—É–º–±–∏—è": "https://iptv-org.github.io/iptv/countries/co.m3u  ",
    "–ö–æ–º–æ—Ä—ã": "https://iptv-org.github.io/iptv/countries/km.m3u  ",
    "–ö–æ–Ω–≥–æ": "https://iptv-org.github.io/iptv/countries/cg.m3u  ",
    "–ö–æ—Å–æ–≤–æ": "https://iptv-org.github.io/iptv/countries/xk.m3u  ",
    "–ö–æ—Å—Ç–∞-–†–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/cr.m3u  ",
    "–ö–æ—Ç-–¥'–ò–≤—É–∞—Ä": "https://iptv-org.github.io/iptv/countries/ci.m3u  ",
    "–ö—É–±–∞": "https://iptv-org.github.io/iptv/countries/cu.m3u  ",
    "–ö—É–≤–µ–π—Ç": "https://iptv-org.github.io/iptv/countries/kw.m3u  ",
    "–ö—é—Ä–∞—Å–∞–æ": "https://iptv-org.github.io/iptv/countries/cw.m3u  ",
    "–õ–∞–æ—Å": "https://iptv-org.github.io/iptv/countries/la.m3u  ",
    "–õ–∞—Ç–≤–∏—è": "https://iptv-org.github.io/iptv/countries/lv.m3u  ",
    "–õ–µ—Å–æ—Ç–æ": "https://iptv-org.github.io/iptv/countries/ls.m3u  ",
    "–õ–∏–≤–∞–Ω": "https://iptv-org.github.io/iptv/countries/lb.m3u  ",
    "–õ–∏–≤–∏—è": "https://iptv-org.github.io/iptv/countries/ly.m3u  ",
    "–õ–∏—Ç–≤–∞": "https://iptv-org.github.io/iptv/countries/lt.m3u  ",
    "–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω": "https://iptv-org.github.io/iptv/countries/li.m3u  ",
    "–õ—é–∫—Å–µ–º–±—É—Ä–≥": "https://iptv-org.github.io/iptv/countries/lu.m3u  ",
    "–ú–∞–≤—Ä–∏–∫–∏–π": "https://iptv-org.github.io/iptv/countries/mu.m3u  ",
    "–ú–∞–≤—Ä–∏—Ç–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/mr.m3u  ",
    "–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä": "https://iptv-org.github.io/iptv/countries/mg.m3u  ",
    "–ú–∞–∫–∞–æ": "https://iptv-org.github.io/iptv/countries/mo.m3u  ",
    "–ú–∞–ª–∞–≤–∏": "https://iptv-org.github.io/iptv/countries/mw.m3u  ",
    "–ú–∞–ª–∞–π–∑–∏—è": "https://iptv-org.github.io/iptv/countries/my.m3u  ",
    "–ú–∞–ª–∏": "https://iptv-org.github.io/iptv/countries/ml.m3u  ",
    "–ú–∞–ª—å–¥–∏–≤—ã": "https://iptv-org.github.io/iptv/countries/mv.m3u  ",
    "–ú–∞–ª—å—Ç–∞": "https://iptv-org.github.io/iptv/countries/mt.m3u  ",
    "–ú–∞—Ä–æ–∫–∫–æ": "https://iptv-org.github.io/iptv/countries/ma.m3u  ",
    "–ú–∞—Ä—Ç–∏–Ω–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/mq.m3u  ",
    "–ú–µ–∫—Å–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/mx.m3u  ",
    "–ú–æ–∑–∞–º–±–∏–∫": "https://iptv-org.github.io/iptv/countries/mz.m3u  ",
    "–ú–æ–ª–¥–æ–≤–∞": "https://iptv-org.github.io/iptv/countries/md.m3u  ",
    "–ú–æ–Ω–∞–∫–æ": "https://iptv-org.github.io/iptv/countries/mc.m3u  ",
    "–ú–æ–Ω–≥–æ–ª–∏—è": "https://iptv-org.github.io/iptv/countries/mn.m3u  ",
    "–ú—å—è–Ω–º–∞": "https://iptv-org.github.io/iptv/countries/mm.m3u  ",
    "–ù–∞–º–∏–±–∏—è": "https://iptv-org.github.io/iptv/countries/na.m3u  ",
    "–ù–µ–ø–∞–ª": "https://iptv-org.github.io/iptv/countries/np.m3u  ",
    "–ù–∏–≥–µ—Ä": "https://iptv-org.github.io/iptv/countries/ne.m3u  ",
    "–ù–∏–≥–µ—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/ng.m3u  ",
    "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": "https://iptv-org.github.io/iptv/countries/nl.m3u  ",
    "–ù–∏–∫–∞—Ä–∞–≥—É–∞": "https://iptv-org.github.io/iptv/countries/ni.m3u  ",
    "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/nz.m3u  ",
    "–ù–æ—Ä–≤–µ–≥–∏—è": "https://iptv-org.github.io/iptv/countries/no.m3u  ",
    "–û–ê–≠": "https://iptv-org.github.io/iptv/countries/ae.m3u  ",
    "–û–º–∞–Ω": "https://iptv-org.github.io/iptv/countries/om.m3u  ",
    "–ü–∞–∫–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/pk.m3u  ",
    "–ü–∞–ª–µ—Å—Ç–∏–Ω–∞": "https://iptv-org.github.io/iptv/countries/ps.m3u  ",
    "–ü–∞–Ω–∞–º–∞": "https://iptv-org.github.io/iptv/countries/pa.m3u  ",
    "–ü–∞–ø—É–∞ ‚Äî –ù–æ–≤–∞—è –ì–≤–∏–Ω–µ—è": "https://iptv-org.github.io/iptv/countries/pg.m3u  ",
    "–ü–∞—Ä–∞–≥–≤–∞–π": "https://iptv-org.github.io/iptv/countries/py.m3u  ",
    "–ü–µ—Ä—É": "https://iptv-org.github.io/iptv/countries/pe.m3u  ",
    "–ü–æ–ª—å—à–∞": "https://iptv-org.github.io/iptv/countries/pl.m3u  ",
    "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/pt.m3u  ",
    "–ü—É—ç—Ä—Ç–æ-–†–∏–∫–æ": "https://iptv-org.github.io/iptv/countries/pr.m3u  ",
    "–†–µ—é–Ω—å–æ–Ω": "https://iptv-org.github.io/iptv/countries/re.m3u  ",
    "–†–æ—Å—Å–∏—è": "https://iptv-org.github.io/iptv/countries/ru.m3u  ",
    "–†—É–∞–Ω–¥–∞": "https://iptv-org.github.io/iptv/countries/rw.m3u  ",
    "–†—É–º—ã–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/ro.m3u  ",
    "–°–∞–ª—å–≤–∞–¥–æ—Ä": "https://iptv-org.github.io/iptv/countries/sv.m3u  ",
    "–°–∞–º–æ–∞": "https://iptv-org.github.io/iptv/countries/ws.m3u  ",
    "–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ": "https://iptv-org.github.io/iptv/countries/sm.m3u  ",
    "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è": "https://iptv-org.github.io/iptv/countries/sa.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–µ—è": "https://iptv-org.github.io/iptv/countries/kp.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/mk.m3u  ",
    "–°–µ–Ω–µ–≥–∞–ª": "https://iptv-org.github.io/iptv/countries/sn.m3u  ",
    "–°–µ–Ω—Ç-–ö–∏—Ç—Å –∏ –ù–µ–≤–∏—Å": "https://iptv-org.github.io/iptv/countries/kn.m3u  ",
    "–°–µ–Ω—Ç-–õ—é—Å–∏—è": "https://iptv-org.github.io/iptv/countries/lc.m3u  ",
    "–°–µ—Ä–±–∏—è": "https://iptv-org.github.io/iptv/countries/rs.m3u  ",
    "–°–∏–Ω–≥–∞–ø—É—Ä": "https://iptv-org.github.io/iptv/countries/sg.m3u  ",
    "–°–∏–Ω—Ç-–ú–∞—Ä—Ç–µ–Ω": "https://iptv-org.github.io/iptv/countries/sx.m3u  ",
    "–°–∏—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/sy.m3u  ",
    "–°–ª–æ–≤–∞–∫–∏—è": "https://iptv-org.github.io/iptv/countries/sk.m3u  ",
    "–°–ª–æ–≤–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/si.m3u  ",
    "–°–æ–º–∞–ª–∏": "https://iptv-org.github.io/iptv/countries/so.m3u  ",
    "–°—É–¥–∞–Ω": "https://iptv-org.github.io/iptv/countries/sd.m3u  ",
    "–°—É—Ä–∏–Ω–∞–º": "https://iptv-org.github.io/iptv/countries/sr.m3u  ",
    "–°–®–ê": "https://iptv-org.github.io/iptv/countries/us.m3u  ",
    "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/tj.m3u  ",
    "–¢–∞–∏–ª–∞–Ω–¥": "https://iptv-org.github.io/iptv/countries/th.m3u  ",
    "–¢–∞–π–≤–∞–Ω—å": "https://iptv-org.github.io/iptv/countries/tw.m3u  ",
    "–¢–∞–Ω–∑–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/tz.m3u  ",
    "–¢–æ–≥–æ": "https://iptv-org.github.io/iptv/countries/tg.m3u  ",
    "–¢–æ–Ω–≥–∞": "https://iptv-org.github.io/iptv/countries/to.m3u  ",
    "–¢—Ä–∏–Ω–∏–¥–∞–¥ –∏ –¢–æ–±–∞–≥–æ": "https://iptv-org.github.io/iptv/countries/tt.m3u  ",
    "–¢—É–Ω–∏—Å": "https://iptv-org.github.io/iptv/countries/tn.m3u  ",
    "–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/tm.m3u  ",
    "–¢—É—Ä—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/tr.m3u  ",
    "–£–≥–∞–Ω–¥–∞": "https://iptv-org.github.io/iptv/countries/ug.m3u  ",
    "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/uz.m3u  ",
    "–£–∫—Ä–∞–∏–Ω–∞": "https://iptv-org.github.io/iptv/countries/ua.m3u  ",
    "–£—Ä—É–≥–≤–∞–π": "https://iptv-org.github.io/iptv/countries/uy.m3u  ",
    "–§–∞—Ä–µ—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "https://iptv-org.github.io/iptv/countries/fo.m3u  ",
    "–§–∏–¥–∂–∏": "https://iptv-org.github.io/iptv/countries/fj.m3u  ",
    "–§–∏–ª–∏–ø–ø–∏–Ω—ã": "https://iptv-org.github.io/iptv/countries/ph.m3u  ",
    "–§–∏–Ω–ª—è–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/fi.m3u  ",
    "–§—Ä–∞–Ω—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/fr.m3u  ",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ü–æ–ª–∏–Ω–µ–∑–∏—è": "https://iptv-org.github.io/iptv/countries/pf.m3u  ",
    "–•–æ—Ä–≤–∞—Ç–∏—è": "https://iptv-org.github.io/iptv/countries/hr.m3u  ",
    "–ß–∞–¥": "https://iptv-org.github.io/iptv/countries/td.m3u  ",
    "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/me.m3u  ",
    "–ß–µ—Ö–∏—è": "https://iptv-org.github.io/iptv/countries/cz.m3u  ",
    "–ß–∏–ª–∏": "https://iptv-org.github.io/iptv/countries/cl.m3u  ",
    "–®–≤–µ–π—Ü–∞—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/ch.m3u  ",
    "–®–≤–µ—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/se.m3u  ",
    "–®—Ä–∏-–õ–∞–Ω–∫–∞": "https://iptv-org.github.io/iptv/countries/lk.m3u  ",
    "–≠–∫–≤–∞–¥–æ—Ä": "https://iptv-org.github.io/iptv/countries/ec.m3u  ",
    "–≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ì–≤–∏–Ω–µ—è": "https://iptv-org.github.io/iptv/countries/gq.m3u  ",
    "–≠—Ä–∏—Ç—Ä–µ—è": "https://iptv-org.github.io/iptv/countries/er.m3u  ",
    "–≠—Å—Ç–æ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/ee.m3u  ",
    "–≠—Ñ–∏–æ–ø–∏—è": "https://iptv-org.github.io/iptv/countries/et.m3u  ",
    "–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/za.m3u  ",
    "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è": "https://iptv-org.github.io/iptv/countries/kr.m3u  ",
    "–Ø–º–∞–π–∫–∞": "https://iptv-org.github.io/iptv/countries/jm.m3u  ",
    "–Ø–ø–æ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/jp.m3u  ",
    "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "https://iptv-org.github.io/iptv/countries/vi.m3u  ",
    "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ": "https://iptv-org.github.io/iptv/countries/int.m3u  ",
    "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ": "https://iptv-org.github.io/iptv/countries/undefined.m3u  "
  },
  "–Ø–∑—ã–∫–∏": {
    "–ê–∫–æ–ª–∏": "https://iptv-org.github.io/iptv/languages/ach.m3u  ",
    "–ê–¥—Ö–æ–ª–∞": "https://iptv-org.github.io/iptv/languages/adh.m3u  ",
    "–ê–π–∏–∑–æ –≥–±–µ": "https://iptv-org.github.io/iptv/languages/ayb.m3u  ",
    "–ê–π–º–∞—Ä–∞": "https://iptv-org.github.io/iptv/languages/aym.m3u  ",
    "–ê–ª–±–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/sqi.m3u  ",
    "–ê–ª–∂–∏—Ä—Å–∫–∏–π –∂–µ—Å—Ç–æ–≤—ã–π": "https://iptv-org.github.io/iptv/languages/asp.m3u  ",
    "–ê–ª—É—Ä": "https://iptv-org.github.io/iptv/languages/alz.m3u  ",
    "–ê–º—Ö–∞—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/amh.m3u  ",
    "–ê—Ä–∞–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ara.m3u  ",
    "–ê—Ä–º—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hye.m3u  ",
    "–ê—Å—Å–∞–º—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/asm.m3u  ",
    "–ê—Å—Å–∏—Ä–∏–π—Å–∫–∏–π –Ω–µ–æ–∞—Ä–∞–º–µ–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/aii.m3u  ",
    "–ê—Ñ–∞—Ä": "https://iptv-org.github.io/iptv/languages/aar.m3u  ",
    "–ê—Ñ—Ä–∏–∫–∞–∞–Ω—Å": "https://iptv-org.github.io/iptv/languages/afr.m3u  ",
    "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/aze.m3u  ",
    "–ë–∞–∞—Ç–æ–Ω—É–º": "https://iptv-org.github.io/iptv/languages/bba.m3u  ",
    "–ë–∞–º–±–∞—Ä–∞": "https://iptv-org.github.io/iptv/languages/bam.m3u  ",
    "–ë–∞—Å–∫—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/eus.m3u  ",
    "–ë–∞—à–∫–∏—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bak.m3u  ",
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bel.m3u  ",
    "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ben.m3u  ",
    "–ë–∏—Ä–º–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/mya.m3u  ",
    "–ë–æ–¥–∂–ø—É—Ä–∏": "https://iptv-org.github.io/iptv/languages/bho.m3u  ",
    "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bul.m3u  ",
    "–ë–æ—Å–Ω–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bos.m3u  ",
    "–í–∞–ª–ª–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/cym.m3u  ",
    "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hun.m3u  ",
    "–í–µ–Ω–¥–∞": "https://iptv-org.github.io/iptv/languages/ven.m3u  ",
    "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/vie.m3u  ",
    "–ì–∞–Ω–¥–∞": "https://iptv-org.github.io/iptv/languages/lug.m3u  ",
    "–ì–∞–∏—Ç—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hat.m3u  ",
    "–ì–µ–Ω": "https://iptv-org.github.io/iptv/languages/gej.m3u  ",
    "–ì–∏–∫—É—é": "https://iptv-org.github.io/iptv/languages/kik.m3u  ",
    "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/nld.m3u  ",
    "–ì–æ–∞–Ω –ö–æ–Ω–∫–∞–Ω–∏": "https://iptv-org.github.io/iptv/languages/gom.m3u  ",
    "–ì—Ä–µ—á–µ—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ell.m3u  ",
    "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kat.m3u  ",
    "–ì—É–¥–∂–∞—Ä–∞—Ç–∏": "https://iptv-org.github.io/iptv/languages/guj.m3u  ",
    "–ì—É–Ω": "https://iptv-org.github.io/iptv/languages/guw.m3u  ",
    "–ì—ç–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/gla.m3u  ",
    "–î–∞—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/dan.m3u  ",
    "–î–∞—Ä–∏ (–ü–∞—Ä—Å–∏)": "https://iptv-org.github.io/iptv/languages/prd.m3u  ",
    "–î–µ–Ω–¥–∏ (–ë–µ–Ω–∏–Ω)": "https://iptv-org.github.io/iptv/languages/ddn.m3u  ",
    "–î–∏–≤–µ—Ö–∏": "https://iptv-org.github.io/iptv/languages/div.m3u  ",
    "–î—Ö–∞–Ω–≤–∞—Ä (–ù–µ–ø–∞–ª)": "https://iptv-org.github.io/iptv/languages/dhw.m3u  ",
    "–î—Ö–æ–ª—É–æ": "https://iptv-org.github.io/iptv/languages/luo.m3u  ",
    "–î–∏–º–∏–ª–∏": "https://iptv-org.github.io/iptv/languages/zza.m3u  ",
    "–î—å—é–ª–∞": "https://iptv-org.github.io/iptv/languages/dyu.m3u  ",
    "–ï–≥–∏–ø–µ—Ç—Å–∫–∏–π –∞—Ä–∞–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/arz.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–æ-—Ñ—Ä–∏–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fry.m3u  ",
    "–ó–∞—Ä–º–∞": "https://iptv-org.github.io/iptv/languages/dje.m3u  ",
    "–ó—É–ª—É": "https://iptv-org.github.io/iptv/languages/zul.m3u  ",
    "–ò–≤—Ä–∏—Ç": "https://iptv-org.github.io/iptv/languages/heb.m3u  ",
    "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ind.m3u  ",
    "–ò–Ω—É–∫—Ç–∏—Ç—É—Ç": "https://iptv-org.github.io/iptv/languages/iku.m3u  ",
    "–ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/gle.m3u  ",
    "–ò—Å–µ–∫–∏—Ä–∏": "https://iptv-org.github.io/iptv/languages/its.m3u  ",
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/spa.m3u  ",
    "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ita.m3u  ",
    "–ö–∞–±–∏–π–µ": "https://iptv-org.github.io/iptv/languages/kbp.m3u  ",
    "–ö–∞–±–∏–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kab.m3u  ",
    "–ö–∞–Ω–Ω–∞–¥–∞": "https://iptv-org.github.io/iptv/languages/kan.m3u  ",
    "–ö–∞–ø–∞–º–ø–∞–Ω–≥–∞–Ω": "https://iptv-org.github.io/iptv/languages/pam.m3u  ",
    "–ö–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/cat.m3u  ",
    "–ö–∞–∑–∞—Ö—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kaz.m3u  ",
    "–ö–µ—á—É–∞": "https://iptv-org.github.io/iptv/languages/que.m3u  ",
    "–ö–∏–Ω—å—è—Ä—É–∞–Ω–¥–∞": "https://iptv-org.github.io/iptv/languages/kin.m3u  ",
    "–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kir.m3u  ",
    "–ö–∏—Ç—É–±–∞ (–ö–æ–Ω–≥–æ)": "https://iptv-org.github.io/iptv/languages/mkw.m3u  ",
    "–ö–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/zho.m3u  ",
    "–ö–æ–Ω–≥–æ": "https://iptv-org.github.io/iptv/languages/kon.m3u  ",
    "–ö–æ–Ω–∫–∞–Ω–∏ (–º–∞–∫—Ä–æ—è–∑—ã–∫)": "https://iptv-org.github.io/iptv/languages/kok.m3u  ",
    "–ö–æ—Ä–µ–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kor.m3u  ",
    "–ö—É–º–∞–º": "https://iptv-org.github.io/iptv/languages/kdi.m3u  ",
    "–ö—É—Ä–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kur.m3u  ",
    "–õ–∞–Ω–≥–æ (–£–≥–∞–Ω–¥–∞)": "https://iptv-org.github.io/iptv/languages/laj.m3u  ",
    "–õ–∞—Ç–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/lat.m3u  ",
    "–õ–∞–æ—Å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/lao.m3u  ",
    "–õ–∞—Ç—ã—à—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/lav.m3u  ",
    "–õ–∏–Ω–≥–∞–ª–∞": "https://iptv-org.github.io/iptv/languages/lin.m3u  ",
    "–õ–∏—Ç–æ–≤—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/lit.m3u  ",
    "–õ—É–±–∞-–õ—É–ª—É–∞": "https://iptv-org.github.io/iptv/languages/lua.m3u  ",
    "–õ—É—à–∞–π": "https://iptv-org.github.io/iptv/languages/lus.m3u  ",
    "–õ—é–∫—Å–µ–º–±—É—Ä–≥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ltz.m3u  ",
    "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/mkd.m3u  ",
    "–ú–∞–ª–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/msa.m3u  ",
    "–ú–∞–ª–∞—è–ª–∞–º": "https://iptv-org.github.io/iptv/languages/mal.m3u  ",
    "–ú–∞–ª—å—Ç–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/mlt.m3u  ",
    "–ú–∞–Ω–¥–∞—Ä–∏–Ω –∫–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/cmn.m3u  ",
    "–ú–∞–Ω–¥–∏–Ω–∫–∞": "https://iptv-org.github.io/iptv/languages/mnk.m3u  ",
    "–ú–∞–æ—Ä–∏": "https://iptv-org.github.io/iptv/languages/mri.m3u  ",
    "–ú–∞—Ä–∞—Ç—Ö–∏": "https://iptv-org.github.io/iptv/languages/mar.m3u  ",
    "–ú–∏–∫–µ–Ω—Å–∫–∏–π –≥—Ä–µ—á–µ—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/gmy.m3u  ",
    "–ú–∏–Ω—å –ù–∞–Ω—å –∫–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/nan.m3u  ",
    "–ú–æ–Ω–≥–æ–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/mon.m3u  ",
    "–ú–æ—Ä–∏—Å—å–µ–Ω": "https://iptv-org.github.io/iptv/languages/mfe.m3u  ",
    "–ú–æ—Å—Å–∏": "https://iptv-org.github.io/iptv/languages/mos.m3u  ",
    "–ù–µ–º–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/deu.m3u  ",
    "–ù–µ–ø–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/nep.m3u  ",
    "–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/nor.m3u  ",
    "–ù—å—è–Ω–∫–æ–ª–µ": "https://iptv-org.github.io/iptv/languages/nyn.m3u  ",
    "–ù—å–æ—Ä–æ": "https://iptv-org.github.io/iptv/languages/nyo.m3u  ",
    "–û—Ä–∏—è (–º–∞–∫—Ä–æ—è–∑—ã–∫)": "https://iptv-org.github.io/iptv/languages/ori.m3u  ",
    "–ü–∞–Ω–¥–∂–∞–±–∏": "https://iptv-org.github.io/iptv/languages/pan.m3u  ",
    "–ü–∞–ø—å—è–º–µ–Ω—Ç–æ": "https://iptv-org.github.io/iptv/languages/pap.m3u  ",
    "–ü–µ—Ä—Å–∏–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fas.m3u  ",
    "–ü–æ–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/pol.m3u  ",
    "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/por.m3u  ",
    "–ü—É–ª–∞–∞—Ä": "https://iptv-org.github.io/iptv/languages/fuc.m3u  ",
    "–ü—É—à—Ç—É": "https://iptv-org.github.io/iptv/languages/pus.m3u  ",
    "–†—É–º—ã–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ron.m3u  ",
    "–†—É—Å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/rus.m3u  ",
    "–°–∞–º–æ–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/smo.m3u  ",
    "–°–∞–Ω—Ç–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/sat.m3u  ",
    "–°–µ–Ω—Ç-–õ—é—Å–∏–π—Å–∫–∏–π –∫—Ä–µ–æ–ª—å—Å–∫–∏–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/acf.m3u  ",
    "–°–µ—Ä–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/srp.m3u  ",
    "–°–µ—Ä–±–æ-—Ö–æ—Ä–≤–∞—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hbs.m3u  ",
    "–°–∏–Ω–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/sin.m3u  ",
    "–°–ª–æ–≤–∞—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/slk.m3u  ",
    "–°–ª–æ–≤–µ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/slv.m3u  ",
    "–°–æ–º–∞–ª–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/som.m3u  ",
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞—Ä–∞–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/arb.m3u  ",
    "–°—É–∞—Ö–∏–ª–∏": "https://iptv-org.github.io/iptv/languages/swa.m3u  ",
    "–°–≤–∞—Ç–∏": "https://iptv-org.github.io/iptv/languages/ssw.m3u  ",
    "–°–®–ê": "https://iptv-org.github.io/iptv/languages/eng.m3u  ",
    "–¢–∞–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tgl.m3u  ",
    "–¢–∞–¥–∂–∏–∫—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tgk.m3u  ",
    "–¢–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tha.m3u  ",
    "–¢–∞–º–∏–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tam.m3u  ",
    "–¢–∞—Ç–∞—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tat.m3u  ",
    "–¢–∞—á–∞–≤–∏—Ç": "https://iptv-org.github.io/iptv/languages/shy.m3u  ",
    "–¢–∞—à–µ–ª—Ö–∏—Ç": "https://iptv-org.github.io/iptv/languages/shi.m3u  ",
    "–¢–∞–∏—Ç—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tah.m3u  ",
    "–¢–µ–ª—É–≥—É": "https://iptv-org.github.io/iptv/languages/tel.m3u  ",
    "–¢–∏–≥—Ä–µ": "https://iptv-org.github.io/iptv/languages/tig.m3u  ",
    "–¢–∏–≥—Ä–∏–Ω—å—è": "https://iptv-org.github.io/iptv/languages/tir.m3u  ",
    "–¢–∏–±–µ—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bod.m3u  ",
    "–¢–æ—Ä": "https://iptv-org.github.io/iptv/languages/ttj.m3u  ",
    "–¢—É–º–∑–∞–±—Ç": "https://iptv-org.github.io/iptv/languages/mzb.m3u  ",
    "–¢—É—Ä–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tur.m3u  ",
    "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tuk.m3u  ",
    "–£–∑–±–µ–∫—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/uzb.m3u  ",
    "–£–π–≥—É—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/uig.m3u  ",
    "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ukr.m3u  ",
    "–£—Ä–¥—É": "https://iptv-org.github.io/iptv/languages/urd.m3u  ",
    "–§–∞—Ä–µ—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fao.m3u  ",
    "–§–∞—Ç–∞–ª–∏–∫–∞": "https://iptv-org.github.io/iptv/languages/far.m3u  ",
    "–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fil.m3u  ",
    "–§–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fin.m3u  ",
    "–§–æ–Ω": "https://iptv-org.github.io/iptv/languages/fon.m3u  ",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fra.m3u  ",
    "–§—É–ª–∞—Ö": "https://iptv-org.github.io/iptv/languages/ful.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ç–ª–∞—Å —Ç–∞–º–∞–∑–∏–≥—Ö—Ç": "https://iptv-org.github.io/iptv/languages/tzm.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—É—Ä–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ckb.m3u  ",
    "–ß–µ–Ω—É–∞": "https://iptv-org.github.io/iptv/languages/cnu.m3u  ",
    "–ß–µ—à—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ces.m3u  ",
    "–ß–∏–≥–∞": "https://iptv-org.github.io/iptv/languages/cgg.m3u  ",
    "–ß—Ö–∞—Ç—Ç–∏—Å–≥–∞—Ä—Ö–∏": "https://iptv-org.github.io/iptv/languages/hne.m3u  ",
    "–•–∞—É—Å–∞": "https://iptv-org.github.io/iptv/languages/hau.m3u  ",
    "–•–∏–Ω–¥–∏": "https://iptv-org.github.io/iptv/languages/hin.m3u  ",
    "–•–º–æ–Ω–≥": "https://iptv-org.github.io/iptv/languages/hmn.m3u  ",
    "–•–æ—Ä–∞—Å–∞–Ω–∏-—Ç—É—Ä–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kmz.m3u  ",
    "–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hrv.m3u  ",
    "–¶–æ–Ω–≥–∞": "https://iptv-org.github.io/iptv/languages/tso.m3u  ",
    "–ß–µ—Ä–Ω–æ–≥–æ—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/cnr.m3u  ",
    "–®–≤–µ–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/swe.m3u  ",
    "–≠–≤–µ": "https://iptv-org.github.io/iptv/languages/ewe.m3u  ",
    "–≠—Å—Ç–æ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/est.m3u  ",
    "–Ø–≤–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/jav.m3u  ",
    "–Ø–∫—É—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/sah.m3u  ",
    "–Ø–ø–æ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/jpn.m3u  ",
    "–ô–æ—Ä—É–±–∞": "https://iptv-org.github.io/iptv/languages/yor.m3u  ",
    "–Æ–∫–∞—Ç–µ–∫ –ú–∞–π—è": "https://iptv-org.github.io/iptv/languages/yua.m3u  ",
    "–Æ—ç –∫–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/yue.m3u  ",
    "–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∂–µ—Å—Ç–æ–≤—ã–π": "https://iptv-org.github.io/iptv/languages/sfs.m3u  ",
    "–Æ–∂–Ω—ã–π –Ω–¥–µ–±–µ–ª–µ": "https://iptv-org.github.io/iptv/languages/nbl.m3u  ",
    "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ": "https://iptv-org.github.io/iptv/languages/undefined.m3u  "
  },
  "–†–µ–≥–∏–æ–Ω—ã": {
    "–ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/asia.m3u  ",
    "–ê–∑–∏–∞—Ç—Å–∫–æ-–¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω": "https://iptv-org.github.io/iptv/regions/apac.m3u  ",
    "–ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/amer.m3u  ",
    "–ê—Ä–∞–±—Å–∫–∏–π –º–∏—Ä": "https://iptv-org.github.io/iptv/regions/arab.m3u  ",
    "–ê–°–ï–ê–ù": "https://iptv-org.github.io/iptv/regions/asean.m3u  ",
    "–ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/afr.m3u  ",
    "–ê—Ñ—Ä–∏–∫–∞ –∫ —é–≥—É –æ—Ç –°–∞—Ö–∞—Ä—ã": "https://iptv-org.github.io/iptv/regions/ssa.m3u  ",
    "–ë–∞–ª–∫–∞–Ω—ã": "https://iptv-org.github.io/iptv/regions/balkan.m3u  ",
    "–ë–µ–Ω–∏–ª—é–∫—Å": "https://iptv-org.github.io/iptv/regions/benelux.m3u  ",
    "–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫": "https://iptv-org.github.io/iptv/regions/mideast.m3u  ",
    "–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫ –∏ –°–µ–≤–µ—Ä–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/mena.m3u  ",
    "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/eas.m3u  ",
    "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/eaf.m3u  ",
    "–í—Å–µ–º–∏—Ä–Ω—ã–π": "https://iptv-org.github.io/iptv/regions/ww.m3u  ",
    "–ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/eur.m3u  ",
    "–ï–≤—Ä–æ–ø–∞, –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫ –∏ –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/emea.m3u  ",
    "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Å–æ—é–∑": "https://iptv-org.github.io/iptv/regions/eu.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/was.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/waf.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/wer.m3u  ",
    "–ö–∞—Ä–∏–±—ã": "https://iptv-org.github.io/iptv/regions/carib.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/cas.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/cenamer.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/ceu.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏ –í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/cee.m3u  ",
    "–ò—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/hispam.m3u  ",
    "–õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/latam.m3u  ",
    "–õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞ –∏ –ö–∞—Ä–∏–±—ã": "https://iptv-org.github.io/iptv/regions/lac.m3u  ",
    "–ú–∞–≥—Ä–∏–±": "https://iptv-org.github.io/iptv/regions/maghreb.m3u  ",
    "–û–∫–µ–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/regions/oce.m3u  ",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –ù–∞—Ü–∏–π": "https://iptv-org.github.io/iptv/regions/un.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/noram.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ (–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç)": "https://iptv-org.github.io/iptv/regions/nam.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/neu.m3u  ",
    "–°—Ç—Ä–∞–Ω—ã –°–µ–≤–µ—Ä–Ω–æ–π –ï–≤—Ä–æ–ø—ã": "https://iptv-org.github.io/iptv/regions/nord.m3u  ",
    "–°–æ–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–∞–±—Å–∫–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –ü–µ—Ä—Å–∏–¥—Å–∫–æ–≥–æ –∑–∞–ª–∏–≤–∞": "https://iptv-org.github.io/iptv/regions/gcc.m3u  ",
    "–°–ù–ì": "https://iptv-org.github.io/iptv/regions/cis.m3u  ",
    "–Æ–∂–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/sas.m3u  ",
    "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/southam.m3u  ",
    "–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/saf.m3u  ",
    "–Æ–∂–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/ser.m3u  ",
    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/sea.m3u  "
  }
};
// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
closeModal.addEventListener('click', function() {
    playerModal.style.display = 'none';
    videoPlayerElement.pause();
    videoPlayerElement.src = '';
    if (currentWatchedChannel && watchStartTime) {
        const watchedSeconds = Math.floor((Date.now() - watchStartTime) / 1000);
        console.log(`üì∫ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${watchedSeconds} —Å–µ–∫—É–Ω–¥`);
        if (watchedSeconds >= 60) {
            addToWatched(
                currentWatchedChannel.name,
                currentWatchedChannel.url,
                currentWatchedChannel.group,
                currentWatchedChannel.logo
            );
            addToWatching(
                currentWatchedChannel.name,
                currentWatchedChannel.url,
                currentWatchedChannel.group,
                currentWatchedChannel.logo
            );
        }
        currentWatchedChannel = null;
        watchStartTime = null;
    }
});
// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    toastContainer.appendChild(toast);
    setTimeout(() => {
        toast.remove();
    }, 3000);
}
// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ localStorage
function addToWatched(name, url, group, logo) {
    let watched;
    try {
        const raw = localStorage.getItem('watchedChannels');
        watched = raw ? JSON.parse(raw) : [];
        if (!Array.isArray(watched)) {
            console.warn('‚ö†Ô∏è watchedChannels –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî —Å–±—Ä–æ—Å');
            watched = [];
        }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ watchedChannels:', e);
        watched = [];
    }
    if (watched.some(item => item.url === url)) {
        console.log(`‚ÑπÔ∏è –ö–∞–Ω–∞–ª "${name}" —É–∂–µ –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"`);
        return;
    }
    watched.push({ name, url, group, logo });
    try {
        localStorage.setItem('watchedChannels', JSON.stringify(watched));
        console.log(`‚úÖ –ö–∞–Ω–∞–ª "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"`);
    } catch (e) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
        showToast(translateText('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'));
        return;
    }
    if (currentMainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
        loadAndRenderChannels('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ', '');
    }
}
// üëá –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π "–°–º–æ—Ç—Ä—è—Ç" (Firebase)
async function addToWatching(name, url, group, logo) {
    try {
        const now = Date.now();
        const key = url.replace(/[^a-zA-Z0-9]/g, '_').substring(0, 100);
        const snapshot = await database.ref('watching/' + key).get();
        let data = snapshot.exists() ? snapshot.val() : {
            name,
            url,
            group,
            logo,
            views: 0,
            lastWatched: 0,
            createdAt: now
        };
        data.views = (data.views || 0) + 1;
        data.lastWatched = now;
        data.name = name;
        data.logo = logo;
        await database.ref('watching/' + key).set(data);
        console.log(`üåç –ì–ª–æ–±–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–°–º–æ—Ç—Ä—è—Ç": ${name}`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ Firebase addToWatching:", error);
    }
}
// üëá –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø–æ URL
async function loadPlaylistFromURL() {
    const urlInput = document.getElementById('playlistURL');
    const url = urlInput.value.trim();
    if (!url) {
        showToast(translateText('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É'));
        urlInput.focus();
        return;
    }
    initialLoader.style.display = 'flex';
    try {
        const content = await fetchM3U(url);
        const channels = parseM3UContent(content, translateText('–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç'));
        if (channels.length === 0) {
            throw new Error('–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
        }
        localStorage.setItem('customPlaylist', JSON.stringify(channels));
        showToast(translateText('–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!'));
        renderChannels(channels);
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
            navigationState = 'channels';
        }, 100);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ URL:', err);
        showToast(translateText('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç'));
    } finally {
        initialLoader.style.display = 'none';
    }
}
// üëá –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é –¥–ª—è "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç"
function renderCustomPlaylistSubmenu() {
    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'flex';
    const wrapper = document.createElement('div');
    wrapper.style.display = 'flex';
    wrapper.style.gap = '10px';
    wrapper.style.alignItems = 'center';
    wrapper.style.padding = '0 10px';
    const input = document.createElement('input');
    input.id = 'playlistURL';
    input.type = 'text';
    input.placeholder = 'https://example.com/playlist.m3u';
    input.style.padding = '8px 12px';
    input.style.borderRadius = '6px';
    input.style.border = '1px solid #444';
    input.style.background = '#222';
    input.style.color = 'white';
    input.style.fontSize = '13px';
    input.setAttribute('tabindex', '0');
    const button = document.createElement('button');
    button.textContent = translateText('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç');
    button.style.padding = '8px 16px';
    button.style.borderRadius = '6px';
    button.style.border = 'none';
    button.style.background = 'linear-gradient(90deg, #ff375f, #ff5e41)';
    button.style.color = 'white';
    button.style.cursor = 'pointer';
    button.style.fontSize = '13px';
    button.setAttribute('tabindex', '0');
    button.addEventListener('click', loadPlaylistFromURL);
    button.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.click();
        }
    });
    input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            loadPlaylistFromURL();
        }
    });
    wrapper.appendChild(input);
    wrapper.appendChild(button);
    subCategoriesPanel.appendChild(wrapper);
    setTimeout(() => {
        input.focus();
        navigationState = 'customInput';
    }, 100);
}
// üëá –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
function setLanguage(lang) {
    currentLanguage = lang;
    localStorage.setItem('appLanguage', lang);
    const flags = mainCategoriesPanel.querySelectorAll('.category-btn');
    flags.forEach(flag => {
        if (flag.textContent === 'üá∑üá∫') {
            flag.classList.toggle('active', lang === 'ru');
        } else if (flag.textContent === 'üá¨üáß') {
            flag.classList.toggle('active', lang === 'en');
        }
    });
    renderMainCategories();
    renderSubCategories();
    loadAndRenderChannels(currentMainCategory, currentSubcategory);
    showToast(translateText(lang === 'ru' ? "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π" : "Language changed to English"));
}
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π + —Ñ–ª–∞–≥–∏ —è–∑—ã–∫–∞
function renderMainCategories() {
    mainCategoriesPanel.innerHTML = '';
    const mainCategories = Object.keys(categoryTree);
    mainCategories.forEach((cat, index) => {
        const btn = document.createElement('button');
        btn.className = 'category-btn';
        btn.textContent = translateText(cat);
        if (cat === currentMainCategory) {
            btn.classList.add('active');
            currentMainCategoryIndex = index;
        }
        btn.addEventListener('click', () => selectMainCategory(cat, index));
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        mainCategoriesPanel.appendChild(btn);
    });
    const spacer = document.createElement('div');
    spacer.style.width = '20px';
    mainCategoriesPanel.appendChild(spacer);
    const ruFlag = document.createElement('button');
    ruFlag.className = 'category-btn';
    ruFlag.textContent = 'üá∑üá∫';
    ruFlag.style.minWidth = '40px';
    ruFlag.style.padding = '8px';
    if (currentLanguage === 'ru') ruFlag.classList.add('active');
    ruFlag.addEventListener('click', () => setLanguage('ru'));
    ruFlag.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setLanguage('ru');
        }
    });
    mainCategoriesPanel.appendChild(ruFlag);
    const enFlag = document.createElement('button');
    enFlag.className = 'category-btn';
    enFlag.textContent = 'üá¨üáß';
    enFlag.style.minWidth = '40px';
    enFlag.style.padding = '8px';
    if (currentLanguage === 'en') enFlag.classList.add('active');
    enFlag.addEventListener('click', () => setLanguage('en'));
    enFlag.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setLanguage('en');
        }
    });
    mainCategoriesPanel.appendChild(enFlag);
}
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ UI)
function renderSubCategories() {
    if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        renderCustomPlaylistSubmenu();
        return;
    }
    // üëá –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç"
    if (currentMainCategory === '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        renderGlobalPlaylistSearch();
        return;
    }
    // üëá –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª"
    if (currentMainCategory === '–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª') {
        // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, –∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ï—â–µ –æ–¥–∏–Ω!"
        subCategoriesPanel.innerHTML = '';
        subCategoriesPanel.style.display = 'flex';
        const btn = document.createElement('button');
        btn.className = 'subcategory-btn';
        btn.textContent = 'üé≤ ' + translateText("–ï—â–µ –æ–¥–∏–Ω!");
        btn.addEventListener('click', () => loadRandomChannel());
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        subCategoriesPanel.appendChild(btn);
        return;
    }
    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'none';
    if (!categoryTree[currentMainCategory]) return;
    const subcategories = Object.keys(categoryTree[currentMainCategory]);
    subcategories.forEach((subcat, index) => {
        const btn = document.createElement('button');
        btn.className = 'subcategory-btn';
        btn.textContent = translateText(subcat);
        if (subcat === currentSubcategory) {
            btn.classList.add('active');
            currentSubCategoryIndex = index;
        }
        btn.addEventListener('click', () => selectSubcategory(subcat, index));
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        subCategoriesPanel.appendChild(btn);
    });
    if (subcategories.length > 0) {
        subCategoriesPanel.style.display = 'flex';
    }
}
// üëá –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç"
function renderGlobalPlaylistSearch() {
    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'flex';
    const wrapper = document.createElement('div');
    wrapper.style.display = 'flex';
    wrapper.style.gap = '10px';
    wrapper.style.alignItems = 'center';
    wrapper.style.padding = '0 10px';
    wrapper.style.width = '100%';
    const input = document.createElement('input');
    input.id = 'globalSearchInput';
    input.type = 'text';
    input.placeholder = translateText('–ü–æ–∏—Å–∫ –ø–æ –∫–∞–Ω–∞–ª–∞–º...');
    input.style.padding = '8px 12px';
    input.style.borderRadius = '6px';
    input.style.border = '1px solid #444';
    input.style.background = '#222';
    input.style.color = 'white';
    input.style.fontSize = '13px';
    input.style.flex = '1';
    input.setAttribute('tabindex', '0');
    const button = document.createElement('button');
    button.textContent = 'üîç';
    button.title = translateText('–ü–æ–∏—Å–∫');
    button.style.padding = '8px 16px';
    button.style.borderRadius = '6px';
    button.style.border = 'none';
    button.style.background = 'linear-gradient(90deg, #ff375f, #ff5e41)';
    button.style.color = 'white';
    button.style.cursor = 'pointer';
    button.style.fontSize = '16px';
    button.setAttribute('tabindex', '0');
    // üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    button.addEventListener('click', performGlobalSearch);
    button.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.click();
        }
    });
    // üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            performGlobalSearch();
        }
    });
    wrapper.appendChild(input);
    wrapper.appendChild(button);
    subCategoriesPanel.appendChild(wrapper);
    setTimeout(() => {
        input.focus();
        navigationState = 'globalSearch';
    }, 100);
}
// üëá –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–ª–µ–π–ª–∏—Å—Ç—É
async function performGlobalSearch() {
    const input = document.getElementById('globalSearchInput');
    const searchTerm = input.value.trim().toLowerCase();
    initialLoader.style.display = 'flex';
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if (!loadedPlaylists[categoryTree['–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç']]) {
            await fetchAndCachePlaylist(categoryTree['–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç'], translateText('–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç'));
        }
        const allChannels = loadedPlaylists[categoryTree['–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç']] || [];
        if (searchTerm === '') {
            // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            renderChannels(allChannels);
        } else {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            const filteredChannels = allChannels.filter(channel => 
                channel.name.toLowerCase().includes(searchTerm)
            );
            renderChannels(filteredChannels);
            if (filteredChannels.length === 0) {
                channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")}</div>`;
            }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
        showToast(translateText("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞"));
        renderChannels([]);
    } finally {
        initialLoader.style.display = 'none';
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
            navigationState = 'channels';
        }, 100);
    }
}
// üëá –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
async function loadRandomChannel() {
    initialLoader.style.display = 'flex';
    channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ó–∞–≥—Ä—É–∑–∫–∞...")}</div>`;

    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –≤ –∫—ç—à–µ
        const globalPlaylistUrl = categoryTree['–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç'];
        if (!loadedPlaylists[globalPlaylistUrl]) {
            await fetchAndCachePlaylist(globalPlaylistUrl, translateText('–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç'));
        }

        const allChannels = loadedPlaylists[globalPlaylistUrl] || [];
        if (allChannels.length === 0) {
            throw new Error('–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç');
        }

        let attempts = 0;
        const maxAttempts = 10; // –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ –≥–æ–Ω—è—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        let selectedChannel = null;

        while (attempts < maxAttempts) {
            attempts++;
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            const randomIndex = Math.floor(Math.random() * allChannels.length);
            selectedChannel = allChannels[randomIndex];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —á–µ—Ä–Ω–æ–º –ª–∏ —Å–ø–∏—Å–∫–µ –∫–∞–Ω–∞–ª
            const blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
            if (blacklist.includes(selectedChannel.url)) {
                console.log(`–ö–∞–Ω–∞–ª "${selectedChannel.name}" –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            const isAvailable = await checkChannelAvailability(selectedChannel.url);
            if (isAvailable) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª: ${selectedChannel.name}`);
                break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω
            } else {
                console.log(`‚ùå –ö–∞–Ω–∞–ª "${selectedChannel.name}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π...`);
                selectedChannel = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–Ω–æ–≤–∞ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                addToBlacklist(selectedChannel.url);
            }
        }

        if (selectedChannel) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–¥–∏–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
            renderChannels([selectedChannel]);
            // –§–æ–∫—É—Å –Ω–∞ –Ω–µ–≥–æ
            setTimeout(() => {
                const firstChannel = document.querySelector('.channel-card');
                if (firstChannel) {
                    firstChannel.focus();
                    navigationState = 'channels';
                }
            }, 100);
        } else {
            // –ï—Å–ª–∏ –∑–∞ N –ø–æ–ø—ã—Ç–æ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
            channelsContainer.innerHTML = `
                <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                    <i class="fas fa-dice" style="font-size:48px; margin-bottom:20px;"></i><br>
                    ${translateText("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª")}<br>
                    ${translateText("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")}
                </div>`;
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:", error);
        showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"));
        channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")}</div>`;
    } finally {
        initialLoader.style.display = 'none';
    }
}

// üëá –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
function checkChannelAvailability(url) {
    return new Promise((resolve) => {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç video
        const video = document.createElement('video');
        video.muted = true;
        video.playsInline = true;

        let manifestLoaded = false;
        let errorOccurred = false;

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const timeoutId = setTimeout(() => {
            if (!manifestLoaded && !errorOccurred) {
                console.warn("–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:", url);
                cleanup();
                resolve(false);
            }
        }, 5000);

        function cleanup() {
            clearTimeout(timeoutId);
            if (hlsInstance) {
                hlsInstance.destroy();
            }
            video.remove();
        }

        let hlsInstance = null;

        if (Hls.isSupported()) {
            hlsInstance = new Hls();
            hlsInstance.loadSource(url);
            hlsInstance.attachMedia(video);

            hlsInstance.on(Hls.Events.MANIFEST_PARSED, () => {
                manifestLoaded = true;
                cleanup();
                resolve(true);
            });

            hlsInstance.on(Hls.Events.ERROR, (event, data) => {
                if (data.fatal) {
                    errorOccurred = true;
                    cleanup();
                    resolve(false);
                }
            });
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = url;

            video.addEventListener('loadedmetadata', () => {
                manifestLoaded = true;
                cleanup();
                resolve(true);
            });

            video.addEventListener('error', () => {
                errorOccurred = true;
                cleanup();
                resolve(false);
            });
        } else {
            // –§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            cleanup();
            resolve(false);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ DOM, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É
        document.body.appendChild(video);
        // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å, —á—Ç–æ–±—ã —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        video.play().catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É autoplay
    });
}

// –í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectMainCategory(categoryName, index) {
    // üëá –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π "–°–º–æ—Ç—Ä—è—Ç" –ø—Ä–∏ —É—Ö–æ–¥–µ –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    if (currentMainCategory === '–°–º–æ—Ç—Ä—è—Ç') {
        window.watchingBySubcategory = null;
    }
    if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && window.watchingNowInterval) {
        clearInterval(window.watchingNowInterval);
        window.watchingNowInterval = null;
        if (document.getElementById('reloadTimer')) {
            document.getElementById('reloadTimer').remove();
        }
    }
    currentMainCategory = categoryName;
    currentMainCategoryIndex = index;
    currentSubcategory = '';
    currentSubCategoryIndex = 0;
    renderSubCategories();
    if (categoryName === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        loadAndRenderChannels('–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç', '');
        navigationState = 'customInput';
    } else if (categoryName === '–°–º–æ—Ç—Ä—è—Ç' || categoryName === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
        loadAndRenderChannels(categoryName, '');
    } else if (!categoryTree[categoryName] || Object.keys(categoryTree[categoryName]).length === 0) {
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
    }
    setTimeout(() => {
        const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons[index]) buttons[index].focus();
    }, 100);
}
// üëá –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function selectSubcategory(subcategoryName, index) {
    if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && window.watchingNowInterval) {
        clearInterval(window.watchingNowInterval);
        window.watchingNowInterval = null;
        if (document.getElementById('reloadTimer')) {
            document.getElementById('reloadTimer').remove();
        }
    }
    currentSubcategory = subcategoryName;
    currentSubCategoryIndex = index;
    // üëá –ö–ª—é—á–µ–≤–∞—è –ª–æ–≥–∏–∫–∞: –¥–ª—è "–°–º–æ—Ç—Ä—è—Ç" –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (currentMainCategory === '–°–º–æ—Ç—Ä—è—Ç' && window.watchingBySubcategory) {
        const channelsToShow = window.watchingBySubcategory[subcategoryName] || [];
        renderChannels(channelsToShow);
    } else {
        // üëá –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
    }
    setTimeout(() => {
        const firstChannel = document.querySelector('.channel-card');
        if (firstChannel) firstChannel.focus();
        navigationState = 'channels';
    }, 100);
}
// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
function updateMainCategoryActive() {
    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
    buttons.forEach((btn, i) => {
        if (i === currentMainCategoryIndex) btn.classList.add('active');
        else btn.classList.remove('active');
    });
}
// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–æ–¥–º–µ–Ω—é
function updateSubCategoryActive() {
    const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
    buttons.forEach((btn, i) => {
        if (i === currentSubCategoryIndex) btn.classList.add('active');
        else btn.classList.remove('active');
    });
}
// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
async function loadAndRenderChannels(mainCategory, subcategory) {
    // üëá –§–∏–∫—Å: –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å" –ø—Ä–∏ —É—Ö–æ–¥–µ
    if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && mainCategory !== '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && window.watchingNowInterval) {
        clearInterval(window.watchingNowInterval);
        window.watchingNowInterval = null;
        if (document.getElementById('reloadTimer')) {
            document.getElementById('reloadTimer').remove();
        }
    }
    if (mainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
        initialLoader.style.display = 'none';
        let watched;
        try {
            const raw = localStorage.getItem('watchedChannels');
            watched = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(watched)) {
                watched = [];
                localStorage.setItem('watchedChannels', '[]');
            }
        } catch (e) {
            watched = [];
            localStorage.setItem('watchedChannels', '[]');
        }
        renderChannels(watched);
        return;
    }
    // üëá –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å
    if (mainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
        initialLoader.style.display = 'none';
        channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ó–∞–≥—Ä—É–∑–∫–∞...")}</div>`;
        const loadWatchingNow = async () => {
            try {
                const snapshot = await database.ref('watching').get();
                let watchingNow = [];
                if (snapshot.exists()) {
                    const now = Date.now();
                    watchingNow = Object.values(snapshot.val()).filter(channel => {
                        return (now - channel.lastWatched) < 600000; // 10 –º–∏–Ω—É—Ç
                    });
                    watchingNow.sort((a, b) => b.lastWatched - a.lastWatched);
                }
                renderChannels(watchingNow);
                if (watchingNow.length === 0) {
                    channelsContainer.innerHTML = `
                        <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                            <i class="fas fa-bolt" style="font-size:48px; margin-bottom:20px;"></i><br>
                            ${translateText("–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...")}<br>
                            ${translateText("–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!")}
                        </div>`;
                }
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å':", error);
                channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")}</div>`;
            }
        };
        await loadWatchingNow();
        if (window.watchingNowInterval) {
            clearInterval(window.watchingNowInterval);
        }
        window.watchingNowInterval = setInterval(loadWatchingNow, 10000);
        return;
    }
    // üëá –°–º–æ—Ç—Ä—è—Ç
    if (mainCategory === '–°–º–æ—Ç—Ä—è—Ç') {
        initialLoader.style.display = 'flex';
        channelsContainer.innerHTML = '';
        try {
            const snapshot = await database.ref('watching').get();
            let watching = [];
            if (snapshot.exists()) {
                watching = Object.values(snapshot.val()).filter(channel => {
                    return (Date.now() - channel.lastWatched) < 24 * 60 * 60 * 1000;
                });
                watching.sort((a, b) => b.views - a.views);
            }
            // üëá –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—è `group`
            const subcategoryMap = {};
            watching.forEach(channel => {
                const group = channel.group || translateText('–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
                if (!subcategoryMap[group]) {
                    subcategoryMap[group] = [];
                }
                subcategoryMap[group].push(channel);
            });
            // üëá –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            window.watchingBySubcategory = subcategoryMap;
            // üëá –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –µ–µ –∫–∞–Ω–∞–ª—ã
            if (currentSubcategory) {
                renderChannels(subcategoryMap[currentSubcategory] || []);
            } else {
                // üëá –ò–Ω–∞—á–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
                renderChannels(watching);
            }
            // üëá –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            const sortedSubcategories = Object.keys(subcategoryMap).sort((a, b) => {
                return a.localeCompare(b, currentLanguage === 'ru' ? 'ru-RU' : 'en-US');
            });
            subCategoriesPanel.innerHTML = '';
            subCategoriesPanel.style.display = 'none';
            sortedSubcategories.forEach((subcat, idx) => {
                const btn = document.createElement('button');
                btn.className = 'subcategory-btn';
                btn.textContent = `${translateText(subcat)} (${subcategoryMap[subcat].length})`;
                if (subcat === currentSubcategory) {
                    btn.classList.add('active');
                    currentSubCategoryIndex = idx;
                }
                btn.addEventListener('click', () => selectSubcategory(subcat, idx));
                btn.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        this.click();
                    }
                });
                subCategoriesPanel.appendChild(btn);
            });
            if (sortedSubcategories.length > 0) {
                subCategoriesPanel.style.display = 'flex';
            }
            // üëá –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            if (watching.length === 0) {
                channelsContainer.innerHTML = `
                    <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                        <i class="fas fa-users" style="font-size:48px; margin-bottom:20px;"></i><br>
                        ${translateText("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...")}<br>
                        ${translateText("–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!")}
                    </div>`;
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Firebase:", error);
            showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"));
            channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")}</div>`;
        } finally {
            initialLoader.style.display = 'none';
            setTimeout(() => {
                const firstChannel = document.querySelector('.channel-card');
                if (firstChannel) firstChannel.focus();
            }, 100);
        }
        return;
    }
    // üëá –°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
    if (mainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        initialLoader.style.display = 'none';
        let customPlaylist;
        try {
            const raw = localStorage.getItem('customPlaylist');
            customPlaylist = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(customPlaylist)) {
                customPlaylist = [];
                localStorage.removeItem('customPlaylist');
            }
        } catch (e) {
            customPlaylist = [];
            localStorage.removeItem('customPlaylist');
        }
        renderChannels(customPlaylist);
        if (customPlaylist.length === 0) {
            channelsContainer.innerHTML = `
                <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                    <i class="fas fa-list" style="font-size:48px; margin-bottom:20px;"></i><br>
                    ${translateText("–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")}<br>
                    ${translateText("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª")}
                </div>`;
        }
        return;
    }
    // üëá –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
    if (mainCategory === '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        initialLoader.style.display = 'flex';
        try {
            const url = categoryTree['–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç'];
            console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑:", url); // üëà –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì
            let channels = loadedPlaylists[url] || await fetchAndCachePlaylist(url, translateText('–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç'));
            console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:", channels.length); // üëà –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì
            renderChannels(channels);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", error);
            showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"));
            renderChannels([]);
        } finally {
            initialLoader.style.display = 'none';
            setTimeout(() => {
                const firstChannel = document.querySelector('.channel-card');
                if (firstChannel) firstChannel.focus();
            }, 100);
        }
        return;
    }
    // üëá –°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª
    if (mainCategory === '–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª') {
        loadRandomChannel();
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã (–æ–Ω–∏ —É–∂–µ —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –≤ renderSubCategories)
        return;
    }
    // üëá –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!categoryTree[mainCategory] || !categoryTree[mainCategory][subcategory]) {
        renderChannels([]);
        return;
    }
    const url = categoryTree[mainCategory][subcategory];
    initialLoader.style.display = 'flex';
    try {
        let channels = loadedPlaylists[url] || await fetchAndCachePlaylist(url, subcategory);
        renderChannels(channels);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"));
        renderChannels([]);
    } finally {
        initialLoader.style.display = 'none';
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
        }, 100);
    }
}
// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
async function fetchAndCachePlaylist(url, group) {
    const content = await fetchM3U(url);
    const channels = parseM3UContent(content, group);
    loadedPlaylists[url] = channels;
    return channels;
}
// –ó–∞–≥—Ä—É–∑–∫–∞ M3U
async function fetchM3U(url) {
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    return await response.text();
}
// –ü–∞—Ä—Å–∏–Ω–≥ M3U
function parseM3UContent(content, assignedCategory) {
    const channels = [];
    const lines = content.split('
'); // üëà –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ ' ' –≤–º–µ—Å—Ç–æ '
'
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('#EXTINF:')) {
            const infoLine = lines[i];
            const urlLine = lines[i + 1];
            if (urlLine && !urlLine.startsWith('#')) {
                let name = infoLine.split(',')[1] || '–ö–∞–Ω–∞–ª';
                name = name.trim();
                const logoMatch = infoLine.match(/tvg-logo="([^"]*)"/);
                const logo = logoMatch ? logoMatch[1] : '';
                channels.push({ name, url: urlLine.trim(), group: assignedCategory, logo });
            }
        }
    }
    return filterBlacklistedChannels(channels);
}
// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
function filterBlacklistedChannels(channelsList) {
    const blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    return channelsList.filter(channel => !blacklist.includes(channel.url));
}
// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
function renderChannels(channelsToRender) {
    channelsContainer.innerHTML = '';
    if (channelsToRender.length === 0 && initialLoader.style.display === 'none') {
        channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")}</div>`;
        return;
    }
    channelsToRender.forEach((channel, index) => {
        const groupIcon = getGroupIcon(channel.group);
        const channelCard = document.createElement('div');
        channelCard.className = 'channel-card';
        channelCard.setAttribute('tabindex', '0');
        channelCard.dataset.index = index;
        const mediaContainer = document.createElement('div');
        mediaContainer.className = 'channel-media';
        if (channel.logo) {
            const img = document.createElement('img');
            img.src = channel.logo;
            img.alt = channel.name;
            img.onerror = () => { img.style.display = 'none'; };
            mediaContainer.appendChild(img);
        }
        const icon = document.createElement('i');
        icon.className = `fas ${groupIcon}`;
        mediaContainer.appendChild(icon);
        const miniPlayer = createMiniPlayer(channel.url);
        mediaContainer.appendChild(miniPlayer);
        let viewsText = '';
        if (channel.views) {
            viewsText = ` üë• ${channel.views}`;
        }
        if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && channel.lastWatched) {
            const now = Date.now();
            if (now - channel.lastWatched < 600000) {
                viewsText += ` ‚ö°`;
            }
        }
        const infoContainer = document.createElement('div');
        infoContainer.className = 'channel-info';
        infoContainer.innerHTML = `<h3>${channel.name}${viewsText}</h3><p>${channel.group}</p>`;
        channelCard.appendChild(mediaContainer);
        channelCard.appendChild(infoContainer);
        channelCard.addEventListener('focus', function() {
            if (window.watchingNowInterval && currentMainCategory !== '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
                clearInterval(window.watchingNowInterval);
                window.watchingNowInterval = null;
                if (document.getElementById('reloadTimer')) {
                    document.getElementById('reloadTimer').remove();
                }
            }
            currentChannelIndex = parseInt(this.dataset.index);
            if (focusTimer) clearTimeout(focusTimer);
            if (currentMiniPlayer && currentMiniPlayer !== miniPlayer) {
                currentMiniPlayer.style.display = 'none';
                const prevIcon = currentMiniPlayer.parentElement.querySelector('i');
                if (prevIcon) prevIcon.style.display = 'block';
                const prevVideo = currentMiniPlayer.querySelector('video');
                if (prevVideo) prevVideo.pause();
            }
            miniPlayer.style.display = 'block';
            icon.style.display = 'none';
            currentMiniPlayer = miniPlayer;
            focusTimer = setTimeout(() => {
                const video = miniPlayer.querySelector('video');
                if (!video.dataset.initialized) {
                    initializeMiniPlayer(video, channel.url, miniPlayer, icon);
                } else if (video.paused) {
                    video.play().catch(e => console.log("Autoplay:", e));
                }
            }, 3000);
        });
        channelCard.addEventListener('blur', function() {
            if (focusTimer) clearTimeout(focusTimer);
            setTimeout(() => {
                if (!channelCard.contains(document.activeElement)) {
                    miniPlayer.style.display = 'none';
                    icon.style.display = 'block';
                    const video = miniPlayer.querySelector('video');
                    if (video) video.pause();
                }
            }, 100);
        });
        channelCard.addEventListener('click', () => openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo));
        channelCard.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
            }
        });
        channelsContainer.appendChild(channelCard);
    });
}
// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function createMiniPlayer(url) {
    if (miniPlayers.has(url)) return miniPlayers.get(url);
    const container = document.createElement('div');
    container.className = 'mini-player';
    container.dataset.url = url;
    const video = document.createElement('video');
    video.muted = true;
    video.playsInline = true;
    video.loop = true;
    video.style.width = '100%';
    video.style.height = '100%';
    video.style.background = '#000';
    container.appendChild(video);
    miniPlayers.set(url, container);
    return container;
}
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function initializeMiniPlayer(video, url, miniPlayer, icon) {
    video.dataset.initialized = 'true';
    let manifestLoaded = false;
    let networkErrorOccurred = false;
    const timeoutId = setTimeout(() => {
        if (!manifestLoaded && !networkErrorOccurred) {
            console.warn("–¢–∞–π–º–∞—É—Ç:", url);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        }
    }, 30000);
    if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(video);
        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(e => console.log("Autoplay:", e));
        });
        hls.on(Hls.Events.ERROR, (event, data) => {
            if (data.fatal && data.type === Hls.ErrorTypes.NETWORK_ERROR) {
                networkErrorOccurred = true;
                clearTimeout(timeoutId);
                handleStreamError(url, miniPlayer);
                addToBlacklist(url);
                miniPlayer.style.display = 'none';
                icon.style.display = 'block';
            }
        });
    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = url;
        video.addEventListener('loadedmetadata', () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(e => console.log("Autoplay:", e));
        });
        video.addEventListener('error', () => {
            clearTimeout(timeoutId);
            handleStreamError(url, miniPlayer);
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        });
    }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ—Ç–æ–∫–∞
function handleStreamError(url, container) {
    showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
    console.error("–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞:", url);
    const icon = container.parentElement.querySelector('i');
    if (icon) icon.style.display = 'block';
    container.style.display = 'none';
}
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
function addToBlacklist(url) {
    let blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    if (!blacklist.includes(url)) {
        blacklist.push(url);
        localStorage.setItem('blacklist', JSON.stringify(blacklist));
    }
}
// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞
function openFullScreenPlayer(name, url, group, logo) {
    currentWatchedChannel = { name, url, group, logo };
    watchStartTime = Date.now();
    playerModal.style.display = 'flex';
    videoPlayerElement.src = '';
    videoPlayerElement.load();
    videoPlayerElement.muted = false;
    let manifestLoaded = false;
    const timeoutId = setTimeout(() => {
        if (!manifestLoaded) {
            console.warn("–¢–∞–π–º–∞—É—Ç –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω:", url);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
            addToBlacklist(url);
            playerModal.style.display = 'none';
        }
    }, 30000);
    if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(videoPlayerElement);
        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(e => {
                console.log("Autoplay blocked:", e);
                showToast(translateText("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"));
            });
            setTimeout(() => requestNativeFullscreen(), 1000);
        });
        hls.on(Hls.Events.ERROR, (event, data) => {
            if (data.fatal) {
                clearTimeout(timeoutId);
                showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
                addToBlacklist(url);
                playerModal.style.display = 'none';
            }
        });
    } else if (videoPlayerElement.canPlayType('application/vnd.apple.mpegurl')) {
        videoPlayerElement.src = url;
        videoPlayerElement.addEventListener('loadedmetadata', () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(e => {
                console.log("Autoplay blocked:", e);
                showToast(translateText("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"));
            });
            setTimeout(() => requestNativeFullscreen(), 1000);
        });
        videoPlayerElement.addEventListener('error', () => {
            clearTimeout(timeoutId);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
            addToBlacklist(url);
            playerModal.style.display = 'none';
        });
    } else {
        clearTimeout(timeoutId);
        showToast(translateText('–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
        playerModal.style.display = 'none';
    }
}
// Fullscreen API
function requestNativeFullscreen() {
    const elem = videoPlayerElement;
    if (elem.requestFullscreen) {
        elem.requestFullscreen().catch(err => console.log("Fullscreen:", err));
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen().catch(err => console.log("Fullscreen:", err));
    }
}
// –ò–∫–æ–Ω–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
function getGroupIcon(group) {
    group = group.toLowerCase();
    if (group.includes('–Ω–æ–≤–æ—Å—Ç–∏')) return 'fa-newspaper';
    if (group.includes('—Å–ø–æ—Ä—Ç')) return 'fa-futbol';
    if (group.includes('–∫–∏–Ω–æ')) return 'fa-film';
    if (group.includes('–º—É–∑—ã–∫–∞')) return 'fa-music';
    if (group.includes('–¥–µ—Ç—Å–∫')) return 'fa-child';
    if (group.includes('–¥–æ–∫—É–º–µ–Ω—Ç')) return 'fa-video';
    if (group.includes('—Ä–∞–∑–≤–ª–µ—á')) return 'fa-theater-masks';
    return 'fa-tv';
}
// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
function moveFocus(direction) {
    if (navigationState === 'channels') {
        const cards = document.querySelectorAll('.channel-card');
        if (cards.length === 0) return;
        const currentIndex = Array.from(cards).indexOf(document.activeElement);
        const cols = Math.floor(channelsContainer.offsetWidth / 280) || 1;
        let nextIndex = currentIndex;
        switch(direction) {
            case 'right': nextIndex = (currentIndex + 1) % cards.length; break;
            case 'left': nextIndex = (currentIndex - 1 + cards.length) % cards.length; break;
            case 'down': nextIndex = (currentIndex + cols) % cards.length; break;
            case 'up': {
                nextIndex = (currentIndex - cols + cards.length) % cards.length;
                if (nextIndex >= currentIndex) {
                    if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                        const input = document.getElementById('playlistURL');
                        if (input) {
                            input.focus();
                            navigationState = 'customInput';
                            return;
                        }
                    } else if (currentMainCategory === '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                        const input = document.getElementById('globalSearchInput');
                        if (input) {
                            input.focus();
                            navigationState = 'globalSearch';
                            return;
                        }
                    } else {
                        navigationState = 'subCategories';
                        subCategoriesPanel.style.display = 'flex';
                        setTimeout(() => {
                            const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                            if (buttons.length > 0) {
                                buttons[0].focus();
                                currentSubCategoryIndex = 0;
                            }
                        }, 100);
                        return;
                    }
                }
                break;
            }
        }
        if (nextIndex >= 0 && nextIndex < cards.length) {
            cards[nextIndex].focus();
        }
    } 
    else if (navigationState === 'mainCategories') {
        const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons.length === 0) return;
        let nextIndex = direction === 'right'
            ? (currentMainCategoryIndex + 1) % buttons.length
            : (currentMainCategoryIndex - 1 + buttons.length) % buttons.length;
        currentMainCategoryIndex = nextIndex;
        currentMainCategory = buttons[nextIndex].textContent;
        updateMainCategoryActive();
        buttons[nextIndex].focus();
    } 
    else if (navigationState === 'subCategories') {
        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
        if (buttons.length === 0) return;
        let nextIndex = direction === 'right'
            ? (currentSubCategoryIndex + 1) % buttons.length
            : (currentSubCategoryIndex - 1 + buttons.length) % buttons.length;
        currentSubCategoryIndex = nextIndex;
        currentSubcategory = buttons[nextIndex].textContent;
        updateSubCategoryActive();
        buttons[nextIndex].focus();
    }
    else if (navigationState === 'customInput') {
        const input = document.getElementById('playlistURL');
        const button = subCategoriesPanel.querySelector('button');
        if (!input || !button) return;
        if (direction === 'right') {
            button.focus();
        } else if (direction === 'left') {
            input.focus();
        } else if (direction === 'down') {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) {
                firstChannel.focus();
                navigationState = 'channels';
            }
        } else if (direction === 'up') {
            navigationState = 'mainCategories';
            mainCategoriesPanel.style.display = 'flex';
            setTimeout(() => {
                const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                if (buttons[currentMainCategoryIndex]) {
                    buttons[currentMainCategoryIndex].focus();
                }
            }, 100);
        }
    }
    else if (navigationState === 'globalSearch') {
        const input = document.getElementById('globalSearchInput');
        const button = subCategoriesPanel.querySelector('button[title="' + translateText('–ü–æ–∏—Å–∫') + '"]');
        if (!input || !button) return;
        if (direction === 'right') {
            button.focus();
        } else if (direction === 'left') {
            input.focus();
        } else if (direction === 'down') {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) {
                firstChannel.focus();
                navigationState = 'channels';
            }
        } else if (direction === 'up') {
            navigationState = 'mainCategories';
            mainCategoriesPanel.style.display = 'flex';
            setTimeout(() => {
                const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                if (buttons[currentMainCategoryIndex]) {
                    buttons[currentMainCategoryIndex].focus();
                }
            }, 100);
        }
    }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
document.addEventListener('keydown', function(e) {
    if (playerModal.style.display === 'flex') {
        if (e.key === 'Escape') closeModal.click();
        return;
    }
    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', 'Escape'].includes(e.key)) {
        e.preventDefault();
    }
    switch(e.key) {
        case 'ArrowLeft':
        case 'ArrowRight':
            moveFocus(e.key === 'ArrowRight' ? 'right' : 'left');
            break;
        case 'ArrowUp':
            if (navigationState === 'channels') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else if (currentMainCategory === '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('globalSearchInput');
                    if (input) {
                        input.focus();
                        navigationState = 'globalSearch';
                    }
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories' || navigationState === 'customInput' || navigationState === 'globalSearch') {
                navigationState = 'mainCategories';
                mainCategoriesPanel.style.display = 'flex';
                setTimeout(() => {
                    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                    if (buttons[currentMainCategoryIndex]) {
                        buttons[currentMainCategoryIndex].focus();
                    }
                }, 100);
            }
            break;
        case 'ArrowDown':
            if (navigationState === 'mainCategories') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else if (currentMainCategory === '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('globalSearchInput');
                    if (input) {
                        input.focus();
                        navigationState = 'globalSearch';
                    }
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories' || navigationState === 'customInput' || navigationState === 'globalSearch') {
                navigationState = 'channels';
                setTimeout(() => {
                    const firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                }, 100);
            }
            break;
        case 'Enter':
            if (navigationState === 'mainCategories') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else if (currentMainCategory === '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('globalSearchInput');
                    if (input) {
                        input.focus();
                        navigationState = 'globalSearch';
                    }
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                            currentSubcategory = buttons[0].textContent;
                            updateSubCategoryActive();
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories') {
                const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                if (buttons[currentSubCategoryIndex]) {
                    selectSubcategory(buttons[currentSubCategoryIndex].textContent, currentSubCategoryIndex);
                }
            } else if (navigationState === 'customInput') {
                const active = document.activeElement;
                if (active.id === 'playlistURL') {
                    loadPlaylistFromURL();
                } else if (active.tagName === 'BUTTON') {
                    active.click();
                }
            } else if (navigationState === 'globalSearch') {
                const active = document.activeElement;
                if (active.id === 'globalSearchInput') {
                    performGlobalSearch();
                } else if (active.tagName === 'BUTTON' && active.title === translateText('–ü–æ–∏—Å–∫')) {
                    performGlobalSearch();
                }
            } else if (navigationState === 'channels' && document.activeElement.classList.contains('channel-card')) {
                const card = document.activeElement;
                const index = parseInt(card.dataset.index);
                let list;
                if (currentMainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
                    list = JSON.parse(localStorage.getItem('watchedChannels') || '[]');
                } else if (currentMainCategory === '–°–º–æ—Ç—Ä—è—Ç' || currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
                    const cards = document.querySelectorAll('.channel-card');
                    if (index >= 0 && index < cards.length) {
                        const channel = {
                            name: cards[index].querySelector('h3').textContent.replace(/ üë• \d+.*$/, ''),
                            url: cards[index].dataset.url || '',
                            group: cards[index].querySelector('p').textContent,
                            logo: ''
                        };
                        openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
                        return;
                    }
                } else if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    list = JSON.parse(localStorage.getItem('customPlaylist') || '[]');
                } else {
                    list = loadedPlaylists[categoryTree[currentMainCategory][currentSubcategory]] || [];
                }
                if (index >= 0 && index < list.length) {
                    const channel = list[index];
                    openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
                }
            }
            break;
        case 'Escape':
            if (navigationState === 'subCategories' || navigationState === 'customInput' || navigationState === 'globalSearch') {
                navigationState = 'mainCategories';
                setTimeout(() => {
                    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                    if (buttons[currentMainCategoryIndex]) {
                        buttons[currentMainCategoryIndex].focus();
                    }
                }, 100);
            } else if (navigationState === 'mainCategories') {
                navigationState = 'channels';
                setTimeout(() => {
                    const firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                }, 100);
            }
            break;
    }
});
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    currentLanguage = localStorage.getItem('appLanguage') || 'ru';
    const safetyTimeout = setTimeout(() => {
        initialLoader.style.display = 'none';
        showToast(translateText("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"));
    }, 10000);
    try {
        currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
        renderMainCategories();
        renderSubCategories();
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
        // üëá –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ Firebase —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
        const lastCleanup = localStorage.getItem('lastFirebaseCleanup');
        const now = Date.now();
        if (!lastCleanup || now - parseInt(lastCleanup) > 24 * 60 * 60 * 1000) {
            database.ref('watching').once('value', async (snapshot) => {
                if (snapshot.exists()) {
                    const updates = {};
                    const data = snapshot.val();
                    let deleted = 0;
                    for (let key in data) {
                        if (now - data[key].lastWatched > 24 * 60 * 60 * 1000) {
                            updates[key] = null;
                            deleted++;
                        }
                    }
                    if (Object.keys(updates).length > 0) {
                        await database.ref('watching').update(updates);
                        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleted} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ "–°–º–æ—Ç—Ä—è—Ç"`);
                    }
                }
            });
            localStorage.setItem('lastFirebaseCleanup', now.toString());
        }
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
        }, 500);
        clearTimeout(safetyTimeout);
    } catch (error) {
        clearTimeout(safetyTimeout);
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        initialLoader.style.display = 'none';
        showToast(translateText("–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"));
    }
}
// üëá –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
window.addEventListener('beforeunload', () => {
    if (window.watchingNowInterval) clearInterval(window.watchingNowInterval);
    if (window.watchingNowTimerInterval) clearInterval(window.watchingNowTimerInterval);
});
// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initApp();
});
// ============= MOUSE WHEEL SCROLL FOR HORIZONTAL MENUS =============
function initMouseWheelScroll() {
    const scrollContainers = [
        document.getElementById('mainCategoriesPanel'),
        document.getElementById('subCategoriesPanel')
    ];
    scrollContainers.forEach(container => {
        if (!container) return;
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª, –≤–∫–ª—é—á–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —á–µ—Ä–µ–∑ –∫–æ–ª–µ—Å–æ
        container.addEventListener('wheel', function(e) {
            if (e.deltaY === 0) return; // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∫—Ä–æ–ª–ª
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            const scrollAmount = e.deltaY; // –ß–µ–º —Å–∏–ª—å–Ω–µ–µ –∂–º—ë—à—å ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ
            this.scrollLeft += scrollAmount;
        }, { passive: false }); // passive: false –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª preventDefault
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–∏–º –∫–ª–∞—Å—Å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ —Å–∫—Ä–æ–ª–ª–∏—Ç—å
        container.addEventListener('mouseenter', () => {
            container.style.cursor = 'grab';
        });
        container.addEventListener('mousedown', () => {
            container.style.cursor = 'grabbing';
        });
        container.addEventListener('mouseup', () => {
            container.style.cursor = 'grab';
        });
        container.addEventListener('mouseleave', () => {
            container.style.cursor = 'default';
        });
    });
}
// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initMouseWheelScroll();
});
