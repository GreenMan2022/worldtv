// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
var channelsContainer = document.getElementById('channelsContainer');
var mainCategoriesPanel = document.getElementById('mainCategoriesPanel');
var subCategoriesPanel = document.getElementById('subCategoriesPanel');
var playerModal = document.getElementById('playerModal');
var videoPlayerElement = document.getElementById('videoPlayerElement');
var closeModal = document.getElementById('closeModal');
var initialLoader = document.getElementById('initialLoader');
var toastContainer = document.getElementById('toastContainer');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
var currentSubcategory = '';
var currentMainCategoryIndex = 0;
var currentSubCategoryIndex = 0;
var currentChannelIndex = 0;
var currentMiniPlayer = null;
var miniPlayers = new Map();
var focusTimer = null;
var loadedPlaylists = {};
var navigationState = 'channels';

// –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
var currentWatchedChannel = null;
var watchStartTime = null;

// üëá –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
var currentLanguage = 'ru'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –¢–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
var translations = {
    ru: {
        categories: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        countries: "–°—Ç—Ä–∞–Ω—ã",
        languages: "–Ø–∑—ã–∫–∏",
        watched: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ",
        news: "–ù–æ–≤–æ—Å—Ç–∏",
        sports: "–°–ø–æ—Ä—Ç",
        football: "–§—É—Ç–±–æ–ª",
        basketball: "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
        tennis: "–¢–µ–Ω–Ω–∏—Å",
        movies: "–ö–∏–Ω–æ",
        action: "–ë–æ–µ–≤–∏–∫–∏",
        comedy: "–ö–æ–º–µ–¥–∏–∏",
        drama: "–î—Ä–∞–º—ã",
        entertainment: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        documentary: "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ",
        kids: "–î–µ—Ç—Å–∫–∏–µ",
        music: "–ú—É–∑—ã–∫–∞",
        pop: "–ü–æ–ø",
        rock: "–†–æ–∫",
        hiphop: "–•–∏–ø-—Ö–æ–ø",
        russia: "–†–æ—Å—Å–∏—è",
        usa: "–°–®–ê",
        uk: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
        germany: "–ì–µ—Ä–º–∞–Ω–∏—è",
        france: "–§—Ä–∞–Ω—Ü–∏—è",
        italy: "–ò—Ç–∞–ª–∏—è",
        spain: "–ò—Å–ø–∞–Ω–∏—è",
        china: "–ö–∏—Ç–∞–π",
        japan: "–Ø–ø–æ–Ω–∏—è",
        korea: "–ö–æ—Ä–µ—è",
        india: "–ò–Ω–¥–∏—è",
        brazil: "–ë—Ä–∞–∑–∏–ª–∏—è",
        canada: "–ö–∞–Ω–∞–¥–∞",
        australia: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è",
        russian: "–†—É—Å—Å–∫–∏–π",
        english: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        spanish: "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
        french: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
        german: "–ù–µ–º–µ—Ü–∫–∏–π",
        italian: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
        portuguese: "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
        chinese: "–ö–∏—Ç–∞–π—Å–∫–∏–π",
        japanese: "–Ø–ø–æ–Ω—Å–∫–∏–π",
        korean: "–ö–æ—Ä–µ–π—Å–∫–∏–π",
        arabic: "–ê—Ä–∞–±—Å–∫–∏–π",
        turkish: "–¢—É—Ä–µ—Ü–∫–∏–π",
        hindi: "–•–∏–Ω–¥–∏",
        loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
        errorInit: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        errorApp: "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        errorLoad: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤",
        channelNotFound: "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        channelUnavailable: "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        formatNotSupported: "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        clickToPlay: "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        addToWatchedSuccess: function(name) { return '‚úÖ –ö–∞–Ω–∞–ª "' + name + '" –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"'; },
        alreadyInWatched: function(name) { return '‚ÑπÔ∏è –ö–∞–Ω–∞–ª "' + name + '" —É–∂–µ –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"'; },
        lastPlaylistLoaded: function(main, sub) { return 'üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç: ' + main + ' ‚Üí ' + sub; },
        defaultPlaylist: 'üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"',
        playlistSaved: function(main, sub) { return 'üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –ø–ª–µ–π–ª–∏—Å—Ç: ' + main + ' ‚Üí ' + sub; },
        saveError: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç:',
        parseError: '‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ watchedChannels:',
        resetPlaylist: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–±—Ä–æ—à–µ–Ω',
        scrollRestored: '–ü–æ–∑–∏—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
        determiningLocation: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...'
    },
    en: {
        categories: "Categories",
        countries: "Countries",
        languages: "Languages",
        watched: "Watched",
        news: "News",
        sports: "Sports",
        football: "Football",
        basketball: "Basketball",
        tennis: "Tennis",
        movies: "Movies",
        action: "Action",
        comedy: "Comedy",
        drama: "Drama",
        entertainment: "Entertainment",
        documentary: "Documentary",
        kids: "Kids",
        music: "Music",
        pop: "Pop",
        rock: "Rock",
        hiphop: "Hip-Hop",
        russia: "Russia",
        usa: "USA",
        uk: "United Kingdom",
        germany: "Germany",
        france: "France",
        italy: "Italy",
        spain: "Spain",
        china: "China",
        japan: "Japan",
        korea: "Korea",
        india: "India",
        brazil: "Brazil",
        canada: "Canada",
        australia: "Australia",
        russian: "Russian",
        english: "English",
        spanish: "Spanish",
        french: "French",
        german: "German",
        italian: "Italian",
        portuguese: "Portuguese",
        chinese: "Chinese",
        japanese: "Japanese",
        korean: "Korean",
        arabic: "Arabic",
        turkish: "Turkish",
        hindi: "Hindi",
        loading: "Loading...",
        errorInit: "Initialization error",
        errorApp: "Application error",
        errorLoad: "Failed to load channels",
        channelNotFound: "Channels not found",
        channelUnavailable: "Channel unavailable",
        formatNotSupported: "Format not supported",
        clickToPlay: "Click video to play",
        addToWatchedSuccess: function(name) { return '‚úÖ Channel "' + name + '" added to "Watched"'; },
        alreadyInWatched: function(name) { return '‚ÑπÔ∏è Channel "' + name + '" already in "Watched"'; },
        lastPlaylistLoaded: function(main, sub) { return 'üìÇ Loaded last playlist: ' + main + ' ‚Üí ' + sub; },
        defaultPlaylist: 'üìÇ Using default playlist: "Watched"',
        playlistSaved: function(main, sub) { return 'üíæ Playlist saved: ' + main + ' ‚Üí ' + sub; },
        saveError: '‚ùå Failed to save last playlist:',
        parseError: '‚ùå Error parsing watchedChannels:',
        resetPlaylist: 'Last playlist reset',
        scrollRestored: 'Scroll position restored',
        determiningLocation: 'Detecting your location...'
    }
};

// üëá –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –ë–ï–ó spread-–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (ES5-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è)
function t(key) {
    var dict = translations[currentLanguage] || translations['en'];
    var str = dict[key];

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ –∫–ª—é—á
    if (str === undefined) {
        console.warn('‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ "' + key + '" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ ' + currentLanguage);
        str = translations['en'] && translations['en'][key] ? translations['en'][key] : key;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –≤—ã–∑—ã–≤–∞–µ–º —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    if (typeof str === 'function') {
        var args = [];
        for (var i = 1; i < arguments.length; i++) {
            args.push(arguments[i]);
        }
        return str.apply(null, args);
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return str;
}

// üëá –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ IP ‚Äî —Å —Ç–∞–π–º–∞—É—Ç–æ–º 3 —Å–µ–∫ –∏ fallback
function detectLanguageByIP() {
    return new Promise(function(resolve, reject) {
        var timeoutId = setTimeout(function() {
            console.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π');
            currentLanguage = 'en';
            try {
                localStorage.setItem('userLanguage', currentLanguage);
            } catch (e) {}
            resolve();
        }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã

        // –ï—Å–ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        var savedLang = localStorage.getItem('userLanguage');
        if (savedLang) {
            clearTimeout(timeoutId);
            currentLanguage = savedLang;
            resolve();
            return;
        }

        var countryCode = null;

        // –ü–æ–ø—Ä–æ–±—É–µ–º ipapi.co
        fetch('https://ipapi.co/json/', {
            method: 'GET',
            mode: 'cors'
        })
        .then(function(response) {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('HTTP ' + response.status);
            }
        })
        .then(function(data) {
            countryCode = data.country_code;
            console.log('üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: ' + countryCode);
            finalize();
        })
        .catch(function(e) {
            console.warn('‚ö†Ô∏è ipapi.co –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
            tryFallback();
        });

        function tryFallback() {
            if (countryCode) {
                finalize();
                return;
            }

            // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º ipwho.is
            fetch('https://ipwho.is/', {
                method: 'GET',
                mode: 'cors'
            })
            .then(function(response) {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Fallback failed');
            })
            .then(function(data) {
                countryCode = data.country_code;
                console.log('üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ (—á–µ—Ä–µ–∑ ipwho.is): ' + countryCode);
                finalize();
            })
            .catch(function(e) {
                console.warn('‚ö†Ô∏è ipwho.is –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
                finalize();
            });
        }

        function finalize() {
            clearTimeout(timeoutId); // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç

            // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ‚Äî —Å—Ç–∞–≤–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            currentLanguage = countryCode === 'RU' ? 'ru' : 'en';

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
            try {
                localStorage.setItem('userLanguage', currentLanguage);
                console.log('üåê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: ' + currentLanguage);
            } catch (e) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –≤ localStorage:', e);
            }
            resolve();
        }
    });
}

// üëá –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
function getCategoryTree() {
    return {
        watched: {},
        categories: {
            news: "https://iptv-org.github.io/iptv/categories/news.m3u",
            sports: "https://iptv-org.github.io/iptv/categories/sports.m3u",
            football: "https://iptv-org.github.io/iptv/categories/football.m3u",
            basketball: "https://iptv-org.github.io/iptv/categories/basketball.m3u",
            tennis: "https://iptv-org.github.io/iptv/categories/tennis.m3u",
            movies: "https://iptv-org.github.io/iptv/categories/movies.m3u",
            action: "https://iptv-org.github.io/iptv/categories/action.m3u",
            comedy: "https://iptv-org.github.io/iptv/categories/comedy.m3u",
            drama: "https://iptv-org.github.io/iptv/categories/drama.m3u",
            entertainment: "https://iptv-org.github.io/iptv/categories/entertainment.m3u",
            documentary: "https://iptv-org.github.io/iptv/categories/documentary.m3u",
            kids: "https://iptv-org.github.io/iptv/categories/kids.m3u",
            music: "https://iptv-org.github.io/iptv/categories/music.m3u",
            pop: "https://iptv-org.github.io/iptv/categories/pop.m3u",
            rock: "https://iptv-org.github.io/iptv/categories/rock.m3u",
            hiphop: "https://iptv-org.github.io/iptv/categories/hiphop.m3u"
        },
        countries: {
            russia: "https://iptv-org.github.io/iptv/countries/ru.m3u",
            usa: "https://iptv-org.github.io/iptv/countries/us.m3u",
            uk: "https://iptv-org.github.io/iptv/countries/gb.m3u",
            germany: "https://iptv-org.github.io/iptv/countries/de.m3u",
            france: "https://iptv-org.github.io/iptv/countries/fr.m3u",
            italy: "https://iptv-org.github.io/iptv/countries/it.m3u",
            spain: "https://iptv-org.github.io/iptv/countries/es.m3u",
            china: "https://iptv-org.github.io/iptv/countries/cn.m3u",
            japan: "https://iptv-org.github.io/iptv/countries/jp.m3u",
            korea: "https://iptv-org.github.io/iptv/countries/kr.m3u",
            india: "https://iptv-org.github.io/iptv/countries/in.m3u",
            brazil: "https://iptv-org.github.io/iptv/countries/br.m3u",
            canada: "https://iptv-org.github.io/iptv/countries/ca.m3u",
            australia: "https://iptv-org.github.io/iptv/countries/au.m3u"
        },
        languages: {
            russian: "https://iptv-org.github.io/iptv/languages/rus.m3u",
            english: "https://iptv-org.github.io/iptv/languages/eng.m3u",
            spanish: "https://iptv-org.github.io/iptv/languages/spa.m3u",
            french: "https://iptv-org.github.io/iptv/languages/fra.m3u",
            german: "https://iptv-org.github.io/iptv/languages/deu.m3u",
            italian: "https://iptv-org.github.io/iptv/languages/ita.m3u",
            portuguese: "https://iptv-org.github.io/iptv/languages/por.m3u",
            chinese: "https://iptv-org.github.io/iptv/languages/zho.m3u",
            japanese: "https://iptv-org.github.io/iptv/languages/jpn.m3u",
            korean: "https://iptv-org.github.io/iptv/languages/kor.m3u",
            arabic: "https://iptv-org.github.io/iptv/languages/ara.m3u",
            turkish: "https://iptv-org.github.io/iptv/languages/tur.m3u",
            hindi: "https://iptv-org.github.io/iptv/languages/hin.m3u"
        }
    };
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫ –¥–µ—Ä–µ–≤—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function applyTranslationsToTree(tree) {
    var translatedTree = {};
    for (var key in tree) {
        if (tree.hasOwnProperty(key)) {
            var translatedKey = t(key);
            if (typeof tree[key] === 'object' && !Array.isArray(tree[key]) && tree[key] !== null) {
                translatedTree[translatedKey] = applyTranslationsToTree(tree[key]);
            } else {
                translatedTree[translatedKey] = tree[key];
            }
        }
    }
    return translatedTree;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
closeModal.addEventListener('click', function() {
    playerModal.style.display = 'none';
    videoPlayerElement.pause();
    videoPlayerElement.src = '';

    if (currentWatchedChannel && watchStartTime) {
        var watchedSeconds = Math.floor((Date.now() - watchStartTime) / 1000);
        console.log('üì∫ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ' + watchedSeconds + ' —Å–µ–∫—É–Ω–¥');

        if (watchedSeconds >= 60) {
            addToWatched(
                currentWatchedChannel.name,
                currentWatchedChannel.url,
                currentWatchedChannel.group,
                currentWatchedChannel.logo
            );
        }

        currentWatchedChannel = null;
        watchStartTime = null;
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showToast(message) {
    var toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    toastContainer.appendChild(toast);
    
    setTimeout(function() {
        toast.remove();
    }, 3000);
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ localStorage ‚Äî —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
function addToWatched(name, url, group, logo) {
    var watched;
    try {
        var raw = localStorage.getItem('watchedChannels');
        watched = raw ? JSON.parse(raw) : [];
        if (!Array.isArray(watched)) {
            console.warn('‚ö†Ô∏è watchedChannels –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî —Å–±—Ä–æ—Å');
            watched = [];
        }
    } catch (e) {
        console.error(t('parseError'), e);
        watched = [];
    }

    var exists = false;
    for (var i = 0; i < watched.length; i++) {
        if (watched[i].url === url) {
            exists = true;
            break;
        }
    }

    if (exists) {
        console.log(t('alreadyInWatched', name));
        return;
    }

    watched.push({ name: name, url: url, group: group, logo: logo });
    try {
        localStorage.setItem('watchedChannels', JSON.stringify(watched));
        console.log(t('addToWatchedSuccess', name));
    } catch (e) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
        showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }

    if (currentMainCategory === t('watched')) {
        loadAndRenderChannels(t('watched'), '');
    }
}

// üëá –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
function saveScrollPosition() {
    if (navigationState === 'channels') {
        try {
            var key = 'scroll_' + currentMainCategory + '_' + currentSubcategory;
            localStorage.setItem(key, channelsContainer.scrollTop.toString());
        } catch (e) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞:', e);
        }
    }
}

// üëá –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
function restoreScrollPosition() {
    try {
        var key = 'scroll_' + currentMainCategory + '_' + currentSubcategory;
        var saved = localStorage.getItem(key);
        if (saved) {
            setTimeout(function() {
                channelsContainer.scrollTop = parseInt(saved);
                console.log(t('scrollRestored'));
            }, 100);
        }
    } catch (e) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞:', e);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –ë–ï–ó await, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function initApp() {
    var safetyTimeout = setTimeout(function() {
        initialLoader.style.display = 'none';
        showToast(t('errorInit'));
    }, 10000);

    try {
        // üëá –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ê–°–ò–ù–•–†–û–ù–ù–û, –±–µ–∑ await
        detectLanguageByIP().then(function() {
            // –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ ‚Äî –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é
            renderMainCategories();
            renderSubCategories();
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ", –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
            if (currentMainCategory === t('watched')) {
                loadAndRenderChannels(currentMainCategory, currentSubcategory);
            }
        }).catch(function(e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞:', e);
        });

        // üëá –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç (–∏–ª–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        var lastMain = localStorage.getItem('lastMainCategory');
        var lastSub = localStorage.getItem('lastSubcategory');

        var categoryTree = applyTranslationsToTree(getCategoryTree());

        if (lastMain && lastSub && categoryTree[lastMain] && categoryTree[lastMain][lastSub]) {
            currentMainCategory = lastMain;
            currentSubcategory = lastSub;
            console.log(t('lastPlaylistLoaded', lastMain, lastSub));
        } else {
            currentMainCategory = t('watched');
            currentSubcategory = '';
            console.log(t('defaultPlaylist'));
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        renderMainCategories();
        renderSubCategories();
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
        
        setTimeout(function() {
            var firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
            restoreScrollPosition();
        }, 500);

        channelsContainer.addEventListener('scroll', debounce(saveScrollPosition, 300));
        
        clearTimeout(safetyTimeout);

        // üëá –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ª–æ–∞–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫
        setTimeout(function() {
            if (initialLoader.style.display !== 'none') {
                console.warn('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ initialLoader');
                initialLoader.style.display = 'none';
            }
        }, 5000);

    } catch (error) {
        clearTimeout(safetyTimeout);
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        initialLoader.style.display = 'none';
        showToast(t('errorApp'));
    }
}

// Debounce —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –±–µ–∑ spread-–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
function debounce(func, wait) {
    var timeout;
    return function executedFunction() {
        var args = arguments;
        var context = this;
        var later = function() {
            clearTimeout(timeout);
            func.apply(context, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderMainCategories() {
    mainCategoriesPanel.innerHTML = '';
    var categoryTree = applyTranslationsToTree(getCategoryTree());
    var mainCategories = Object.keys(categoryTree);
    
    for (var i = 0; i < mainCategories.length; i++) {
        var cat = mainCategories[i];
        var btn = document.createElement('button');
        btn.className = 'category-btn';
        btn.textContent = cat;
        if (cat === currentMainCategory) {
            btn.classList.add('active');
            currentMainCategoryIndex = i;
        }
        
        btn.addEventListener('click', function(cat, index) {
            return function() {
                selectMainCategory(cat, index);
            };
        }(cat, i));
        
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        
        mainCategoriesPanel.appendChild(btn);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderSubCategories() {
    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'none';
    
    var categoryTree = applyTranslationsToTree(getCategoryTree());
    if (!categoryTree[currentMainCategory]) return;
    var subcategories = Object.keys(categoryTree[currentMainCategory]);
    
    for (var i = 0; i < subcategories.length; i++) {
        var subcat = subcategories[i];
        var btn = document.createElement('button');
        btn.className = 'subcategory-btn';
        btn.textContent = subcat;
        if (subcat === currentSubcategory) {
            btn.classList.add('active');
            currentSubCategoryIndex = i;
        }
        
        btn.addEventListener('click', function(subcat, index) {
            return function() {
                selectSubcategory(subcat, index);
            };
        }(subcat, i));
        
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        
        subCategoriesPanel.appendChild(btn);
    }
    
    if (subcategories.length > 0) {
        subCategoriesPanel.style.display = 'flex';
    }
}

// –í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectMainCategory(categoryName, index) {
    currentMainCategory = categoryName;
    currentMainCategoryIndex = index;
    var categoryTree = applyTranslationsToTree(getCategoryTree());
    var firstSub = categoryTree[categoryName] ? Object.keys(categoryTree[categoryName])[0] : '';
    currentSubcategory = firstSub || '';
    currentSubCategoryIndex = 0;
    renderSubCategories();
    
    setTimeout(function() {
        var buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons[index]) buttons[index].focus();
    }, 100);
}

// –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
function selectSubcategory(subcategoryName, index) {
    currentSubcategory = subcategoryName;
    currentSubCategoryIndex = index;

    try {
        localStorage.setItem('lastMainCategory', currentMainCategory);
        localStorage.setItem('lastSubcategory', subcategoryName);
        console.log(t('playlistSaved', currentMainCategory, subcategoryName));
    } catch (e) {
        console.error(t('saveError'), e);
    }

    loadAndRenderChannels(currentMainCategory, currentSubcategory);
    
    setTimeout(function() {
        var firstChannel = document.querySelector('.channel-card');
        if (firstChannel) firstChannel.focus();
    }, 100);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
function updateMainCategoryActive() {
    var buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
    for (var i = 0; i < buttons.length; i++) {
        if (i === currentMainCategoryIndex) {
            buttons[i].classList.add('active');
        } else {
            buttons[i].classList.remove('active');
        }
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–æ–¥–º–µ–Ω—é
function updateSubCategoryActive() {
    var buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
    for (var i = 0; i < buttons.length; i++) {
        if (i === currentSubCategoryIndex) {
            buttons[i].classList.add('active');
        } else {
            buttons[i].classList.remove('active');
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
function loadAndRenderChannels(mainCategory, subcategory) {
    var categoryTree = applyTranslationsToTree(getCategoryTree());

    if (mainCategory === t('watched')) {
        initialLoader.style.display = 'none';
        var watched;
        try {
            var raw = localStorage.getItem('watchedChannels');
            watched = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(watched)) {
                console.warn('‚ö†Ô∏è watchedChannels –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî —Å–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
                watched = [];
                localStorage.setItem('watchedChannels', '[]');
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', e);
            watched = [];
            localStorage.setItem('watchedChannels', '[]');
        }
        renderChannels(watched);
        return;
    }

    if (!categoryTree[mainCategory] || !categoryTree[mainCategory][subcategory]) {
        renderChannels([]);
        return;
    }
    
    var url = categoryTree[mainCategory][subcategory];
    initialLoader.style.display = 'flex';
    
    try {
        if (loadedPlaylists[url]) {
            renderChannels(loadedPlaylists[url]);
        } else {
            fetchM3U(url).then(function(content) {
                var channels = parseM3UContent(content, subcategory);
                loadedPlaylists[url] = channels;
                renderChannels(channels);
            }).catch(function(error) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
                showToast(t('errorLoad'));
                renderChannels([]);
            }).finally(function() {
                initialLoader.style.display = 'none';
                setTimeout(function() {
                    var firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                    restoreScrollPosition();
                }, 100);
            });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        showToast(t('errorLoad'));
        renderChannels([]);
        initialLoader.style.display = 'none';
        setTimeout(function() {
            var firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
            restoreScrollPosition();
        }, 100);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ M3U
function fetchM3U(url) {
    return fetch(url).then(function(response) {
        if (!response.ok) throw new Error('HTTP ' + response.status);
        return response.text();
    });
}

// –ü–∞—Ä—Å–∏–Ω–≥ M3U
function parseM3UContent(content, assignedCategory) {
    var channels = [];
    var lines = content.split('\n');
    
    for (var i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('#EXTINF:')) {
            var infoLine = lines[i];
            var urlLine = lines[i + 1];
            
            if (urlLine && !urlLine.startsWith('#')) {
                var name = infoLine.split(',')[1] || '–ö–∞–Ω–∞–ª';
                name = name.trim();
                
                var logoMatch = infoLine.match(/tvg-logo="([^"]*)"/);
                var logo = logoMatch ? logoMatch[1] : '';
                
                channels.push({ name: name, url: urlLine.trim(), group: assignedCategory, logo: logo });
            }
        }
    }
    return filterBlacklistedChannels(channels);
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
function filterBlacklistedChannels(channelsList) {
    var blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    var filtered = [];
    for (var i = 0; i < channelsList.length; i++) {
        if (blacklist.indexOf(channelsList[i].url) === -1) {
            filtered.push(channelsList[i]);
        }
    }
    return filtered;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
function renderChannels(channelsToRender) {
    channelsContainer.innerHTML = '';
    
    if (channelsToRender.length === 0) {
        channelsContainer.innerHTML = '<div style="color:#aaa; padding:40px; text-align:center">' +
            (initialLoader.style.display === 'none' ? t('channelNotFound') : t('loading')) +
            '</div>';
        return;
    }
    
    for (var i = 0; i < channelsToRender.length; i++) {
        var channel = channelsToRender[i];
        var groupIcon = getGroupIcon(channel.group);
        var channelCard = document.createElement('div');
        channelCard.className = 'channel-card';
        channelCard.setAttribute('tabindex', '0');
        channelCard.dataset.index = i;
        
        var mediaContainer = document.createElement('div');
        mediaContainer.className = 'channel-media';
        
        if (channel.logo) {
            var img = document.createElement('img');
            img.src = channel.logo;
            img.alt = channel.name;
            img.onerror = function() { this.style.display = 'none'; };
            mediaContainer.appendChild(img);
        }
        
        var icon = document.createElement('i');
        icon.className = 'fas ' + groupIcon;
        mediaContainer.appendChild(icon);
        
        var miniPlayer = createMiniPlayer(channel.url);
        mediaContainer.appendChild(miniPlayer);
        
        var infoContainer = document.createElement('div');
        infoContainer.className = 'channel-info';
        infoContainer.innerHTML = '<h3>' + channel.name + '</h3><p>' + channel.group + '</p>';
        
        channelCard.appendChild(mediaContainer);
        channelCard.appendChild(infoContainer);
        
        channelCard.addEventListener('focus', function() {
            currentChannelIndex = parseInt(this.dataset.index);
            
            if (focusTimer) clearTimeout(focusTimer);
            
            if (currentMiniPlayer && currentMiniPlayer !== miniPlayer) {
                currentMiniPlayer.style.display = 'none';
                var prevIcon = currentMiniPlayer.parentElement.querySelector('i');
                if (prevIcon) prevIcon.style.display = 'block';
                var prevVideo = currentMiniPlayer.querySelector('video');
                if (prevVideo) prevVideo.pause();
            }
            
            miniPlayer.style.display = 'block';
            icon.style.display = 'none';
            currentMiniPlayer = miniPlayer;
            
            focusTimer = setTimeout(function() {
                var video = miniPlayer.querySelector('video');
                if (!video.dataset.initialized) {
                    initializeMiniPlayer(video, channel.url, miniPlayer, icon);
                } else if (video.paused) {
                    video.play().catch(function(e) { console.log("Autoplay:", e); });
                }
            }, 3000);
        });
        
        channelCard.addEventListener('blur', function() {
            if (focusTimer) clearTimeout(focusTimer);
            setTimeout(function() {
                if (!channelCard.contains(document.activeElement)) {
                    miniPlayer.style.display = 'none';
                    icon.style.display = 'block';
                    var video = miniPlayer.querySelector('video');
                    if (video) video.pause();
                }
            }, 100);
        });
        
        channelCard.addEventListener('click', function(name, url, group, logo) {
            return function() {
                openFullScreenPlayer(name, url, group, logo);
            };
        }(channel.name, channel.url, channel.group, channel.logo));
        
        channelCard.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
            }
        });
        
        channelsContainer.appendChild(channelCard);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function createMiniPlayer(url) {
    if (miniPlayers.has(url)) return miniPlayers.get(url);

    var container = document.createElement('div');
    container.className = 'mini-player';
    container.dataset.url = url;
    
    var video = document.createElement('video');
    video.muted = true;
    video.playsInline = true;
    video.loop = true;
    video.style.width = '100%';
    video.style.height = '100%';
    video.style.background = '#000';
    
    container.appendChild(video);
    miniPlayers.set(url, container);
    return container;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function initializeMiniPlayer(video, url, miniPlayer, icon) {
    video.dataset.initialized = 'true';
    var manifestLoaded = false;
    var networkErrorOccurred = false;

    var timeoutId = setTimeout(function() {
        if (!manifestLoaded && !networkErrorOccurred) {
            console.warn("–¢–∞–π–º–∞—É—Ç:", url);
            showToast(t('channelUnavailable'));
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        }
    }, 30000);

    if (Hls.isSupported()) {
        var hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(video);
        
        hls.on(Hls.Events.MANIFEST_PARSED, function() {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(function(e) {
                console.log("Autoplay blocked:", e);
                showToast(t('clickToPlay'));
            });
        });
        
        hls.on(Hls.Events.ERROR, function(event, data) {
            if (data.fatal && data.type === Hls.ErrorTypes.NETWORK_ERROR) {
                networkErrorOccurred = true;
                clearTimeout(timeoutId);
                handleStreamError(url, miniPlayer);
                addToBlacklist(url);
                miniPlayer.style.display = 'none';
                icon.style.display = 'block';
            }
        });
    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = url;
        video.addEventListener('loadedmetadata', function() {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(function(e) {
                console.log("Autoplay blocked:", e);
                showToast(t('clickToPlay'));
            });
        });
        video.addEventListener('error', function() {
            clearTimeout(timeoutId);
            handleStreamError(url, miniPlayer);
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ—Ç–æ–∫–∞
function handleStreamError(url, container) {
    showToast(t('channelUnavailable'));
    console.error("–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞:", url);
    var icon = container.parentElement.querySelector('i');
    if (icon) icon.style.display = 'block';
    container.style.display = 'none';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
function addToBlacklist(url) {
    var blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    if (blacklist.indexOf(url) === -1) {
        blacklist.push(url);
        localStorage.setItem('blacklist', JSON.stringify(blacklist));
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞
function openFullScreenPlayer(name, url, group, logo) {
    currentWatchedChannel = { name: name, url: url, group: group, logo: logo };
    watchStartTime = Date.now();

    playerModal.style.display = 'flex';
    videoPlayerElement.src = '';
    videoPlayerElement.load();
    videoPlayerElement.muted = false;

    var manifestLoaded = false;

    var timeoutId = setTimeout(function() {
        if (!manifestLoaded) {
            console.warn("–¢–∞–π–º–∞—É—Ç –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω:", url);
            showToast(t('channelUnavailable'));
            addToBlacklist(url);
            playerModal.style.display = 'none';
        }
    }, 30000);

    if (Hls.isSupported()) {
        var hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(videoPlayerElement);
        
        hls.on(Hls.Events.MANIFEST_PARSED, function() {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(function(e) {
                console.log("Autoplay blocked:", e);
                showToast(t('clickToPlay'));
            });
            setTimeout(function() { requestNativeFullscreen(); }, 1000);
        });
        
        hls.on(Hls.Events.ERROR, function(event, data) {
            if (data.fatal) {
                clearTimeout(timeoutId);
                showToast(t('channelUnavailable'));
                addToBlacklist(url);
                playerModal.style.display = 'none';
            }
        });
    } else if (videoPlayerElement.canPlayType('application/vnd.apple.mpegurl')) {
        videoPlayerElement.src = url;
        videoPlayerElement.addEventListener('loadedmetadata', function() {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(function(e) {
                console.log("Autoplay blocked:", e);
                showToast(t('clickToPlay'));
            });
            setTimeout(function() { requestNativeFullscreen(); }, 1000);
        });
        videoPlayerElement.addEventListener('error', function() {
            clearTimeout(timeoutId);
            showToast(t('channelUnavailable'));
            addToBlacklist(url);
            playerModal.style.display = 'none';
        });
    } else {
        clearTimeout(timeoutId);
        showToast(t('formatNotSupported'));
        playerModal.style.display = 'none';
    }
}

// Fullscreen API
function requestNativeFullscreen() {
    var elem = videoPlayerElement;
    if (elem.requestFullscreen) {
        elem.requestFullscreen().catch(function(err) { console.log("Fullscreen:", err); });
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen().catch(function(err) { console.log("Fullscreen:", err); });
    }
}

// –ò–∫–æ–Ω–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
function getGroupIcon(group) {
    group = group.toLowerCase();
    if (group.includes('–Ω–æ–≤–æ—Å—Ç–∏') || group.includes('news')) return 'fa-newspaper';
    if (group.includes('—Å–ø–æ—Ä—Ç') || group.includes('sports') || group.includes('football') || group.includes('basketball') || group.includes('tennis')) return 'fa-futbol';
    if (group.includes('–∫–∏–Ω–æ') || group.includes('movies') || group.includes('action') || group.includes('comedy') || group.includes('drama')) return 'fa-film';
    if (group.includes('–º—É–∑—ã–∫–∞') || group.includes('music') || group.includes('pop') || group.includes('rock') || group.includes('hiphop')) return 'fa-music';
    if (group.includes('–¥–µ—Ç—Å–∫') || group.includes('kids')) return 'fa-child';
    if (group.includes('–¥–æ–∫—É–º–µ–Ω—Ç') || group.includes('documentary')) return 'fa-video';
    if (group.includes('—Ä–∞–∑–≤–ª–µ—á') || group.includes('entertainment')) return 'fa-theater-masks';
    return 'fa-tv';
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
function moveFocus(direction) {
    if (navigationState === 'channels') {
        var cards = document.querySelectorAll('.channel-card');
        if (cards.length === 0) return;
        var currentIndex = Array.prototype.indexOf.call(cards, document.activeElement);
        var cols = Math.floor(channelsContainer.offsetWidth / 280) || 1;
        var nextIndex = currentIndex;

        switch(direction) {
            case 'right': nextIndex = (currentIndex + 1) % cards.length; break;
            case 'left': nextIndex = (currentIndex - 1 + cards.length) % cards.length; break;
            case 'down': nextIndex = (currentIndex + cols) % cards.length; break;
            case 'up': nextIndex = (currentIndex - cols + cards.length) % cards.length; break;
        }

        if (nextIndex >= 0 && nextIndex < cards.length) {
            cards[nextIndex].focus();
        }
    } else if (navigationState === 'mainCategories') {
        var buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons.length === 0) return;
        var nextIndex = direction === 'right'
            ? (currentMainCategoryIndex + 1) % buttons.length
            : (currentMainCategoryIndex - 1 + buttons.length) % buttons.length;
        currentMainCategoryIndex = nextIndex;
        currentMainCategory = buttons[nextIndex].textContent;
        updateMainCategoryActive();
        buttons[nextIndex].focus();
    } else if (navigationState === 'subCategories') {
        var buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
        if (buttons.length === 0) return;
        var nextIndex = direction === 'right'
            ? (currentSubCategoryIndex + 1) % buttons.length
            : (currentSubCategoryIndex - 1 + buttons.length) % buttons.length;
        currentSubCategoryIndex = nextIndex;
        currentSubcategory = buttons[nextIndex].textContent;
        updateSubCategoryActive();
        buttons[nextIndex].focus();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
document.addEventListener('keydown', function(e) {
    if (playerModal.style.display === 'flex') {
        if (e.key === 'Escape') closeModal.click();
        return;
    }

    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', 'Escape'].indexOf(e.key) !== -1) {
        e.preventDefault();
    }

    switch(e.key) {
        case 'ArrowLeft':
        case 'ArrowRight':
            moveFocus(e.key === 'ArrowRight' ? 'right' : 'left');
            break;
        case 'ArrowUp':
            navigationState = 'mainCategories';
            mainCategoriesPanel.style.display = 'flex';
            subCategoriesPanel.style.display = 'none';
            setTimeout(function() {
                var buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                if (buttons[currentMainCategoryIndex]) {
                    buttons[currentMainCategoryIndex].focus();
                }
            }, 100);
            break;
        case 'ArrowDown':
            navigationState = 'channels';
            mainCategoriesPanel.style.display = 'flex';
            subCategoriesPanel.style.display = 'none';
            setTimeout(function() {
                var firstChannel = document.querySelector('.channel-card');
                if (firstChannel) firstChannel.focus();
            }, 100);
            break;
        case 'Enter':
            if (navigationState === 'mainCategories') {
                navigationState = 'subCategories';
                subCategoriesPanel.style.display = 'flex';
                setTimeout(function() {
                    var buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                    if (buttons.length > 0) {
                        buttons[0].focus();
                        currentSubCategoryIndex = 0;
                        currentSubcategory = buttons[0].textContent;
                        updateSubCategoryActive();
                    }
                }, 100);
            } else if (navigationState === 'subCategories') {
                var buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                if (buttons[currentSubCategoryIndex]) {
                    selectSubcategory(buttons[currentSubCategoryIndex].textContent, currentSubCategoryIndex);
                }
            } else if (navigationState === 'channels' && document.activeElement.classList.contains('channel-card')) {
                var card = document.activeElement;
                var index = parseInt(card.dataset.index);
                var categoryTree = applyTranslationsToTree(getCategoryTree());
                var list = currentMainCategory === t('watched')
                    ? JSON.parse(localStorage.getItem('watchedChannels') || '[]')
                    : loadedPlaylists[categoryTree[currentMainCategory][currentSubcategory]] || [];
                if (index >= 0 && index < list.length) {
                    var channel = list[index];
                    openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
                }
            }
            break;
        case 'Escape':
            if (navigationState === 'subCategories') {
                navigationState = 'mainCategories';
                setTimeout(function() {
                    var buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                    if (buttons[currentMainCategoryIndex]) {
                        buttons[currentMainCategoryIndex].focus();
                    }
                }, 100);
            } else if (navigationState === 'mainCategories') {
                navigationState = 'channels';
                setTimeout(function() {
                    var firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                }, 100);
            }
            break;
    }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initApp();
});
