// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const channelsContainer = document.getElementById('channelsContainer');
const mainCategoriesPanel = document.getElementById('mainCategoriesPanel');
const subCategoriesPanel = document.getElementById('subCategoriesPanel');
const playerModal = document.getElementById('playerModal');
const videoPlayerElement = document.getElementById('videoPlayerElement');
const closeModal = document.getElementById('closeModal');
const initialLoader = document.getElementById('initialLoader');
const toastContainer = document.getElementById('toastContainer');

// üëá Firebase: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: "AIzaSyD9mAjCqyhJix9Tiyr-vQXWj-Mejysws44",
  authDomain: "tv-channels-watching.firebaseapp.com",
  databaseURL: "https://tv-channels-watching-default-rtdb.firebaseio.com",
  projectId: "tv-channels-watching",
  storageBucket: "tv-channels-watching.firebasestorage.app",
  messagingSenderId: "625169237639",
  appId: "1:625169237639:web:beeed9dc2d424aeb269a22",
  measurementId: "G-B1HFTLJ7BM"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
const app = firebase.initializeApp(firebaseConfig);
const database = firebase.database();

// üëá –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
let currentLanguage = localStorage.getItem('appLanguage') || 'ru';

// üëá –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const translations = {
    ru: {
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ",
        "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å",
        "–°–º–æ—Ç—Ä—è—Ç": "–°–º–æ—Ç—Ä—è—Ç",
        "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        "–°—Ç—Ä–∞–Ω—ã": "–°—Ç—Ä–∞–Ω—ã",
        "–Ø–∑—ã–∫–∏": "–Ø–∑—ã–∫–∏",
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ",
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.",
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª",
        "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...",
        "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!": "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!",
        "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...",
        "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!": "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!",
        "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        "–ó–∞–≥—Ä—É–∑–∫–∞...": "–ó–∞–≥—Ä—É–∑–∫–∞...",
        "–ó–∞–≥—Ä—É–∑–∫–∞": "–ó–∞–≥—Ä—É–∑–∫–∞",
        "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏": "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç": "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
        "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω": "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è": "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!": "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!",
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É",
        "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π",
        "Language changed to English": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
    },
    en: {
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": "Watched",
        "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": "Watching Now",
        "–°–º–æ—Ç—Ä—è—Ç": "Popular",
        "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": "My Playlist",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": "Categories",
        "–°—Ç—Ä–∞–Ω—ã": "Countries",
        "–Ø–∑—ã–∫–∏": "Languages",
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ": "Upload playlist via URL",
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U": "M3U format supported",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "Load Playlist",
        "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.": "Playlist not loaded.",
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª": "Go to submenu and select 'Load from URL'",
        "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "No one is watching globally...",
        "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!": "Watch any channel for 60+ sec to appear here!",
        "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "No one is watching right now...",
        "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!": "Start watching to be the first!",
        "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": "Channels not found",
        "–ó–∞–≥—Ä—É–∑–∫–∞...": "Loading...",
        "–ó–∞–≥—Ä—É–∑–∫–∞": "Loading",
        "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏": "Initialization error",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": "App error",
        "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": "Save error",
        "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç": "Channel not responding",
        "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω": "Channel unavailable",
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è": "Click video to play",
        "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è": "Format not supported",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "Failed to load playlist",
        "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!": "Playlist loaded!",
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É": "Enter URL",
        "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π": "Language changed to Russian",
        "Language changed to English": "Language changed to English"
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
function translateText(key) {
    return translations[currentLanguage][key] || key;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
let currentSubcategory = '';
let currentMainCategoryIndex = 0;
let currentSubCategoryIndex = 0;
let currentChannelIndex = 0;
let currentMiniPlayer = null;
let miniPlayers = new Map();
let focusTimer = null;
let loadedPlaylists = {};
let navigationState = 'channels';

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentWatchedChannel = null; // { name, url, group, logo }
let watchStartTime = null;        // timestamp –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
const categoryTree = {
  "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": {},
  "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": {},
  "–°–º–æ—Ç—Ä—è—Ç": {},
  "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": {},
  "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": {
    "–ù–æ–≤–æ—Å—Ç–∏": "https://iptv-org.github.io/iptv/categories/news.m3u",
    "–°–ø–æ—Ä—Ç": "https://iptv-org.github.io/iptv/categories/sports.m3u",
    "–§—É—Ç–±–æ–ª": "https://iptv-org.github.io/iptv/categories/football.m3u",
    "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "https://iptv-org.github.io/iptv/categories/basketball.m3u",
    "–¢–µ–Ω–Ω–∏—Å": "https://iptv-org.github.io/iptv/categories/tennis.m3u",
    "–ö–∏–Ω–æ": "https://iptv-org.github.io/iptv/categories/movies.m3u",
    "–ë–æ–µ–≤–∏–∫–∏": "https://iptv-org.github.io/iptv/categories/action.m3u",
    "–ö–æ–º–µ–¥–∏–∏": "https://iptv-org.github.io/iptv/categories/comedy.m3u",
    "–î—Ä–∞–º—ã": "https://iptv-org.github.io/iptv/categories/drama.m3u",
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/categories/entertainment.m3u",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/documentary.m3u",
    "–î–µ—Ç—Å–∫–∏–µ": "https://iptv-org.github.io/iptv/categories/kids.m3u",
    "–ú—É–∑—ã–∫–∞": "https://iptv-org.github.io/iptv/categories/music.m3u",
    "–ü–æ–ø": "https://iptv-org.github.io/iptv/categories/pop.m3u",
    "–†–æ–∫": "https://iptv-org.github.io/iptv/categories/rock.m3u",
    "–•–∏–ø-—Ö–æ–ø": "https://iptv-org.github.io/iptv/categories/hiphop.m3u"
  },
  "–°—Ç—Ä–∞–Ω—ã": {
    "–†–æ—Å—Å–∏—è": "https://iptv-org.github.io/iptv/countries/ru.m3u",
    "–°–®–ê": "https://iptv-org.github.io/iptv/countries/us.m3u",
    "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/gb.m3u",
    "–ì–µ—Ä–º–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/de.m3u",
    "–§—Ä–∞–Ω—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/fr.m3u",
    "–ò—Ç–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/it.m3u",
    "–ò—Å–ø–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/es.m3u",
    "–ö–∏—Ç–∞–π": "https://iptv-org.github.io/iptv/countries/cn.m3u",
    "–Ø–ø–æ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/jp.m3u",
    "–ö–æ—Ä–µ—è": "https://iptv-org.github.io/iptv/countries/kr.m3u",
    "–ò–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/in.m3u",
    "–ë—Ä–∞–∑–∏–ª–∏—è": "https://iptv-org.github.io/iptv/countries/br.m3u",
    "–ö–∞–Ω–∞–¥–∞": "https://iptv-org.github.io/iptv/countries/ca.m3u",
    "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/au.m3u"
  },
  "–Ø–∑—ã–∫–∏": {
    "–†—É—Å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/rus.m3u",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/eng.m3u",
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/spa.m3u",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fra.m3u",
    "–ù–µ–º–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/deu.m3u",
    "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ita.m3u",
    "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/por.m3u",
    "–ö–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/zho.m3u",
    "–Ø–ø–æ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/jpn.m3u",
    "–ö–æ—Ä–µ–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kor.m3u",
    "–ê—Ä–∞–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ara.m3u",
    "–¢—É—Ä–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tur.m3u",
    "–•–∏–Ω–¥–∏": "https://iptv-org.github.io/iptv/languages/hin.m3u"
  }
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
closeModal.addEventListener('click', function() {
    playerModal.style.display = 'none';
    videoPlayerElement.pause();
    videoPlayerElement.src = '';

    if (currentWatchedChannel && watchStartTime) {
        const watchedSeconds = Math.floor((Date.now() - watchStartTime) / 1000);
        console.log(`üì∫ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${watchedSeconds} —Å–µ–∫—É–Ω–¥`);

        if (watchedSeconds >= 60) {
            addToWatched(
                currentWatchedChannel.name,
                currentWatchedChannel.url,
                currentWatchedChannel.group,
                currentWatchedChannel.logo
            );
            addToWatching(
                currentWatchedChannel.name,
                currentWatchedChannel.url,
                currentWatchedChannel.group,
                currentWatchedChannel.logo
            );
        }

        currentWatchedChannel = null;
        watchStartTime = null;
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    toastContainer.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ localStorage
function addToWatched(name, url, group, logo) {
    let watched;
    try {
        const raw = localStorage.getItem('watchedChannels');
        watched = raw ? JSON.parse(raw) : [];
        if (!Array.isArray(watched)) {
            console.warn('‚ö†Ô∏è watchedChannels –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî —Å–±—Ä–æ—Å');
            watched = [];
        }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ watchedChannels:', e);
        watched = [];
    }

    if (watched.some(item => item.url === url)) {
        console.log(`‚ÑπÔ∏è –ö–∞–Ω–∞–ª "${name}" —É–∂–µ –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"`);
        return;
    }

    watched.push({ name, url, group, logo });
    try {
        localStorage.setItem('watchedChannels', JSON.stringify(watched));
        console.log(`‚úÖ –ö–∞–Ω–∞–ª "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"`);
    } catch (e) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
        showToast(translateText('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'));
        return;
    }

    if (currentMainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
        loadAndRenderChannels('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ', '');
    }
}

// üëá –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π "–°–º–æ—Ç—Ä—è—Ç" (Firebase)
async function addToWatching(name, url, group, logo) {
    try {
        const now = Date.now();
        const key = url.replace(/[^a-zA-Z0-9]/g, '_').substring(0, 100);

        const snapshot = await database.ref('watching/' + key).get();
        let data = snapshot.exists() ? snapshot.val() : {
            name,
            url,
            group,
            logo,
            views: 0,
            lastWatched: 0,
            createdAt: now
        };

        data.views = (data.views || 0) + 1;
        data.lastWatched = now;
        data.name = name;
        data.logo = logo;

        await database.ref('watching/' + key).set(data);
        console.log(`üåç –ì–ª–æ–±–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–°–º–æ—Ç—Ä—è—Ç": ${name}`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ Firebase addToWatching:", error);
    }
}

// üëá –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø–æ URL
async function loadPlaylistFromURL() {
    const urlInput = document.getElementById('playlistURL');
    const url = urlInput.value.trim();
    if (!url) {
        showToast(translateText('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É'));
        urlInput.focus();
        return;
    }

    initialLoader.style.display = 'flex';

    try {
        const content = await fetchM3U(url);
        const channels = parseM3UContent(content, translateText('–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç'));

        if (channels.length === 0) {
            throw new Error('–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
        }

        localStorage.setItem('customPlaylist', JSON.stringify(channels));
        showToast(translateText('–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!'));

        renderChannels(channels);

        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
            navigationState = 'channels';
        }, 100);

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ URL:', err);
        showToast(translateText('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç'));
    } finally {
        initialLoader.style.display = 'none';
    }
}

// üëá –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é –¥–ª—è "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç"
function renderCustomPlaylistSubmenu() {
    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'flex';

    const wrapper = document.createElement('div');
    wrapper.style.display = 'flex';
    wrapper.style.gap = '10px';
    wrapper.style.alignItems = 'center';
    wrapper.style.padding = '0 10px';

    const input = document.createElement('input');
    input.id = 'playlistURL';
    input.type = 'text';
    input.placeholder = 'https://example.com/playlist.m3u';
    input.style.padding = '8px 12px';
    input.style.borderRadius = '6px';
    input.style.border = '1px solid #444';
    input.style.background = '#222';
    input.style.color = 'white';
    input.style.fontSize = '13px';
    input.setAttribute('tabindex', '0');

    const button = document.createElement('button');
    button.textContent = translateText('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç');
    button.style.padding = '8px 16px';
    button.style.borderRadius = '6px';
    button.style.border = 'none';
    button.style.background = 'linear-gradient(90deg, #ff375f, #ff5e41)';
    button.style.color = 'white';
    button.style.cursor = 'pointer';
    button.style.fontSize = '13px';
    button.setAttribute('tabindex', '0');

    button.addEventListener('click', loadPlaylistFromURL);
    button.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.click();
        }
    });

    input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            loadPlaylistFromURL();
        }
    });

    wrapper.appendChild(input);
    wrapper.appendChild(button);
    subCategoriesPanel.appendChild(wrapper);

    setTimeout(() => {
        input.focus();
        navigationState = 'customInput';
    }, 100);
}

// üëá –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
function setLanguage(lang) {
    currentLanguage = lang;
    localStorage.setItem('appLanguage', lang);

    const flags = mainCategoriesPanel.querySelectorAll('.category-btn');
    flags.forEach(flag => {
        if (flag.textContent === 'üá∑üá∫') {
            flag.classList.toggle('active', lang === 'ru');
        } else if (flag.textContent === 'üá¨üáß') {
            flag.classList.toggle('active', lang === 'en');
        }
    });

    renderMainCategories();
    renderSubCategories();
    loadAndRenderChannels(currentMainCategory, currentSubcategory);

    showToast(translateText(lang === 'ru' ? "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π" : "Language changed to English"));
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π + —Ñ–ª–∞–≥–∏ —è–∑—ã–∫–∞
function renderMainCategories() {
    mainCategoriesPanel.innerHTML = '';
    const mainCategories = Object.keys(categoryTree);

    mainCategories.forEach((cat, index) => {
        const btn = document.createElement('button');
        btn.className = 'category-btn';
        btn.textContent = translateText(cat);
        if (cat === currentMainCategory) {
            btn.classList.add('active');
            currentMainCategoryIndex = index;
        }

        btn.addEventListener('click', () => selectMainCategory(cat, index));
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });

        mainCategoriesPanel.appendChild(btn);
    });

    const spacer = document.createElement('div');
    spacer.style.width = '20px';
    mainCategoriesPanel.appendChild(spacer);

    const ruFlag = document.createElement('button');
    ruFlag.className = 'category-btn';
    ruFlag.textContent = 'üá∑üá∫';
    ruFlag.style.minWidth = '40px';
    ruFlag.style.padding = '8px';
    if (currentLanguage === 'ru') ruFlag.classList.add('active');
    ruFlag.addEventListener('click', () => setLanguage('ru'));
    ruFlag.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setLanguage('ru');
        }
    });
    mainCategoriesPanel.appendChild(ruFlag);

    const enFlag = document.createElement('button');
    enFlag.className = 'category-btn';
    enFlag.textContent = 'üá¨üáß';
    enFlag.style.minWidth = '40px';
    enFlag.style.padding = '8px';
    if (currentLanguage === 'en') enFlag.classList.add('active');
    enFlag.addEventListener('click', () => setLanguage('en'));
    enFlag.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setLanguage('en');
        }
    });
    mainCategoriesPanel.appendChild(enFlag);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ UI)
function renderSubCategories() {
    if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        renderCustomPlaylistSubmenu();
        return;
    }

    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'none';

    if (!categoryTree[currentMainCategory]) return;
    const subcategories = Object.keys(categoryTree[currentMainCategory]);

    subcategories.forEach((subcat, index) => {
        const btn = document.createElement('button');
        btn.className = 'subcategory-btn';
        btn.textContent = translateText(subcat);
        if (subcat === currentSubcategory) {
            btn.classList.add('active');
            currentSubCategoryIndex = index;
        }

        btn.addEventListener('click', () => selectSubcategory(subcat, index));
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });

        subCategoriesPanel.appendChild(btn);
    });

    if (subcategories.length > 0) {
        subCategoriesPanel.style.display = 'flex';
    }
}

// –í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectMainCategory(categoryName, index) {
    if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && window.watchingNowInterval) {
        clearInterval(window.watchingNowInterval);
        window.watchingNowInterval = null;
        if (document.getElementById('reloadTimer')) {
            document.getElementById('reloadTimer').remove();
        }
    }

    currentMainCategory = categoryName;
    currentMainCategoryIndex = index;
    currentSubcategory = '';
    currentSubCategoryIndex = 0;

    renderSubCategories();

    if (categoryName === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        loadAndRenderChannels('–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç', '');
        navigationState = 'customInput';
    } else if (categoryName === '–°–º–æ—Ç—Ä—è—Ç' || categoryName === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
        loadAndRenderChannels(categoryName, '');
    } else if (!categoryTree[categoryName] || Object.keys(categoryTree[categoryName]).length === 0) {
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
    }

    setTimeout(() => {
        const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons[index]) buttons[index].focus();
    }, 100);
}

// –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectSubcategory(subcategoryName, index) {
    if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && window.watchingNowInterval) {
        clearInterval(window.watchingNowInterval);
        window.watchingNowInterval = null;
        if (document.getElementById('reloadTimer')) {
            document.getElementById('reloadTimer').remove();
        }
    }

    currentSubcategory = subcategoryName;
    currentSubCategoryIndex = index;
    loadAndRenderChannels(currentMainCategory, currentSubcategory);

    setTimeout(() => {
        const firstChannel = document.querySelector('.channel-card');
        if (firstChannel) firstChannel.focus();
        navigationState = 'channels';
    }, 100);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
function updateMainCategoryActive() {
    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
    buttons.forEach((btn, i) => {
        if (i === currentMainCategoryIndex) btn.classList.add('active');
        else btn.classList.remove('active');
    });
}

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–æ–¥–º–µ–Ω—é
function updateSubCategoryActive() {
    const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
    buttons.forEach((btn, i) => {
        if (i === currentSubCategoryIndex) btn.classList.add('active');
        else btn.classList.remove('active');
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
async function loadAndRenderChannels(mainCategory, subcategory) {
    if (mainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
        initialLoader.style.display = 'none';
        let watched;
        try {
            const raw = localStorage.getItem('watchedChannels');
            watched = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(watched)) {
                watched = [];
                localStorage.setItem('watchedChannels', '[]');
            }
        } catch (e) {
            watched = [];
            localStorage.setItem('watchedChannels', '[]');
        }
        renderChannels(watched);
        return;
    }

    // üëá –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å
    if (mainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
        initialLoader.style.display = 'none';
        channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ó–∞–≥—Ä—É–∑–∫–∞...")}</div>`;

        const loadWatchingNow = async () => {
            try {
                const snapshot = await database.ref('watching').get();
                let watchingNow = [];

                if (snapshot.exists()) {
                    const now = Date.now();
                    watchingNow = Object.values(snapshot.val()).filter(channel => {
                        return (now - channel.lastWatched) < 600000; // 10 –º–∏–Ω—É—Ç
                    });
                    watchingNow.sort((a, b) => b.lastWatched - a.lastWatched);
                }

                renderChannels(watchingNow);

                if (watchingNow.length === 0) {
                    channelsContainer.innerHTML = `
                        <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                            <i class="fas fa-bolt" style="font-size:48px; margin-bottom:20px;"></i><br>
                            ${translateText("–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...")}<br>
                            ${translateText("–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!")}
                        </div>`;
                }

            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å':", error);
                channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")}</div>`;
            }
        };

        await loadWatchingNow();

        if (window.watchingNowInterval) {
            clearInterval(window.watchingNowInterval);
        }

        window.watchingNowInterval = setInterval(loadWatchingNow, 10000);

        return;
    }

    // üëá –°–º–æ—Ç—Ä—è—Ç
    if (mainCategory === '–°–º–æ—Ç—Ä—è—Ç') {
        initialLoader.style.display = 'flex';
        channelsContainer.innerHTML = '';

        try {
            const snapshot = await database.ref('watching').get();
            let watching = [];

            if (snapshot.exists()) {
                watching = Object.values(snapshot.val()).filter(channel => {
                    return (Date.now() - channel.lastWatched) < 24 * 60 * 60 * 1000;
                });
                watching.sort((a, b) => b.views - a.views);
            }

            renderChannels(watching);

            if (watching.length === 0) {
                channelsContainer.innerHTML = `
                    <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                        <i class="fas fa-users" style="font-size:48px; margin-bottom:20px;"></i><br>
                        ${translateText("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...")}<br>
                        ${translateText("–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!")}
                    </div>`;
            }

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Firebase:", error);
            showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"));
            channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")}</div>`;
        } finally {
            initialLoader.style.display = 'none';
        }

        return;
    }

    // üëá –°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
    if (mainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        initialLoader.style.display = 'none';
        let customPlaylist;
        try {
            const raw = localStorage.getItem('customPlaylist');
            customPlaylist = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(customPlaylist)) {
                customPlaylist = [];
                localStorage.removeItem('customPlaylist');
            }
        } catch (e) {
            customPlaylist = [];
            localStorage.removeItem('customPlaylist');
        }

        renderChannels(customPlaylist);

        if (customPlaylist.length === 0) {
            channelsContainer.innerHTML = `
                <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                    <i class="fas fa-list" style="font-size:48px; margin-bottom:20px;"></i><br>
                    ${translateText("–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")}<br>
                    ${translateText("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª")}
                </div>`;
        }

        return;
    }

    // üëá –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!categoryTree[mainCategory] || !categoryTree[mainCategory][subcategory]) {
        renderChannels([]);
        return;
    }

    const url = categoryTree[mainCategory][subcategory];
    initialLoader.style.display = 'flex';

    try {
        let channels = loadedPlaylists[url] || await fetchAndCachePlaylist(url, subcategory);
        renderChannels(channels);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"));
        renderChannels([]);
    } finally {
        initialLoader.style.display = 'none';
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
        }, 100);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
async function fetchAndCachePlaylist(url, group) {
    const content = await fetchM3U(url);
    const channels = parseM3UContent(content, group);
    loadedPlaylists[url] = channels;
    return channels;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ M3U
async function fetchM3U(url) {
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    return await response.text();
}

// –ü–∞—Ä—Å–∏–Ω–≥ M3U
function parseM3UContent(content, assignedCategory) {
    const channels = [];
    const lines = content.split('\n');

    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('#EXTINF:')) {
            const infoLine = lines[i];
            const urlLine = lines[i + 1];

            if (urlLine && !urlLine.startsWith('#')) {
                let name = infoLine.split(',')[1] || '–ö–∞–Ω–∞–ª';
                name = name.trim();

                const logoMatch = infoLine.match(/tvg-logo="([^"]*)"/);
                const logo = logoMatch ? logoMatch[1] : '';

                channels.push({ name, url: urlLine.trim(), group: assignedCategory, logo });
            }
        }
    }
    return filterBlacklistedChannels(channels);
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
function filterBlacklistedChannels(channelsList) {
    const blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    return channelsList.filter(channel => !blacklist.includes(channel.url));
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
function renderChannels(channelsToRender) {
    channelsContainer.innerHTML = '';

    if (channelsToRender.length === 0 && initialLoader.style.display === 'none') {
        channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")}</div>`;
        return;
    }

    channelsToRender.forEach((channel, index) => {
        const groupIcon = getGroupIcon(channel.group);
        const channelCard = document.createElement('div');
        channelCard.className = 'channel-card';
        channelCard.setAttribute('tabindex', '0');
        channelCard.dataset.index = index;

        const mediaContainer = document.createElement('div');
        mediaContainer.className = 'channel-media';

        if (channel.logo) {
            const img = document.createElement('img');
            img.src = channel.logo;
            img.alt = channel.name;
            img.onerror = () => { img.style.display = 'none'; };
            mediaContainer.appendChild(img);
        }

        const icon = document.createElement('i');
        icon.className = `fas ${groupIcon}`;
        mediaContainer.appendChild(icon);

        const miniPlayer = createMiniPlayer(channel.url);
        mediaContainer.appendChild(miniPlayer);

        let viewsText = '';
        if (channel.views) {
            viewsText = ` üë• ${channel.views}`;
        }
        if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && channel.lastWatched) {
            const now = Date.now();
            if (now - channel.lastWatched < 600000) {
                viewsText += ` ‚ö°`;
            }
        }

        const infoContainer = document.createElement('div');
        infoContainer.className = 'channel-info';
        infoContainer.innerHTML = `<h3>${channel.name}${viewsText}</h3><p>${channel.group}</p>`;

        channelCard.appendChild(mediaContainer);
        channelCard.appendChild(infoContainer);

        channelCard.addEventListener('focus', function() {
            currentChannelIndex = parseInt(this.dataset.index);
            if (focusTimer) clearTimeout(focusTimer);

            if (currentMiniPlayer && currentMiniPlayer !== miniPlayer) {
                currentMiniPlayer.style.display = 'none';
                const prevIcon = currentMiniPlayer.parentElement.querySelector('i');
                if (prevIcon) prevIcon.style.display = 'block';
                const prevVideo = currentMiniPlayer.querySelector('video');
                if (prevVideo) prevVideo.pause();
            }

            miniPlayer.style.display = 'block';
            icon.style.display = 'none';
            currentMiniPlayer = miniPlayer;

            focusTimer = setTimeout(() => {
                const video = miniPlayer.querySelector('video');
                if (!video.dataset.initialized) {
                    initializeMiniPlayer(video, channel.url, miniPlayer, icon);
                } else if (video.paused) {
                    video.play().catch(e => console.log("Autoplay:", e));
                }
            }, 3000);
        });

        channelCard.addEventListener('blur', function() {
            if (focusTimer) clearTimeout(focusTimer);
            setTimeout(() => {
                if (!channelCard.contains(document.activeElement)) {
                    miniPlayer.style.display = 'none';
                    icon.style.display = 'block';
                    const video = miniPlayer.querySelector('video');
                    if (video) video.pause();
                }
            }, 100);
        });

        channelCard.addEventListener('click', () => openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo));
        channelCard.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
            }
        });

        channelsContainer.appendChild(channelCard);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function createMiniPlayer(url) {
    if (miniPlayers.has(url)) return miniPlayers.get(url);
    const container = document.createElement('div');
    container.className = 'mini-player';
    container.dataset.url = url;

    const video = document.createElement('video');
    video.muted = true;
    video.playsInline = true;
    video.loop = true;
    video.style.width = '100%';
    video.style.height = '100%';
    video.style.background = '#000';

    container.appendChild(video);
    miniPlayers.set(url, container);
    return container;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function initializeMiniPlayer(video, url, miniPlayer, icon) {
    video.dataset.initialized = 'true';
    let manifestLoaded = false;
    let networkErrorOccurred = false;

    const timeoutId = setTimeout(() => {
        if (!manifestLoaded && !networkErrorOccurred) {
            console.warn("–¢–∞–π–º–∞—É—Ç:", url);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        }
    }, 30000);

    if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(video);

        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(e => console.log("Autoplay:", e));
        });

        hls.on(Hls.Events.ERROR, (event, data) => {
            if (data.fatal && data.type === Hls.ErrorTypes.NETWORK_ERROR) {
                networkErrorOccurred = true;
                clearTimeout(timeoutId);
                handleStreamError(url, miniPlayer);
                addToBlacklist(url);
                miniPlayer.style.display = 'none';
                icon.style.display = 'block';
            }
        });
    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = url;
        video.addEventListener('loadedmetadata', () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(e => console.log("Autoplay:", e));
        });
        video.addEventListener('error', () => {
            clearTimeout(timeoutId);
            handleStreamError(url, miniPlayer);
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ—Ç–æ–∫–∞
function handleStreamError(url, container) {
    showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
    console.error("–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞:", url);
    const icon = container.parentElement.querySelector('i');
    if (icon) icon.style.display = 'block';
    container.style.display = 'none';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
function addToBlacklist(url) {
    let blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    if (!blacklist.includes(url)) {
        blacklist.push(url);
        localStorage.setItem('blacklist', JSON.stringify(blacklist));
    }
}

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞
function openFullScreenPlayer(name, url, group, logo) {
    currentWatchedChannel = { name, url, group, logo };
    watchStartTime = Date.now();

    playerModal.style.display = 'flex';
    videoPlayerElement.src = '';
    videoPlayerElement.load();
    videoPlayerElement.muted = false;

    let manifestLoaded = false;

    const timeoutId = setTimeout(() => {
        if (!manifestLoaded) {
            console.warn("–¢–∞–π–º–∞—É—Ç –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω:", url);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
            addToBlacklist(url);
            playerModal.style.display = 'none';
        }
    }, 30000);

    if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(videoPlayerElement);

        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(e => {
                console.log("Autoplay blocked:", e);
                showToast(translateText("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"));
            });
            setTimeout(() => requestNativeFullscreen(), 1000);
        });

        hls.on(Hls.Events.ERROR, (event, data) => {
            if (data.fatal) {
                clearTimeout(timeoutId);
                showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
                addToBlacklist(url);
                playerModal.style.display = 'none';
            }
        });
    } else if (videoPlayerElement.canPlayType('application/vnd.apple.mpegurl')) {
        videoPlayerElement.src = url;
        videoPlayerElement.addEventListener('loadedmetadata', () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(e => {
                console.log("Autoplay blocked:", e);
                showToast(translateText("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"));
            });
            setTimeout(() => requestNativeFullscreen(), 1000);
        });
        videoPlayerElement.addEventListener('error', () => {
            clearTimeout(timeoutId);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
            addToBlacklist(url);
            playerModal.style.display = 'none';
        });
    } else {
        clearTimeout(timeoutId);
        showToast(translateText('–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
        playerModal.style.display = 'none';
    }
}

// Fullscreen API
function requestNativeFullscreen() {
    const elem = videoPlayerElement;
    if (elem.requestFullscreen) {
        elem.requestFullscreen().catch(err => console.log("Fullscreen:", err));
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen().catch(err => console.log("Fullscreen:", err));
    }
}

// –ò–∫–æ–Ω–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
function getGroupIcon(group) {
    group = group.toLowerCase();
    if (group.includes('–Ω–æ–≤–æ—Å—Ç–∏')) return 'fa-newspaper';
    if (group.includes('—Å–ø–æ—Ä—Ç')) return 'fa-futbol';
    if (group.includes('–∫–∏–Ω–æ')) return 'fa-film';
    if (group.includes('–º—É–∑—ã–∫–∞')) return 'fa-music';
    if (group.includes('–¥–µ—Ç—Å–∫')) return 'fa-child';
    if (group.includes('–¥–æ–∫—É–º–µ–Ω—Ç')) return 'fa-video';
    if (group.includes('—Ä–∞–∑–≤–ª–µ—á')) return 'fa-theater-masks';
    return 'fa-tv';
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
function moveFocus(direction) {
    if (navigationState === 'channels') {
        const cards = document.querySelectorAll('.channel-card');
        if (cards.length === 0) return;
        const currentIndex = Array.from(cards).indexOf(document.activeElement);
        const cols = Math.floor(channelsContainer.offsetWidth / 280) || 1;
        let nextIndex = currentIndex;

        switch(direction) {
            case 'right': nextIndex = (currentIndex + 1) % cards.length; break;
            case 'left': nextIndex = (currentIndex - 1 + cards.length) % cards.length; break;
            case 'down': nextIndex = (currentIndex + cols) % cards.length; break;
            case 'up': {
                nextIndex = (currentIndex - cols + cards.length) % cards.length;
                if (nextIndex >= currentIndex) {
                    if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                        const input = document.getElementById('playlistURL');
                        if (input) {
                            input.focus();
                            navigationState = 'customInput';
                            return;
                        }
                    } else {
                        navigationState = 'subCategories';
                        subCategoriesPanel.style.display = 'flex';
                        setTimeout(() => {
                            const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                            if (buttons.length > 0) {
                                buttons[0].focus();
                                currentSubCategoryIndex = 0;
                            }
                        }, 100);
                        return;
                    }
                }
                break;
            }
        }

        if (nextIndex >= 0 && nextIndex < cards.length) {
            cards[nextIndex].focus();
        }
    } 
    else if (navigationState === 'mainCategories') {
        const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons.length === 0) return;
        let nextIndex = direction === 'right'
            ? (currentMainCategoryIndex + 1) % buttons.length
            : (currentMainCategoryIndex - 1 + buttons.length) % buttons.length;
        currentMainCategoryIndex = nextIndex;
        currentMainCategory = buttons[nextIndex].textContent;
        updateMainCategoryActive();
        buttons[nextIndex].focus();
    } 
    else if (navigationState === 'subCategories') {
        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
        if (buttons.length === 0) return;
        let nextIndex = direction === 'right'
            ? (currentSubCategoryIndex + 1) % buttons.length
            : (currentSubCategoryIndex - 1 + buttons.length) % buttons.length;
        currentSubCategoryIndex = nextIndex;
        currentSubcategory = buttons[nextIndex].textContent;
        updateSubCategoryActive();
        buttons[nextIndex].focus();
    }
    else if (navigationState === 'customInput') {
        const input = document.getElementById('playlistURL');
        const button = subCategoriesPanel.querySelector('button');
        if (!input || !button) return;

        if (direction === 'right') {
            button.focus();
        } else if (direction === 'left') {
            input.focus();
        } else if (direction === 'down') {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) {
                firstChannel.focus();
                navigationState = 'channels';
            }
        } else if (direction === 'up') {
            navigationState = 'mainCategories';
            mainCategoriesPanel.style.display = 'flex';
            setTimeout(() => {
                const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                if (buttons[currentMainCategoryIndex]) {
                    buttons[currentMainCategoryIndex].focus();
                }
            }, 100);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
document.addEventListener('keydown', function(e) {
    if (playerModal.style.display === 'flex') {
        if (e.key === 'Escape') closeModal.click();
        return;
    }

    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', 'Escape'].includes(e.key)) {
        e.preventDefault();
    }

    switch(e.key) {
        case 'ArrowLeft':
        case 'ArrowRight':
            moveFocus(e.key === 'ArrowRight' ? 'right' : 'left');
            break;
        case 'ArrowUp':
            if (navigationState === 'channels') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories' || navigationState === 'customInput') {
                navigationState = 'mainCategories';
                mainCategoriesPanel.style.display = 'flex';
                setTimeout(() => {
                    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                    if (buttons[currentMainCategoryIndex]) {
                        buttons[currentMainCategoryIndex].focus();
                    }
                }, 100);
            }
            break;
        case 'ArrowDown':
            if (navigationState === 'mainCategories') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories' || navigationState === 'customInput') {
                navigationState = 'channels';
                setTimeout(() => {
                    const firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                }, 100);
            }
            break;
        case 'Enter':
            if (navigationState === 'mainCategories') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                            currentSubcategory = buttons[0].textContent;
                            updateSubCategoryActive();
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories') {
                const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                if (buttons[currentSubCategoryIndex]) {
                    selectSubcategory(buttons[currentSubCategoryIndex].textContent, currentSubCategoryIndex);
                }
            } else if (navigationState === 'customInput') {
                const active = document.activeElement;
                if (active.id === 'playlistURL') {
                    loadPlaylistFromURL();
                } else if (active.tagName === 'BUTTON') {
                    active.click();
                }
            } else if (navigationState === 'channels' && document.activeElement.classList.contains('channel-card')) {
                const card = document.activeElement;
                const index = parseInt(card.dataset.index);
                let list;
                if (currentMainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
                    list = JSON.parse(localStorage.getItem('watchedChannels') || '[]');
                } else if (currentMainCategory === '–°–º–æ—Ç—Ä—è—Ç' || currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
                    const cards = document.querySelectorAll('.channel-card');
                    if (index >= 0 && index < cards.length) {
                        const channel = {
                            name: cards[index].querySelector('h3').textContent.replace(/ üë• \d+.*$/, ''),
                            url: cards[index].dataset.url || '',
                            group: cards[index].querySelector('p').textContent,
                            logo: ''
                        };
                        openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
                        return;
                    }
                } else if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    list = JSON.parse(localStorage.getItem('customPlaylist') || '[]');
                } else {
                    list = loadedPlaylists[categoryTree[currentMainCategory][currentSubcategory]] || [];
                }
                if (index >= 0 && index < list.length) {
                    const channel = list[index];
                    openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
                }
            }
            break;
        case 'Escape':
            if (navigationState === 'subCategories' || navigationState === 'customInput') {
                navigationState = 'mainCategories';
                setTimeout(() => {
                    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                    if (buttons[currentMainCategoryIndex]) {
                        buttons[currentMainCategoryIndex].focus();
                    }
                }, 100);
            } else if (navigationState === 'mainCategories') {
                navigationState = 'channels';
                setTimeout(() => {
                    const firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                }, 100);
            }
            break;
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    currentLanguage = localStorage.getItem('appLanguage') || 'ru';

    const safetyTimeout = setTimeout(() => {
        initialLoader.style.display = 'none';
        showToast(translateText("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"));
    }, 10000);

    try {
        currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
        renderMainCategories();
        renderSubCategories();
        loadAndRenderChannels(currentMainCategory, currentSubcategory);

        // üëá –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ Firebase —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
        const lastCleanup = localStorage.getItem('lastFirebaseCleanup');
        const now = Date.now();
        if (!lastCleanup || now - parseInt(lastCleanup) > 24 * 60 * 60 * 1000) {
            database.ref('watching').once('value', async (snapshot) => {
                if (snapshot.exists()) {
                    const updates = {};
                    const data = snapshot.val();
                    let deleted = 0;
                    for (let key in data) {
                        if (now - data[key].lastWatched > 24 * 60 * 60 * 1000) {
                            updates[key] = null;
                            deleted++;
                        }
                    }
                    if (Object.keys(updates).length > 0) {
                        await database.ref('watching').update(updates);
                        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleted} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ "–°–º–æ—Ç—Ä—è—Ç"`);
                    }
                }
            });
            localStorage.setItem('lastFirebaseCleanup', now.toString());
        }

        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
        }, 500);

        clearTimeout(safetyTimeout);
    } catch (error) {
        clearTimeout(safetyTimeout);
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        initialLoader.style.display = 'none';
        showToast(translateText("–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"));
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initApp();
});
