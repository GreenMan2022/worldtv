// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const channelsContainer = document.getElementById('channelsContainer');
const mainCategoriesPanel = document.getElementById('mainCategoriesPanel');
const subCategoriesPanel = document.getElementById('subCategoriesPanel');
const playerModal = document.getElementById('playerModal');
const videoPlayerElement = document.getElementById('videoPlayerElement');
const closeModal = document.getElementById('closeModal');
const initialLoader = document.getElementById('initialLoader');
const toastContainer = document.getElementById('toastContainer');

// üëá Firebase: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: "AIzaSyD9mAjCqyhJix9Tiyr-vQXWj-Mejysws44",
  authDomain: "tv-channels-watching.firebaseapp.com",
  databaseURL: "https://tv-channels-watching-default-rtdb.firebaseio.com",
  projectId: "tv-channels-watching",
  storageBucket: "tv-channels-watching.firebasestorage.app",
  messagingSenderId: "625169237639",
  appId: "1:625169237639:web:beeed9dc2d424aeb269a22",
  measurementId: "G-B1HFTLJ7BM"
};
const app = firebase.initializeApp(firebaseConfig);
const database = firebase.database();

// üëá –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
let currentLanguage = localStorage.getItem('appLanguage') || 'ru';

// üëá –§–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
let checkChannelsOnLoad = localStorage.getItem('checkChannelsOnLoad') === 'true';

// üëá –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const translations = {
    ru: {
        "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã": "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã",
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ",
        "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å",
        "–°–º–æ—Ç—Ä—è—Ç": "–°–º–æ—Ç—Ä—è—Ç",
        "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã",
        "–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é": "–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é",
        "–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!": "–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!",
        "–ü–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.": "–ü–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é",
        "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...": "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...",
        "–ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": "–ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        "–°—Ç—Ä–∞–Ω—ã": "–°—Ç—Ä–∞–Ω—ã",
        "–Ø–∑—ã–∫–∏": "–Ø–∑—ã–∫–∏",
        "–†–µ–≥–∏–æ–Ω—ã": "–†–µ–≥–∏–æ–Ω—ã",
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ",
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.": "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.",
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª",
        "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...",
        "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!": "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!",
        "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...",
        "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!": "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!",
        "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        "–ó–∞–≥—Ä—É–∑–∫–∞...": "–ó–∞–≥—Ä—É–∑–∫–∞...",
        "–ó–∞–≥—Ä—É–∑–∫–∞": "–ó–∞–≥—Ä—É–∑–∫–∞",
        "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏": "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç": "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
        "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω": "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è": "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!": "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!",
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É",
        "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π",
        "Language changed to English": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª": "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª",
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        "–ï—â–µ –æ–¥–∏–Ω!": "–ï—â–µ –æ–¥–∏–Ω!"
    },
  en: {
      "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã": "Check Channels",
      "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": "Watched",
      "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": "Watching Now",
      "–°–º–æ—Ç—Ä—è—Ç": "Most Watched",
      "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": "Custom Playlist",
      "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã": "User Playlists",
      "–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é": "Add to Public Collection",
      "–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!": "Playlist successfully added to public collection!",
      "–ü–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.": "Playlist already exists in the collection.",
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é": "Error adding playlist to collection",
      "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...": "Loading playlists...",
      "–ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": "Playlists not found",
      "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞": "Playlist Name",
      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞": "Enter a name for your playlist",
      "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": "Categories",
      "–°—Ç—Ä–∞–Ω—ã": "Countries",
      "–Ø–∑—ã–∫–∏": "Languages",
      "–†–µ–≥–∏–æ–Ω—ã": "Regions",
      "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ": "Load playlist from URL",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U": "M3U format supported",
      "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "Load Playlist",
      "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.": "Playlist is not loaded.",
      "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª": "Go to submenu and select 'Load from URL'",
      "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "No one in the world is watching yet...",
      "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!": "Turn on a channel for 60+ sec to be the first one here!",
      "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...": "No one is watching right now...",
      "–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!": "Turn on a channel to be the first!",
      "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": "Channels not found",
      "–ó–∞–≥—Ä—É–∑–∫–∞...": "Loading...",
      "–ó–∞–≥—Ä—É–∑–∫–∞": "Loading",
      "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏": "Initialization Error",
      "–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è": "Application Error",
      "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": "Save Error",
      "–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç": "Channel is not responding",
      "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω": "Channel is unavailable",
      "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è": "Click on video to play",
      "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è": "Format not supported",
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç": "Failed to load playlist",
      "–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!": "Playlist loaded!",
      "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É": "Enter URL",
      "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π": "Language changed to Russian",
      "Language changed to English": "Language changed to English",
      "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª": "Random Channel",
      "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª": "Failed to find an available channel",
      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ": "Please try again later",
      "–ï—â–µ –æ–¥–∏–Ω!": "Another one!"
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
function translateText(key) {
    return translations[currentLanguage][key] || key;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
let currentSubcategory = '';
let currentMainCategoryIndex = 0;
let currentSubCategoryIndex = 0;
let currentChannelIndex = 0;
let currentMiniPlayer = null;
let miniPlayers = new Map();
let focusTimer = null;
let loadedPlaylists = {};
let navigationState = 'channels';

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentWatchedChannel = null; // { name, url, group, logo }
let watchStartTime = null;        // timestamp –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞

// üëá –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç—ã–º –ø–æ –≤–∞—à–µ–π –ø—Ä–æ—Å—å–±–µ)
const categoryTree = {
  "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": {},
  "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å": {},
  "–°–º–æ—Ç—Ä—è—Ç": {},
  "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": {},
  "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã": {},
  "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª": {}, // <-- –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø
  "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": {
    "–ê–≤—Ç–æ": "https://iptv-org.github.io/iptv/categories/auto.m3u  ",
    "–ê–Ω–∏–º–∞—Ü–∏—è": "https://iptv-org.github.io/iptv/categories/animation.m3u  ",
    "–ë–∏–∑–Ω–µ—Å": "https://iptv-org.github.io/iptv/categories/business.m3u  ",
    "–î–µ—Ç—Å–∫–∏–µ": "https://iptv-org.github.io/iptv/categories/kids.m3u  ",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/documentary.m3u  ",
    "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/legislative.m3u  ",
    "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/interactive.m3u  ",
    "–ö–∏–Ω–æ": "https://iptv-org.github.io/iptv/categories/movies.m3u  ",
    "–ö–ª–∞—Å—Å–∏–∫–∞": "https://iptv-org.github.io/iptv/categories/classic.m3u  ",
    "–ö–æ–º–µ–¥–∏–∏": "https://iptv-org.github.io/iptv/categories/comedy.m3u  ",
    "–ö—É–ª–∏–Ω–∞—Ä–∏—è": "https://iptv-org.github.io/iptv/categories/cooking.m3u  ",
    "–ö—É–ª—å—Ç—É—Ä–∞": "https://iptv-org.github.io/iptv/categories/culture.m3u  ",
    "–ú—É–∑—ã–∫–∞": "https://iptv-org.github.io/iptv/categories/music.m3u  ",
    "–ù–∞—É–∫–∞": "https://iptv-org.github.io/iptv/categories/science.m3u  ",
    "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ": "https://iptv-org.github.io/iptv/categories/undefined.m3u  ",
    "–ù–æ–≤–æ—Å—Ç–∏": "https://iptv-org.github.io/iptv/categories/news.m3u  ",
    "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏": "https://iptv-org.github.io/iptv/categories/lifestyle.m3u  ",
    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "https://iptv-org.github.io/iptv/categories/education.m3u  ",
    "–û–±—â–∏–µ": "https://iptv-org.github.io/iptv/categories/general.m3u  ",
    "–ü–æ–≥–æ–¥–∞": "https://iptv-org.github.io/iptv/categories/weather.m3u  ",
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/categories/entertainment.m3u  ",
    "–†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/religious.m3u  ",
    "–†–µ–ª–∞–∫—Å": "https://iptv-org.github.io/iptv/categories/relax.m3u  ",
    "–°–µ–º–µ–π–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/family.m3u  ",
    "–°–µ—Ä–∏–∞–ª—ã": "https://iptv-org.github.io/iptv/categories/series.m3u  ",
    "–°–ø–æ—Ä—Ç": "https://iptv-org.github.io/iptv/categories/sports.m3u  ",
    "–®–æ–ø–∏–Ω–≥": "https://iptv-org.github.io/iptv/categories/shop.m3u  ",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "https://iptv-org.github.io/iptv/categories/travel.m3u  ",
    "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/public.m3u  ",
    "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö": "https://iptv-org.github.io/iptv/categories/outdoor.m3u  ",
    "XXX": "https://iptv-org.github.io/iptv/categories/xxx.m3u  "
  },
  "–°—Ç—Ä–∞–Ω—ã": {
    "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/au.m3u  ",
    "–ê–≤—Å—Ç—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/at.m3u  ",
    "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω": "https://iptv-org.github.io/iptv/countries/az.m3u  ",
    "–ê–ª–±–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/al.m3u  ",
    "–ê–ª–∂–∏—Ä": "https://iptv-org.github.io/iptv/countries/dz.m3u  ",
    "–ê–Ω–≥–æ–ª–∞": "https://iptv-org.github.io/iptv/countries/ao.m3u  ",
    "–ê–Ω–¥–æ—Ä—Ä–∞": "https://iptv-org.github.io/iptv/countries/ad.m3u  ",
    "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": "https://iptv-org.github.io/iptv/countries/ar.m3u  ",
    "–ê—Ä–º–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/am.m3u  ",
    "–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/af.m3u  ",
    "–ë–∞–≥–∞–º—ã": "https://iptv-org.github.io/iptv/countries/bs.m3u  ",
    "–ë–∞–Ω–≥–ª–∞–¥–µ—à": "https://iptv-org.github.io/iptv/countries/bd.m3u  ",
    "–ë–∞—Ä–±–∞–¥–æ—Å": "https://iptv-org.github.io/iptv/countries/bb.m3u  ",
    "–ë–∞—Ö—Ä–µ–π–Ω": "https://iptv-org.github.io/iptv/countries/bh.m3u  ",
    "–ë–µ–ª–∞—Ä—É—Å—å": "https://iptv-org.github.io/iptv/countries/by.m3u  ",
    "–ë–µ–ª–∏–∑": "https://iptv-org.github.io/iptv/countries/bz.m3u  ",
    "–ë–µ–Ω–∏–Ω": "https://iptv-org.github.io/iptv/countries/bj.m3u  ",
    "–ë–µ—Ä–º—É–¥—ã": "https://iptv-org.github.io/iptv/countries/bm.m3u  ",
    "–ë–æ–ª–≥–∞—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/bg.m3u  ",
    "–ë–æ–ª–∏–≤–∏—è": "https://iptv-org.github.io/iptv/countries/bo.m3u  ",
    "–ë–æ–Ω–∞–π—Ä–µ": "https://iptv-org.github.io/iptv/countries/bq.m3u  ",
    "–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞": "https://iptv-org.github.io/iptv/countries/ba.m3u  ",
    "–ë—Ä–∞–∑–∏–ª–∏—è": "https://iptv-org.github.io/iptv/countries/br.m3u  ",
    "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "https://iptv-org.github.io/iptv/countries/vg.m3u  ",
    "–ë—Ä—É–Ω–µ–π": "https://iptv-org.github.io/iptv/countries/bn.m3u  ",
    "–ë—É—Ä–∫–∏–Ω–∞-–§–∞—Å–æ": "https://iptv-org.github.io/iptv/countries/bf.m3u  ",
    "–ë—É—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/bt.m3u  ",
    "–í–∞—Ç–∏–∫–∞–Ω": "https://iptv-org.github.io/iptv/countries/va.m3u  ",
    "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/uk.m3u  ",
    "–í–µ–Ω–≥—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/hu.m3u  ",
    "–í–µ–Ω–µ—Å—É—ç–ª–∞": "https://iptv-org.github.io/iptv/countries/ve.m3u  ",
    "–í—å–µ—Ç–Ω–∞–º": "https://iptv-org.github.io/iptv/countries/vn.m3u  ",
    "–ì–∞–∏—Ç–∏": "https://iptv-org.github.io/iptv/countries/ht.m3u  ",
    "–ì–∞–π–∞–Ω–∞": "https://iptv-org.github.io/iptv/countries/gy.m3u  ",
    "–ì–∞–º–±–∏—è": "https://iptv-org.github.io/iptv/countries/gm.m3u  ",
    "–ì–∞–Ω–∞": "https://iptv-org.github.io/iptv/countries/gh.m3u  ",
    "–ì–≤–∞–¥–µ–ª—É–ø–∞": "https://iptv-org.github.io/iptv/countries/gp.m3u  ",
    "–ì–≤–∞—Ç–µ–º–∞–ª–∞": "https://iptv-org.github.io/iptv/countries/gt.m3u  ",
    "–ì–≤–∏–Ω–µ—è": "https://iptv-org.github.io/iptv/countries/gn.m3u  ",
    "–ì–µ—Ä–Ω—Å–∏": "https://iptv-org.github.io/iptv/countries/gg.m3u  ",
    "–ì–µ—Ä–º–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/de.m3u  ",
    "–ì–æ–Ω–¥—É—Ä–∞—Å": "https://iptv-org.github.io/iptv/countries/hn.m3u  ",
    "–ì–æ–Ω–∫–æ–Ω–≥": "https://iptv-org.github.io/iptv/countries/hk.m3u  ",
    "–ì—Ä–µ—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/gr.m3u  ",
    "–ì—Ä—É–∑–∏—è": "https://iptv-org.github.io/iptv/countries/ge.m3u  ",
    "–ì—É–∞–º": "https://iptv-org.github.io/iptv/countries/gu.m3u  ",
    "–î–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/dk.m3u  ",
    "–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ": "https://iptv-org.github.io/iptv/countries/cd.m3u  ",
    "–î–∂–∏–±—É—Ç–∏": "https://iptv-org.github.io/iptv/countries/dj.m3u  ",
    "–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/do.m3u  ",
    "–ï–≥–∏–ø–µ—Ç": "https://iptv-org.github.io/iptv/countries/eg.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–∞—è –°–∞—Ö–∞—Ä–∞": "https://iptv-org.github.io/iptv/countries/eh.m3u  ",
    "–ó–∏–º–±–∞–±–≤–µ": "https://iptv-org.github.io/iptv/countries/zw.m3u  ",
    "–ò–∑—Ä–∞–∏–ª—å": "https://iptv-org.github.io/iptv/countries/il.m3u  ",
    "–ò–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/in.m3u  ",
    "–ò–Ω–¥–æ–Ω–µ–∑–∏—è": "https://iptv-org.github.io/iptv/countries/id.m3u  ",
    "–ò–æ—Ä–¥–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/jo.m3u  ",
    "–ò—Ä–∞–∫": "https://iptv-org.github.io/iptv/countries/iq.m3u  ",
    "–ò—Ä–∞–Ω": "https://iptv-org.github.io/iptv/countries/ir.m3u  ",
    "–ò—Ä–ª–∞–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/ie.m3u  ",
    "–ò—Å–ª–∞–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/is.m3u  ",
    "–ò—Å–ø–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/es.m3u  ",
    "–ò—Ç–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/it.m3u  ",
    "–ô–µ–º–µ–Ω": "https://iptv-org.github.io/iptv/countries/ye.m3u  ",
    "–ö–∞–±–æ-–í–µ—Ä–¥–µ": "https://iptv-org.github.io/iptv/countries/cv.m3u  ",
    "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/kz.m3u  ",
    "–ö–∞–º–±–æ–¥–∂–∞": "https://iptv-org.github.io/iptv/countries/kh.m3u  ",
    "–ö–∞–º–µ—Ä—É–Ω": "https://iptv-org.github.io/iptv/countries/cm.m3u  ",
    "–ö–∞–Ω–∞–¥–∞": "https://iptv-org.github.io/iptv/countries/ca.m3u  ",
    "–ö–∞—Ç–∞—Ä": "https://iptv-org.github.io/iptv/countries/qa.m3u  ",
    "–ö–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/ke.m3u  ",
    "–ö–∏–ø—Ä": "https://iptv-org.github.io/iptv/countries/cy.m3u  ",
    "–ö–∏—Ä–≥–∏–∑–∏—è": "https://iptv-org.github.io/iptv/countries/kg.m3u  ",
    "–ö–∏—Ç–∞–π": "https://iptv-org.github.io/iptv/countries/cn.m3u  ",
    "–ö–æ–ª—É–º–±–∏—è": "https://iptv-org.github.io/iptv/countries/co.m3u  ",
    "–ö–æ–º–æ—Ä—ã": "https://iptv-org.github.io/iptv/countries/km.m3u  ",
    "–ö–æ–Ω–≥–æ": "https://iptv-org.github.io/iptv/countries/cg.m3u  ",
    "–ö–æ—Å–æ–≤–æ": "https://iptv-org.github.io/iptv/countries/xk.m3u  ",
    "–ö–æ—Å—Ç–∞-–†–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/cr.m3u  ",
    "–ö–æ—Ç-–¥'–ò–≤—É–∞—Ä": "https://iptv-org.github.io/iptv/countries/ci.m3u  ",
    "–ö—É–±–∞": "https://iptv-org.github.io/iptv/countries/cu.m3u  ",
    "–ö—É–≤–µ–π—Ç": "https://iptv-org.github.io/iptv/countries/kw.m3u  ",
    "–ö—é—Ä–∞—Å–∞–æ": "https://iptv-org.github.io/iptv/countries/cw.m3u  ",
    "–õ–∞–æ—Å": "https://iptv-org.github.io/iptv/countries/la.m3u  ",
    "–õ–∞—Ç–≤–∏—è": "https://iptv-org.github.io/iptv/countries/lv.m3u  ",
    "–õ–µ—Å–æ—Ç–æ": "https://iptv-org.github.io/iptv/countries/ls.m3u  ",
    "–õ–∏–≤–∞–Ω": "https://iptv-org.github.io/iptv/countries/lb.m3u  ",
    "–õ–∏–≤–∏—è": "https://iptv-org.github.io/iptv/countries/ly.m3u  ",
    "–õ–∏—Ç–≤–∞": "https://iptv-org.github.io/iptv/countries/lt.m3u  ",
    "–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω": "https://iptv-org.github.io/iptv/countries/li.m3u  ",
    "–õ—é–∫—Å–µ–º–±—É—Ä–≥": "https://iptv-org.github.io/iptv/countries/lu.m3u  ",
    "–ú–∞–≤—Ä–∏–∫–∏–π": "https://iptv-org.github.io/iptv/countries/mu.m3u  ",
    "–ú–∞–≤—Ä–∏—Ç–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/mr.m3u  ",
    "–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä": "https://iptv-org.github.io/iptv/countries/mg.m3u  ",
    "–ú–∞–∫–∞–æ": "https://iptv-org.github.io/iptv/countries/mo.m3u  ",
    "–ú–∞–ª–∞–≤–∏": "https://iptv-org.github.io/iptv/countries/mw.m3u  ",
    "–ú–∞–ª–∞–π–∑–∏—è": "https://iptv-org.github.io/iptv/countries/my.m3u  ",
    "–ú–∞–ª–∏": "https://iptv-org.github.io/iptv/countries/ml.m3u  ",
    "–ú–∞–ª—å–¥–∏–≤—ã": "https://iptv-org.github.io/iptv/countries/mv.m3u  ",
    "–ú–∞–ª—å—Ç–∞": "https://iptv-org.github.io/iptv/countries/mt.m3u  ",
    "–ú–∞—Ä–æ–∫–∫–æ": "https://iptv-org.github.io/iptv/countries/ma.m3u  ",
    "–ú–∞—Ä—Ç–∏–Ω–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/mq.m3u  ",
    "–ú–µ–∫—Å–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/mx.m3u  ",
    "–ú–æ–∑–∞–º–±–∏–∫": "https://iptv-org.github.io/iptv/countries/mz.m3u  ",
    "–ú–æ–ª–¥–æ–≤–∞": "https://iptv-org.github.io/iptv/countries/md.m3u  ",
    "–ú–æ–Ω–∞–∫–æ": "https://iptv-org.github.io/iptv/countries/mc.m3u  ",
    "–ú–æ–Ω–≥–æ–ª–∏—è": "https://iptv-org.github.io/iptv/countries/mn.m3u  ",
    "–ú—å—è–Ω–º–∞": "https://iptv-org.github.io/iptv/countries/mm.m3u  ",
    "–ù–∞–º–∏–±–∏—è": "https://iptv-org.github.io/iptv/countries/na.m3u  ",
    "–ù–µ–ø–∞–ª": "https://iptv-org.github.io/iptv/countries/np.m3u  ",
    "–ù–∏–≥–µ—Ä": "https://iptv-org.github.io/iptv/countries/ne.m3u  ",
    "–ù–∏–≥–µ—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/ng.m3u  ",
    "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": "https://iptv-org.github.io/iptv/countries/nl.m3u  ",
    "–ù–∏–∫–∞—Ä–∞–≥—É–∞": "https://iptv-org.github.io/iptv/countries/ni.m3u  ",
    "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/nz.m3u  ",
    "–ù–æ—Ä–≤–µ–≥–∏—è": "https://iptv-org.github.io/iptv/countries/no.m3u  ",
    "–û–ê–≠": "https://iptv-org.github.io/iptv/countries/ae.m3u  ",
    "–û–º–∞–Ω": "https://iptv-org.github.io/iptv/countries/om.m3u  ",
    "–ü–∞–∫–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/pk.m3u  ",
    "–ü–∞–ª–µ—Å—Ç–∏–Ω–∞": "https://iptv-org.github.io/iptv/countries/ps.m3u  ",
    "–ü–∞–Ω–∞–º–∞": "https://iptv-org.github.io/iptv/countries/pa.m3u  ",
    "–ü–∞–ø—É–∞ ‚Äî –ù–æ–≤–∞—è –ì–≤–∏–Ω–µ—è": "https://iptv-org.github.io/iptv/countries/pg.m3u  ",
    "–ü–∞—Ä–∞–≥–≤–∞–π": "https://iptv-org.github.io/iptv/countries/py.m3u  ",
    "–ü–µ—Ä—É": "https://iptv-org.github.io/iptv/countries/pe.m3u  ",
    "–ü–æ–ª—å—à–∞": "https://iptv-org.github.io/iptv/countries/pl.m3u  ",
    "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/pt.m3u  ",
    "–ü—É—ç—Ä—Ç–æ-–†–∏–∫–æ": "https://iptv-org.github.io/iptv/countries/pr.m3u  ",
    "–†–µ—é–Ω—å–æ–Ω": "https://iptv-org.github.io/iptv/countries/re.m3u  ",
    "–†–æ—Å—Å–∏—è": "https://iptv-org.github.io/iptv/countries/ru.m3u  ",
    "–†—É–∞–Ω–¥–∞": "https://iptv-org.github.io/iptv/countries/rw.m3u  ",
    "–†—É–º—ã–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/ro.m3u  ",
    "–°–∞–ª—å–≤–∞–¥–æ—Ä": "https://iptv-org.github.io/iptv/countries/sv.m3u  ",
    "–°–∞–º–æ–∞": "https://iptv-org.github.io/iptv/countries/ws.m3u  ",
    "–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ": "https://iptv-org.github.io/iptv/countries/sm.m3u  ",
    "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è": "https://iptv-org.github.io/iptv/countries/sa.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–µ—è": "https://iptv-org.github.io/iptv/countries/kp.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/mk.m3u  ",
    "–°–µ–Ω–µ–≥–∞–ª": "https://iptv-org.github.io/iptv/countries/sn.m3u  ",
    "–°–µ–Ω—Ç-–ö–∏—Ç—Å –∏ –ù–µ–≤–∏—Å": "https://iptv-org.github.io/iptv/countries/kn.m3u  ",
    "–°–µ–Ω—Ç-–õ—é—Å–∏—è": "https://iptv-org.github.io/iptv/countries/lc.m3u  ",
    "–°–µ—Ä–±–∏—è": "https://iptv-org.github.io/iptv/countries/rs.m3u  ",
    "–°–∏–Ω–≥–∞–ø—É—Ä": "https://iptv-org.github.io/iptv/countries/sg.m3u  ",
    "–°–∏–Ω—Ç-–ú–∞—Ä—Ç–µ–Ω": "https://iptv-org.github.io/iptv/countries/sx.m3u  ",
    "–°–∏—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/sy.m3u  ",
    "–°–ª–æ–≤–∞–∫–∏—è": "https://iptv-org.github.io/iptv/countries/sk.m3u  ",
    "–°–ª–æ–≤–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/si.m3u  ",
    "–°–æ–º–∞–ª–∏": "https://iptv-org.github.io/iptv/countries/so.m3u  ",
    "–°—É–¥–∞–Ω": "https://iptv-org.github.io/iptv/countries/sd.m3u  ",
    "–°—É—Ä–∏–Ω–∞–º": "https://iptv-org.github.io/iptv/countries/sr.m3u  ",
    "–°–®–ê": "https://iptv-org.github.io/iptv/countries/us.m3u  ",
    "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/tj.m3u  ",
    "–¢–∞–∏–ª–∞–Ω–¥": "https://iptv-org.github.io/iptv/countries/th.m3u  ",
    "–¢–∞–π–≤–∞–Ω—å": "https://iptv-org.github.io/iptv/countries/tw.m3u  ",
    "–¢–∞–Ω–∑–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/tz.m3u  ",
    "–¢–æ–≥–æ": "https://iptv-org.github.io/iptv/countries/tg.m3u  ",
    "–¢–æ–Ω–≥–∞": "https://iptv-org.github.io/iptv/countries/to.m3u  ",
    "–¢—Ä–∏–Ω–∏–¥–∞–¥ –∏ –¢–æ–±–∞–≥–æ": "https://iptv-org.github.io/iptv/countries/tt.m3u  ",
    "–¢—É–Ω–∏—Å": "https://iptv-org.github.io/iptv/countries/tn.m3u  ",
    "–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/tm.m3u  ",
    "–¢—É—Ä—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/tr.m3u  ",
    "–£–≥–∞–Ω–¥–∞": "https://iptv-org.github.io/iptv/countries/ug.m3u  ",
    "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω": "https://iptv-org.github.io/iptv/countries/uz.m3u  ",
    "–£–∫—Ä–∞–∏–Ω–∞": "https://iptv-org.github.io/iptv/countries/ua.m3u  ",
    "–£—Ä—É–≥–≤–∞–π": "https://iptv-org.github.io/iptv/countries/uy.m3u  ",
    "–§–∞—Ä–µ—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "https://iptv-org.github.io/iptv/countries/fo.m3u  ",
    "–§–∏–¥–∂–∏": "https://iptv-org.github.io/iptv/countries/fj.m3u  ",
    "–§–∏–ª–∏–ø–ø–∏–Ω—ã": "https://iptv-org.github.io/iptv/countries/ph.m3u  ",
    "–§–∏–Ω–ª—è–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/fi.m3u  ",
    "–§—Ä–∞–Ω—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/fr.m3u  ",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ü–æ–ª–∏–Ω–µ–∑–∏—è": "https://iptv-org.github.io/iptv/countries/pf.m3u  ",
    "–•–æ—Ä–≤–∞—Ç–∏—è": "https://iptv-org.github.io/iptv/countries/hr.m3u  ",
    "–ß–∞–¥": "https://iptv-org.github.io/iptv/countries/td.m3u  ",
    "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/me.m3u  ",
    "–ß–µ—Ö–∏—è": "https://iptv-org.github.io/iptv/countries/cz.m3u  ",
    "–ß–∏–ª–∏": "https://iptv-org.github.io/iptv/countries/cl.m3u  ",
    "–®–≤–µ–π—Ü–∞—Ä–∏—è": "https://iptv-org.github.io/iptv/countries/ch.m3u  ",
    "–®–≤–µ—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/se.m3u  ",
    "–®—Ä–∏-–õ–∞–Ω–∫–∞": "https://iptv-org.github.io/iptv/countries/lk.m3u  ",
    "–≠–∫–≤–∞–¥–æ—Ä": "https://iptv-org.github.io/iptv/countries/ec.m3u  ",
    "–≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ì–≤–∏–Ω–µ—è": "https://iptv-org.github.io/iptv/countries/gq.m3u  ",
    "–≠—Ä–∏—Ç—Ä–µ—è": "https://iptv-org.github.io/iptv/countries/er.m3u  ",
    "–≠—Å—Ç–æ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/ee.m3u  ",
    "–≠—Ñ–∏–æ–ø–∏—è": "https://iptv-org.github.io/iptv/countries/et.m3u  ",
    "–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/countries/za.m3u  ",
    "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è": "https://iptv-org.github.io/iptv/countries/kr.m3u  ",
    "–Ø–º–∞–π–∫–∞": "https://iptv-org.github.io/iptv/countries/jm.m3u  ",
    "–Ø–ø–æ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/jp.m3u  ",
    "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞": "https://iptv-org.github.io/iptv/countries/vi.m3u  ",
    "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ": "https://iptv-org.github.io/iptv/countries/int.m3u  ",
    "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ": "https://iptv-org.github.io/iptv/countries/undefined.m3u  "
  },
  "–Ø–∑—ã–∫–∏": {
    "–ê–∫–æ–ª–∏": "https://iptv-org.github.io/iptv/languages/ach.m3u  ",
    "–ê–¥—Ö–æ–ª–∞": "https://iptv-org.github.io/iptv/languages/adh.m3u  ",
    "–ê–π–∏–∑–æ –≥–±–µ": "https://iptv-org.github.io/iptv/languages/ayb.m3u  ",
    "–ê–π–º–∞—Ä–∞": "https://iptv-org.github.io/iptv/languages/aym.m3u  ",
    "–ê–ª–±–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/sqi.m3u  ",
    "–ê–ª–∂–∏—Ä—Å–∫–∏–π –∂–µ—Å—Ç–æ–≤—ã–π": "https://iptv-org.github.io/iptv/languages/asp.m3u  ",
    "–ê–ª—É—Ä": "https://iptv-org.github.io/iptv/languages/alz.m3u  ",
    "–ê–º—Ö–∞—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/amh.m3u  ",
    "–ê—Ä–∞–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ara.m3u  ",
    "–ê—Ä–º—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hye.m3u  ",
    "–ê—Å—Å–∞–º—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/asm.m3u  ",
    "–ê—Å—Å–∏—Ä–∏–π—Å–∫–∏–π –Ω–µ–æ–∞—Ä–∞–º–µ–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/aii.m3u  ",
    "–ê—Ñ–∞—Ä": "https://iptv-org.github.io/iptv/languages/aar.m3u  ",
    "–ê—Ñ—Ä–∏–∫–∞–∞–Ω—Å": "https://iptv-org.github.io/iptv/languages/afr.m3u  ",
    "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/aze.m3u  ",
    "–ë–∞–∞—Ç–æ–Ω—É–º": "https://iptv-org.github.io/iptv/languages/bba.m3u  ",
    "–ë–∞–º–±–∞—Ä–∞": "https://iptv-org.github.io/iptv/languages/bam.m3u  ",
    "–ë–∞—Å–∫—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/eus.m3u  ",
    "–ë–∞—à–∫–∏—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bak.m3u  ",
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bel.m3u  ",
    "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ben.m3u  ",
    "–ë–∏—Ä–º–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/mya.m3u  ",
    "–ë–æ–¥–∂–ø—É—Ä–∏": "https://iptv-org.github.io/iptv/languages/bho.m3u  ",
    "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bul.m3u  ",
    "–ë–æ—Å–Ω–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bos.m3u  ",
    "–í–∞–ª–ª–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/cym.m3u  ",
    "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hun.m3u  ",
    "–í–µ–Ω–¥–∞": "https://iptv-org.github.io/iptv/languages/ven.m3u  ",
    "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/vie.m3u  ",
    "–ì–∞–Ω–¥–∞": "https://iptv-org.github.io/iptv/languages/lug.m3u  ",
    "–ì–∞–∏—Ç—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hat.m3u  ",
    "–ì–µ–Ω": "https://iptv-org.github.io/iptv/languages/gej.m3u  ",
    "–ì–∏–∫—É—é": "https://iptv-org.github.io/iptv/languages/kik.m3u  ",
    "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/nld.m3u  ",
    "–ì–æ–∞–Ω –ö–æ–Ω–∫–∞–Ω–∏": "https://iptv-org.github.io/iptv/languages/gom.m3u  ",
    "–ì—Ä–µ—á–µ—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ell.m3u  ",
    "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kat.m3u  ",
    "–ì—É–¥–∂–∞—Ä–∞—Ç–∏": "https://iptv-org.github.io/iptv/languages/guj.m3u  ",
    "–ì—É–Ω": "https://iptv-org.github.io/iptv/languages/guw.m3u  ",
    "–ì—ç–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/gla.m3u  ",
    "–î–∞—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/dan.m3u  ",
    "–î–∞—Ä–∏ (–ü–∞—Ä—Å–∏)": "https://iptv-org.github.io/iptv/languages/prd.m3u  ",
    "–î–µ–Ω–¥–∏ (–ë–µ–Ω–∏–Ω)": "https://iptv-org.github.io/iptv/languages/ddn.m3u  ",
    "–î–∏–≤–µ—Ö–∏": "https://iptv-org.github.io/iptv/languages/div.m3u  ",
    "–î—Ö–∞–Ω–≤–∞—Ä (–ù–µ–ø–∞–ª)": "https://iptv-org.github.io/iptv/languages/dhw.m3u  ",
    "–î—Ö–æ–ª—É–æ": "https://iptv-org.github.io/iptv/languages/luo.m3u  ",
    "–î–∏–º–∏–ª–∏": "https://iptv-org.github.io/iptv/languages/zza.m3u  ",
    "–î—å—é–ª–∞": "https://iptv-org.github.io/iptv/languages/dyu.m3u  ",
    "–ï–≥–∏–ø–µ—Ç—Å–∫–∏–π –∞—Ä–∞–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/arz.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–æ-—Ñ—Ä–∏–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fry.m3u  ",
    "–ó–∞—Ä–º–∞": "https://iptv-org.github.io/iptv/languages/dje.m3u  ",
    "–ó—É–ª—É": "https://iptv-org.github.io/iptv/languages/zul.m3u  ",
    "–ò–≤—Ä–∏—Ç": "https://iptv-org.github.io/iptv/languages/heb.m3u  ",
    "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ind.m3u  ",
    "–ò–Ω—É–∫—Ç–∏—Ç—É—Ç": "https://iptv-org.github.io/iptv/languages/iku.m3u  ",
    "–ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/gle.m3u  ",
    "–ò—Å–µ–∫–∏—Ä–∏": "https://iptv-org.github.io/iptv/languages/its.m3u  ",
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/spa.m3u  ",
    "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ita.m3u  ",
    "–ö–∞–±–∏–π–µ": "https://iptv-org.github.io/iptv/languages/kbp.m3u  ",
    "–ö–∞–±–∏–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kab.m3u  ",
    "–ö–∞–Ω–Ω–∞–¥–∞": "https://iptv-org.github.io/iptv/languages/kan.m3u  ",
    "–ö–∞–ø–∞–º–ø–∞–Ω–≥–∞–Ω": "https://iptv-org.github.io/iptv/languages/pam.m3u  ",
    "–ö–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/cat.m3u  ",
    "–ö–∞–∑–∞—Ö—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kaz.m3u  ",
    "–ö–µ—á—É–∞": "https://iptv-org.github.io/iptv/languages/que.m3u  ",
    "–ö–∏–Ω—å—è—Ä—É–∞–Ω–¥–∞": "https://iptv-org.github.io/iptv/languages/kin.m3u  ",
    "–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kir.m3u  ",
    "–ö–∏—Ç—É–±–∞ (–ö–æ–Ω–≥–æ)": "https://iptv-org.github.io/iptv/languages/mkw.m3u  ",
    "–ö–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/zho.m3u  ",
    "–ö–æ–Ω–≥–æ": "https://iptv-org.github.io/iptv/languages/kon.m3u  ",
    "–ö–æ–Ω–∫–∞–Ω–∏ (–º–∞–∫—Ä–æ—è–∑—ã–∫)": "https://iptv-org.github.io/iptv/languages/kok.m3u  ",
    "–ö–æ—Ä–µ–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kor.m3u  ",
    "–ö—É–º–∞–º": "https://iptv-org.github.io/iptv/languages/kdi.m3u  ",
    "–ö—É—Ä–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kur.m3u  ",
    "–õ–∞–Ω–≥–æ (–£–≥–∞–Ω–¥–∞)": "https://iptv-org.github.io/iptv/languages/laj.m3u  ",
    "–õ–∞—Ç–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/lat.m3u  ",
    "–õ–∞–æ—Å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/lao.m3u  ",
    "–õ–∞—Ç—ã—à—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/lav.m3u  ",
    "–õ–∏–Ω–≥–∞–ª–∞": "https://iptv-org.github.io/iptv/languages/lin.m3u  ",
    "–õ–∏—Ç–æ–≤—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/lit.m3u  ",
    "–õ—É–±–∞-–õ—É–ª—É–∞": "https://iptv-org.github.io/iptv/languages/lua.m3u  ",
    "–õ—É—à–∞–π": "https://iptv-org.github.io/iptv/languages/lus.m3u  ",
    "–õ—é–∫—Å–µ–º–±—É—Ä–≥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ltz.m3u  ",
    "–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/mkd.m3u  ",
    "–ú–∞–ª–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/msa.m3u  ",
    "–ú–∞–ª–∞—è–ª–∞–º": "https://iptv-org.github.io/iptv/languages/mal.m3u  ",
    "–ú–∞–ª—å—Ç–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/mlt.m3u  ",
    "–ú–∞–Ω–¥–∞—Ä–∏–Ω –∫–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/cmn.m3u  ",
    "–ú–∞–Ω–¥–∏–Ω–∫–∞": "https://iptv-org.github.io/iptv/languages/mnk.m3u  ",
    "–ú–∞–æ—Ä–∏": "https://iptv-org.github.io/iptv/languages/mri.m3u  ",
    "–ú–∞—Ä–∞—Ç—Ö–∏": "https://iptv-org.github.io/iptv/languages/mar.m3u  ",
    "–ú–∏–∫–µ–Ω—Å–∫–∏–π –≥—Ä–µ—á–µ—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/gmy.m3u  ",
    "–ú–∏–Ω—å –ù–∞–Ω—å –∫–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/nan.m3u  ",
    "–ú–æ–Ω–≥–æ–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/mon.m3u  ",
    "–ú–æ—Ä–∏—Å—å–µ–Ω": "https://iptv-org.github.io/iptv/languages/mfe.m3u  ",
    "–ú–æ—Å—Å–∏": "https://iptv-org.github.io/iptv/languages/mos.m3u  ",
    "–ù–µ–º–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/deu.m3u  ",
    "–ù–µ–ø–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/nep.m3u  ",
    "–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/nor.m3u  ",
    "–ù—å—è–Ω–∫–æ–ª–µ": "https://iptv-org.github.io/iptv/languages/nyn.m3u  ",
    "–ù—å–æ—Ä–æ": "https://iptv-org.github.io/iptv/languages/nyo.m3u  ",
    "–û—Ä–∏—è (–º–∞–∫—Ä–æ—è–∑—ã–∫)": "https://iptv-org.github.io/iptv/languages/ori.m3u  ",
    "–ü–∞–Ω–¥–∂–∞–±–∏": "https://iptv-org.github.io/iptv/languages/pan.m3u  ",
    "–ü–∞–ø—å—è–º–µ–Ω—Ç–æ": "https://iptv-org.github.io/iptv/languages/pap.m3u  ",
    "–ü–µ—Ä—Å–∏–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fas.m3u  ",
    "–ü–æ–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/pol.m3u  ",
    "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/por.m3u  ",
    "–ü—É–ª–∞–∞—Ä": "https://iptv-org.github.io/iptv/languages/fuc.m3u  ",
    "–ü—É—à—Ç—É": "https://iptv-org.github.io/iptv/languages/pus.m3u  ",
    "–†—É–º—ã–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ron.m3u  ",
    "–†—É—Å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/rus.m3u  ",
    "–°–∞–º–æ–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/smo.m3u  ",
    "–°–∞–Ω—Ç–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/sat.m3u  ",
    "–°–µ–Ω—Ç-–õ—é—Å–∏–π—Å–∫–∏–π –∫—Ä–µ–æ–ª—å—Å–∫–∏–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/acf.m3u  ",
    "–°–µ—Ä–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/srp.m3u  ",
    "–°–µ—Ä–±–æ-—Ö–æ—Ä–≤–∞—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hbs.m3u  ",
    "–°–∏–Ω–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/sin.m3u  ",
    "–°–ª–æ–≤–∞—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/slk.m3u  ",
    "–°–ª–æ–≤–µ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/slv.m3u  ",
    "–°–æ–º–∞–ª–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/som.m3u  ",
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞—Ä–∞–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/arb.m3u  ",
    "–°—É–∞—Ö–∏–ª–∏": "https://iptv-org.github.io/iptv/languages/swa.m3u  ",
    "–°–≤–∞—Ç–∏": "https://iptv-org.github.io/iptv/languages/ssw.m3u  ",
    "–°–®–ê": "https://iptv-org.github.io/iptv/languages/eng.m3u  ",
    "–¢–∞–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tgl.m3u  ",
    "–¢–∞–¥–∂–∏–∫—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tgk.m3u  ",
    "–¢–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tha.m3u  ",
    "–¢–∞–º–∏–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tam.m3u  ",
    "–¢–∞—Ç–∞—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tat.m3u  ",
    "–¢–∞—á–∞–≤–∏—Ç": "https://iptv-org.github.io/iptv/languages/shy.m3u  ",
    "–¢–∞—à–µ–ª—Ö–∏—Ç": "https://iptv-org.github.io/iptv/languages/shi.m3u  ",
    "–¢–∞–∏—Ç—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tah.m3u  ",
    "–¢–µ–ª—É–≥—É": "https://iptv-org.github.io/iptv/languages/tel.m3u  ",
    "–¢–∏–≥—Ä–µ": "https://iptv-org.github.io/iptv/languages/tig.m3u  ",
    "–¢–∏–≥—Ä–∏–Ω—å—è": "https://iptv-org.github.io/iptv/languages/tir.m3u  ",
    "–¢–∏–±–µ—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/bod.m3u  ",
    "–¢–æ—Ä": "https://iptv-org.github.io/iptv/languages/ttj.m3u  ",
    "–¢—É–º–∑–∞–±—Ç": "https://iptv-org.github.io/iptv/languages/mzb.m3u  ",
    "–¢—É—Ä–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tur.m3u  ",
    "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tuk.m3u  ",
    "–£–∑–±–µ–∫—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/uzb.m3u  ",
    "–£–π–≥—É—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/uig.m3u  ",
    "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ukr.m3u  ",
    "–£—Ä–¥—É": "https://iptv-org.github.io/iptv/languages/urd.m3u  ",
    "–§–∞—Ä–µ—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fao.m3u  ",
    "–§–∞—Ç–∞–ª–∏–∫–∞": "https://iptv-org.github.io/iptv/languages/far.m3u  ",
    "–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fil.m3u  ",
    "–§–∏–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fin.m3u  ",
    "–§–æ–Ω": "https://iptv-org.github.io/iptv/languages/fon.m3u  ",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fra.m3u  ",
    "–§—É–ª–∞—Ö": "https://iptv-org.github.io/iptv/languages/ful.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ç–ª–∞—Å —Ç–∞–º–∞–∑–∏–≥—Ö—Ç": "https://iptv-org.github.io/iptv/languages/tzm.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—É—Ä–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ckb.m3u  ",
    "–ß–µ–Ω—É–∞": "https://iptv-org.github.io/iptv/languages/cnu.m3u  ",
    "–ß–µ—à—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ces.m3u  ",
    "–ß–∏–≥–∞": "https://iptv-org.github.io/iptv/languages/cgg.m3u  ",
    "–ß—Ö–∞—Ç—Ç–∏—Å–≥–∞—Ä—Ö–∏": "https://iptv-org.github.io/iptv/languages/hne.m3u  ",
    "–•–∞—É—Å–∞": "https://iptv-org.github.io/iptv/languages/hau.m3u  ",
    "–•–∏–Ω–¥–∏": "https://iptv-org.github.io/iptv/languages/hin.m3u  ",
    "–•–º–æ–Ω–≥": "https://iptv-org.github.io/iptv/languages/hmn.m3u  ",
    "–•–æ—Ä–∞—Å–∞–Ω–∏-—Ç—É—Ä–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kmz.m3u  ",
    "–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/hrv.m3u  ",
    "–¶–æ–Ω–≥–∞": "https://iptv-org.github.io/iptv/languages/tso.m3u  ",
    "–ß–µ—Ä–Ω–æ–≥–æ—Ä—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/cnr.m3u  ",
    "–®–≤–µ–¥—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/swe.m3u  ",
    "–≠–≤–µ": "https://iptv-org.github.io/iptv/languages/ewe.m3u  ",
    "–≠—Å—Ç–æ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/est.m3u  ",
    "–Ø–≤–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/jav.m3u  ",
    "–Ø–∫—É—Ç—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/sah.m3u  ",
    "–Ø–ø–æ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/jpn.m3u  ",
    "–ô–æ—Ä—É–±–∞": "https://iptv-org.github.io/iptv/languages/yor.m3u  ",
    "–Æ–∫–∞—Ç–µ–∫ –ú–∞–π—è": "https://iptv-org.github.io/iptv/languages/yua.m3u  ",
    "–Æ—ç –∫–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/yue.m3u  ",
    "–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∂–µ—Å—Ç–æ–≤—ã–π": "https://iptv-org.github.io/iptv/languages/sfs.m3u  ",
    "–Æ–∂–Ω—ã–π –Ω–¥–µ–±–µ–ª–µ": "https://iptv-org.github.io/iptv/languages/nbl.m3u  ",
    "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ": "https://iptv-org.github.io/iptv/languages/undefined.m3u  "
  },
  "–†–µ–≥–∏–æ–Ω—ã": {
    "–ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/asia.m3u  ",
    "–ê–∑–∏–∞—Ç—Å–∫–æ-–¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω": "https://iptv-org.github.io/iptv/regions/apac.m3u  ",
    "–ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/amer.m3u  ",
    "–ê—Ä–∞–±—Å–∫–∏–π –º–∏—Ä": "https://iptv-org.github.io/iptv/regions/arab.m3u  ",
    "–ê–°–ï–ê–ù": "https://iptv-org.github.io/iptv/regions/asean.m3u  ",
    "–ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/afr.m3u  ",
    "–ê—Ñ—Ä–∏–∫–∞ –∫ —é–≥—É –æ—Ç –°–∞—Ö–∞—Ä—ã": "https://iptv-org.github.io/iptv/regions/ssa.m3u  ",
    "–ë–∞–ª–∫–∞–Ω—ã": "https://iptv-org.github.io/iptv/regions/balkan.m3u  ",
    "–ë–µ–Ω–∏–ª—é–∫—Å": "https://iptv-org.github.io/iptv/regions/benelux.m3u  ",
    "–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫": "https://iptv-org.github.io/iptv/regions/mideast.m3u  ",
    "–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫ –∏ –°–µ–≤–µ—Ä–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/mena.m3u  ",
    "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/eas.m3u  ",
    "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/eaf.m3u  ",
    "–í—Å–µ–º–∏—Ä–Ω—ã–π": "https://iptv-org.github.io/iptv/regions/ww.m3u  ",
    "–ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/eur.m3u  ",
    "–ï–≤—Ä–æ–ø–∞, –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫ –∏ –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/emea.m3u  ",
    "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Å–æ—é–∑": "https://iptv-org.github.io/iptv/regions/eu.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/was.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/waf.m3u  ",
    "–ó–∞–ø–∞–¥–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/wer.m3u  ",
    "–ö–∞—Ä–∏–±—ã": "https://iptv-org.github.io/iptv/regions/carib.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/cas.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/cenamer.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/ceu.m3u  ",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏ –í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/cee.m3u  ",
    "–ò—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/hispam.m3u  ",
    "–õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/latam.m3u  ",
    "–õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞ –∏ –ö–∞—Ä–∏–±—ã": "https://iptv-org.github.io/iptv/regions/lac.m3u  ",
    "–ú–∞–≥—Ä–∏–±": "https://iptv-org.github.io/iptv/regions/maghreb.m3u  ",
    "–û–∫–µ–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/regions/oce.m3u  ",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –ù–∞—Ü–∏–π": "https://iptv-org.github.io/iptv/regions/un.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/noram.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ (–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç)": "https://iptv-org.github.io/iptv/regions/nam.m3u  ",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/neu.m3u  ",
    "–°—Ç—Ä–∞–Ω—ã –°–µ–≤–µ—Ä–Ω–æ–π –ï–≤—Ä–æ–ø—ã": "https://iptv-org.github.io/iptv/regions/nord.m3u  ",
    "–°–æ–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–∞–±—Å–∫–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –ü–µ—Ä—Å–∏–¥—Å–∫–æ–≥–æ –∑–∞–ª–∏–≤–∞": "https://iptv-org.github.io/iptv/regions/gcc.m3u  ",
    "–°–ù–ì": "https://iptv-org.github.io/iptv/regions/cis.m3u  ",
    "–Æ–∂–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/sas.m3u  ",
    "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/southam.m3u  ",
    "–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞": "https://iptv-org.github.io/iptv/regions/saf.m3u  ",
    "–Æ–∂–Ω–∞—è –ï–≤—Ä–æ–ø–∞": "https://iptv-org.github.io/iptv/regions/ser.m3u  ",
    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è": "https://iptv-org.github.io/iptv/regions/sea.m3u  "
  }
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
closeModal.addEventListener('click', function() {
    playerModal.style.display = 'none';
    videoPlayerElement.pause();
    videoPlayerElement.src = '';
    if (currentWatchedChannel && watchStartTime) {
        const watchedSeconds = Math.floor((Date.now() - watchStartTime) / 1000);
        console.log(`üì∫ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${watchedSeconds} —Å–µ–∫—É–Ω–¥`);
        if (watchedSeconds >= 60) {
            addToWatched(
                currentWatchedChannel.name,
                currentWatchedChannel.url,
                currentWatchedChannel.group,
                currentWatchedChannel.logo
            );
            addToWatching(
                currentWatchedChannel.name,
                currentWatchedChannel.url,
                currentWatchedChannel.group,
                currentWatchedChannel.logo
            );
        }
        currentWatchedChannel = null;
        watchStartTime = null;
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    toastContainer.appendChild(toast);
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ localStorage
function addToWatched(name, url, group, logo) {
    let watched;
    try {
        const raw = localStorage.getItem('watchedChannels');
        watched = raw ? JSON.parse(raw) : [];
        if (!Array.isArray(watched)) {
            console.warn('‚ö†Ô∏è watchedChannels –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî —Å–±—Ä–æ—Å');
            watched = [];
        }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ watchedChannels:', e);
        watched = [];
    }
    if (watched.some(item => item.url === url)) {
        console.log(`‚ÑπÔ∏è –ö–∞–Ω–∞–ª "${name}" —É–∂–µ –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"`);
        return;
    }
    watched.push({ name, url, group, logo });
    try {
        localStorage.setItem('watchedChannels', JSON.stringify(watched));
        console.log(`‚úÖ –ö–∞–Ω–∞–ª "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"`);
    } catch (e) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
        showToast(translateText('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'));
        return;
    }
    if (currentMainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
        loadAndRenderChannels('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ', '');
    }
}

// üëá –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π "–°–º–æ—Ç—Ä—è—Ç" (Firebase)
async function addToWatching(name, url, group, logo) {
    try {
        const now = Date.now();
        const key = url.replace(/[^a-zA-Z0-9]/g, '_').substring(0, 100);
        const snapshot = await database.ref('watching/' + key).get();
        let data = snapshot.exists() ? snapshot.val() : {
            name,
            url,
            group,
            logo,
            views: 0,
            lastWatched: 0,
            createdAt: now
        };
        data.views = (data.views || 0) + 1;
        data.lastWatched = now;
        data.name = name;
        data.logo = logo;
        await database.ref('watching/' + key).set(data);
        console.log(`üåç –ì–ª–æ–±–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–°–º–æ—Ç—Ä—è—Ç": ${name}`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ Firebase addToWatching:", error);
    }
}

// üëá –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø–æ URL (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–ø—Ü–∏–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é)
async function loadPlaylistFromURL() {
    const urlInput = document.getElementById('playlistURL');
    const url = urlInput.value.trim();
    if (!url) {
        showToast(translateText('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É'));
        urlInput.focus();
        return;
    }
    initialLoader.style.display = 'flex';
    try {
        const content = await fetchM3U(url);
        const channels = parseM3UContent(content, translateText('–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç'));
        if (channels.length === 0) {
            throw new Error('–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        localStorage.setItem('customPlaylist', JSON.stringify(channels));
        showToast(translateText('–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!'));

        // üëá –ù–û–í–û–ï: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        if (confirm(translateText('–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é') + '? ' + translateText('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞') + ': ' + extractPlaylistName(url))) {
            await addToPublicPlaylists(url, extractPlaylistName(url), channels.length);
        }

        renderChannels(channels);
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
            navigationState = 'channels';
        }, 100);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ URL:', err);
        showToast(translateText('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç'));
    } finally {
        initialLoader.style.display = 'none';
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ URL
function extractPlaylistName(url) {
    try {
        const decoded = decodeURIComponent(url);
        const parts = decoded.split('/');
        let name = parts[parts.length - 1].split('?')[0].split('#')[0];
        if (name.endsWith('.m3u') || name.endsWith('.m3u8')) {
            name = name.substring(0, name.lastIndexOf('.'));
        }
        return name || 'Custom Playlist';
    } catch (e) {
        return 'Custom Playlist';
    }
}

// üëá –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ Firebase
async function addToPublicPlaylists(url, name, channelCount) {
    try {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
        const key = url.replace(/[^a-zA-Z0-9]/g, '_').substring(0, 100);
        const now = Date.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
        const snapshot = await database.ref('publicPlaylists/' + key).get();
        if (snapshot.exists()) {
            showToast(translateText('–ü–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.'));
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await database.ref('publicPlaylists/' + key).set({
            name: name,
            url: url,
            channelCount: channelCount,
            addedAt: now,
            addedBy: 'anonymous'
        });

        showToast(translateText('–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!'));
        console.log(`‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é:", error);
        showToast(translateText('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é'));
    }
}

// üëá –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é –¥–ª—è "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç"
function renderCustomPlaylistSubmenu() {
    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'flex';
    const wrapper = document.createElement('div');
    wrapper.style.display = 'flex';
    wrapper.style.gap = '10px';
    wrapper.style.alignItems = 'center';
    wrapper.style.padding = '0 10px';
    const input = document.createElement('input');
    input.id = 'playlistURL';
    input.type = 'text';
    input.placeholder = 'https://example.com/playlist.m3u';
    input.style.padding = '8px 12px';
    input.style.borderRadius = '6px';
    input.style.border = '1px solid #444';
    input.style.background = '#222';
    input.style.color = 'white';
    input.style.fontSize = '13px';
    input.setAttribute('tabindex', '0');
    const button = document.createElement('button');
    button.textContent = translateText('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç');
    button.style.padding = '8px 16px';
    button.style.borderRadius = '6px';
    button.style.border = 'none';
    button.style.background = 'linear-gradient(90deg, #ff375f, #ff5e41)';
    button.style.color = 'white';
    button.style.cursor = 'pointer';
    button.style.fontSize = '13px';
    button.setAttribute('tabindex', '0');
    button.addEventListener('click', loadPlaylistFromURL);
    button.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.click();
        }
    });
    input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            loadPlaylistFromURL();
        }
    });
    wrapper.appendChild(input);
    wrapper.appendChild(button);
    subCategoriesPanel.appendChild(wrapper);
    setTimeout(() => {
        input.focus();
        navigationState = 'customInput';
    }, 100);
}

// üëá –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
function setLanguage(lang) {
    currentLanguage = lang;
    localStorage.setItem('appLanguage', lang);
    const flags = mainCategoriesPanel.querySelectorAll('.category-btn');
    flags.forEach(flag => {
        if (flag.textContent === 'üá∑üá∫') {
            flag.classList.toggle('active', lang === 'ru');
        } else if (flag.textContent === 'üá¨üáß') {
            flag.classList.toggle('active', lang === 'en');
        }
    });
    renderMainCategories();
    renderSubCategories();
    loadAndRenderChannels(currentMainCategory, currentSubcategory);
    showToast(translateText(lang === 'ru' ? "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π" : "Language changed to English"));
}

// üëá –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
function toggleChannelCheck() {
    checkChannelsOnLoad = !checkChannelsOnLoad;
    localStorage.setItem('checkChannelsOnLoad', checkChannelsOnLoad);
    const flags = mainCategoriesPanel.querySelectorAll('.category-btn');
    flags.forEach(flag => {
        if (flag.textContent.includes(translateText('–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã'))) {
            flag.textContent = checkChannelsOnLoad ? '‚úÖ ' + translateText('–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã') : 'üî≤ ' + translateText('–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã');
            flag.classList.toggle('active', checkChannelsOnLoad);
        }
    });
    showToast(checkChannelsOnLoad ? 
        translateText("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞") : 
        translateText("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    );
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π + —Ñ–ª–∞–≥–∏ —è–∑—ã–∫–∞
function renderMainCategories() {
    mainCategoriesPanel.innerHTML = '';
    const mainCategories = Object.keys(categoryTree);
    mainCategories.forEach((cat, index) => {
        const btn = document.createElement('button');
        btn.className = 'category-btn';
        btn.textContent = translateText(cat);
        if (cat === currentMainCategory) {
            btn.classList.add('active');
            currentMainCategoryIndex = index;
        }
        btn.addEventListener('click', () => selectMainCategory(cat, index));
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        mainCategoriesPanel.appendChild(btn);
    });
    const spacer = document.createElement('div');
    spacer.style.width = '20px';
    mainCategoriesPanel.appendChild(spacer);
    const ruFlag = document.createElement('button');
    ruFlag.className = 'category-btn';
    ruFlag.textContent = 'üá∑üá∫';
    ruFlag.style.minWidth = '40px';
    ruFlag.style.padding = '8px';
    if (currentLanguage === 'ru') ruFlag.classList.add('active');
    ruFlag.addEventListener('click', () => setLanguage('ru'));
    ruFlag.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setLanguage('ru');
        }
    });
    mainCategoriesPanel.appendChild(ruFlag);
    const enFlag = document.createElement('button');
    enFlag.className = 'category-btn';
    enFlag.textContent = 'üá¨üáß';
    enFlag.style.minWidth = '40px';
    enFlag.style.padding = '8px';
    if (currentLanguage === 'en') enFlag.classList.add('active');
    enFlag.addEventListener('click', () => setLanguage('en'));
    enFlag.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            setLanguage('en');
        }
    });
    mainCategoriesPanel.appendChild(enFlag);
    
    // üëá –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–∂–æ–∫ "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã"
    const spacer2 = document.createElement('div');
    spacer2.style.width = '20px';
    mainCategoriesPanel.appendChild(spacer2);
    const checkFlag = document.createElement('button');
    checkFlag.className = 'category-btn';
    checkFlag.textContent = checkChannelsOnLoad ? '‚úÖ ' + translateText('–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã') : 'üî≤ ' + translateText('–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã');
    checkFlag.style.minWidth = '140px';
    checkFlag.style.padding = '8px';
    checkFlag.style.fontSize = '12px';
    if (checkChannelsOnLoad) checkFlag.classList.add('active');
    checkFlag.addEventListener('click', toggleChannelCheck);
    checkFlag.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            toggleChannelCheck();
        }
    });
    mainCategoriesPanel.appendChild(checkFlag);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ UI)
function renderSubCategories() {
    if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        renderCustomPlaylistSubmenu();
        return;
    }
    if (currentMainCategory === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
        subCategoriesPanel.innerHTML = '';
        subCategoriesPanel.style.display = 'flex';
        subCategoriesPanel.innerHTML = `<div style="color:#aaa; padding:20px; text-align:center">${translateText("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")}</div>`;
        loadAndRenderPublicPlaylists(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏–∑ Firebase
        return;
    }
    if (currentMainCategory === '–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª') {
        subCategoriesPanel.innerHTML = '';
        subCategoriesPanel.style.display = 'flex';
        const btn = document.createElement('button');
        btn.className = 'subcategory-btn';
        btn.textContent = 'üé≤ ' + translateText("–ï—â–µ –æ–¥–∏–Ω!");
        btn.addEventListener('click', () => loadRandomChannel());
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        subCategoriesPanel.appendChild(btn);
        return;
    }
    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'none';
    if (!categoryTree[currentMainCategory]) return;
    const subcategories = Object.keys(categoryTree[currentMainCategory]);
    subcategories.forEach((subcat, index) => {
        const btn = document.createElement('button');
        btn.className = 'subcategory-btn';
        btn.textContent = translateText(subcat);
        if (subcat === currentSubcategory) {
            btn.classList.add('active');
            currentSubCategoryIndex = index;
        }
        btn.addEventListener('click', () => selectSubcategory(subcat, index));
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        subCategoriesPanel.appendChild(btn);
    });
    if (subcategories.length > 0) {
        subCategoriesPanel.style.display = 'flex';
    }
}

// üëá –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
async function loadAndRenderPublicPlaylists() {
    try {
        const snapshot = await database.ref('publicPlaylists').get();
        let publicPlaylists = [];

        if (snapshot.exists()) {
            publicPlaylists = Object.values(snapshot.val());
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            publicPlaylists.sort((a, b) => b.addedAt - a.addedAt);
        }

        subCategoriesPanel.innerHTML = '';
        if (publicPlaylists.length === 0) {
            subCategoriesPanel.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")}</div>`;
            return;
        }

        publicPlaylists.forEach((playlist, index) => {
            const btn = document.createElement('button');
            btn.className = 'subcategory-btn';
            btn.innerHTML = `<strong>${playlist.name}</strong><br><small>${playlist.channelCount} ${translateText('–∫–∞–Ω–∞–ª–æ–≤')}</small>`;
            btn.title = playlist.url;
            btn.style.textAlign = 'left';
            btn.style.justifyContent = 'flex-start';
            btn.style.padding = '12px 16px';

            if (currentSubcategory === playlist.name) {
                btn.classList.add('active');
                currentSubCategoryIndex = index;
            }

            btn.addEventListener('click', () => selectPublicPlaylist(playlist, index));
            btn.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.click();
                }
            });

            subCategoriesPanel.appendChild(btn);
        });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:", error);
        subCategoriesPanel.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")}</div>`;
    }
}

// üëá –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í—ã–±–æ—Ä –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
async function selectPublicPlaylist(playlist, index) {
    currentSubcategory = playlist.name;
    currentSubCategoryIndex = index;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º –∑–∞–≥—Ä—É–∑–∫–∏
    loadAndRenderChannels('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã', playlist.name);
}

// üëá –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤
async function fetchAndCachePlaylist(url, group) {
    const content = await fetchM3U(url);
    let channels = parseM3UContent(content, group);
    // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    if (!checkChannelsOnLoad || channels.length === 0) {
        loadedPlaylists[url] = channels;
        renderChannels(channels);
        return channels;
    }
    // üëá –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    initialLoader.style.display = 'flex';
    initialLoader.innerHTML = `
        <div style="text-align:center; color:white;">
            <div>${translateText("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...")}</div>
            <div id="checkProgress" style="margin-top:10px;">0/${channels.length}</div>
        </div>
    `;
    const progressElement = document.getElementById('checkProgress');
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    let availableChannels = [];
    let checkedCount = 0;
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const updateDisplay = () => {
        loadedPlaylists[url] = [...availableChannels]; // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à (–∫–ª–æ–Ω–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤)
        renderChannels([...availableChannels]); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ (–∫–ª–æ–Ω–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤)
        if (progressElement) {
            progressElement.textContent = `${checkedCount}/${channels.length}`;
        }
    };
    // üëá –°—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –ª–æ–∞–¥–µ—Ä, —á—Ç–æ–±—ã –∫–∞–Ω–∞–ª—ã —Å—Ç–∞–ª–∏ –≤–∏–¥–Ω—ã!
    initialLoader.style.display = 'none';
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –ù–ï –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    channels.forEach(channel => {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –±–µ–∑ await
        checkChannelAvailability(channel.url)
            .then(isAvailable => {
                checkedCount++;
                if (isAvailable) {
                    availableChannels.push(channel); // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                    updateDisplay(); // üëà –°–†–ê–ó–£ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                } else {
                    console.log(`‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${channel.name}`);
                    addToBlacklist(channel.url);
                }
            })
            .catch(error => {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ ${channel.name}:`, error);
                checkedCount++;
                updateDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            });
    });
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –í–°–ï–• –ø—Ä–æ–≤–µ—Ä–æ–∫, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    await Promise.allSettled(channels.map(channel => checkChannelAvailability(channel.url)));
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${availableChannels.length} –∏–∑ ${channels.length}`);
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∏)
    loadedPlaylists[url] = [...availableChannels];
    renderChannels([...availableChannels]);
    return availableChannels;
}

// –í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectMainCategory(categoryName, index) {
    if (currentMainCategory === '–°–º–æ—Ç—Ä—è—Ç') {
        window.watchingBySubcategory = null;
    }
    if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && window.watchingNowInterval) {
        clearInterval(window.watchingNowInterval);
        window.watchingNowInterval = null;
        if (document.getElementById('reloadTimer')) {
            document.getElementById('reloadTimer').remove();
        }
    }
    currentMainCategory = categoryName;
    currentMainCategoryIndex = index;
    currentSubcategory = '';
    currentSubCategoryIndex = 0;
    renderSubCategories();
    if (categoryName === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        loadAndRenderChannels('–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç', '');
        navigationState = 'customInput';
    } else if (categoryName === '–°–º–æ—Ç—Ä—è—Ç' || categoryName === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
        loadAndRenderChannels(categoryName, '');
    } else if (categoryName === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
        subCategoriesPanel.innerHTML = '';
        subCategoriesPanel.style.display = 'flex';
        loadAndRenderPublicPlaylists();
    } else if (!categoryTree[categoryName] || Object.keys(categoryTree[categoryName]).length === 0) {
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
    }
    setTimeout(() => {
        const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons[index]) buttons[index].focus();
    }, 100);
}

// üëá –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function selectSubcategory(subcategoryName, index) {
    if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && window.watchingNowInterval) {
        clearInterval(window.watchingNowInterval);
        window.watchingNowInterval = null;
        if (document.getElementById('reloadTimer')) {
            document.getElementById('reloadTimer').remove();
        }
    }
    currentSubcategory = subcategoryName;
    currentSubCategoryIndex = index;
    if (currentMainCategory === '–°–º–æ—Ç—Ä—è—Ç' && window.watchingBySubcategory) {
        const channelsToShow = window.watchingBySubcategory[subcategoryName] || [];
        renderChannels(channelsToShow);
    } else {
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
    }
    setTimeout(() => {
        const firstChannel = document.querySelector('.channel-card');
        if (firstChannel) firstChannel.focus();
        navigationState = 'channels';
    }, 100);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
function updateMainCategoryActive() {
    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
    buttons.forEach((btn, i) => {
        if (i === currentMainCategoryIndex) btn.classList.add('active');
        else btn.classList.remove('active');
    });
}

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–æ–¥–º–µ–Ω—é
function updateSubCategoryActive() {
    const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
    buttons.forEach((btn, i) => {
        if (i === currentSubCategoryIndex) btn.classList.add('active');
        else btn.classList.remove('active');
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
async function loadAndRenderChannels(mainCategory, subcategory) {
    if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && mainCategory !== '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && window.watchingNowInterval) {
        clearInterval(window.watchingNowInterval);
        window.watchingNowInterval = null;
        if (document.getElementById('reloadTimer')) {
            document.getElementById('reloadTimer').remove();
        }
    }
    if (mainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
        initialLoader.style.display = 'none';
        let watched;
        try {
            const raw = localStorage.getItem('watchedChannels');
            watched = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(watched)) {
                watched = [];
                localStorage.setItem('watchedChannels', '[]');
            }
        } catch (e) {
            watched = [];
            localStorage.setItem('watchedChannels', '[]');
        }
        renderChannels(watched);
        return;
    }
    if (mainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
        initialLoader.style.display = 'none';
        channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ó–∞–≥—Ä—É–∑–∫–∞...")}</div>`;
        const loadWatchingNow = async () => {
            try {
                const snapshot = await database.ref('watching').get();
                let watchingNow = [];
                if (snapshot.exists()) {
                    const now = Date.now();
                    watchingNow = Object.values(snapshot.val()).filter(channel => {
                        return (now - channel.lastWatched) < 600000;
                    });
                    watchingNow.sort((a, b) => b.lastWatched - a.lastWatched);
                }
                renderChannels(watchingNow);
                if (watchingNow.length === 0) {
                    channelsContainer.innerHTML = `
                        <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                            <i class="fas fa-bolt" style="font-size:48px; margin-bottom:20px;"></i><br>
                            ${translateText("–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...")}<br>
                            ${translateText("–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª ‚Äî –∏ —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!")}
                        </div>`;
                }
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å':", error);
                channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")}</div>`;
            }
        };
        await loadWatchingNow();
        if (window.watchingNowInterval) {
            clearInterval(window.watchingNowInterval);
        }
        window.watchingNowInterval = setInterval(loadWatchingNow, 10000);
        return;
    }
    if (mainCategory === '–°–º–æ—Ç—Ä—è—Ç') {
        initialLoader.style.display = 'flex';
        channelsContainer.innerHTML = '';
        try {
            const snapshot = await database.ref('watching').get();
            let watching = [];
            if (snapshot.exists()) {
                watching = Object.values(snapshot.val()).filter(channel => {
                    return (Date.now() - channel.lastWatched) < 24 * 60 * 60 * 1000;
                });
                watching.sort((a, b) => b.views - a.views);
            }
            const subcategoryMap = {};
            watching.forEach(channel => {
                const group = channel.group || translateText('–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
                if (!subcategoryMap[group]) {
                    subcategoryMap[group] = [];
                }
                subcategoryMap[group].push(channel);
            });
            window.watchingBySubcategory = subcategoryMap;
            if (currentSubcategory) {
                renderChannels(subcategoryMap[currentSubcategory] || []);
            } else {
                renderChannels(watching);
            }
            const sortedSubcategories = Object.keys(subcategoryMap).sort((a, b) => {
                return a.localeCompare(b, currentLanguage === 'ru' ? 'ru-RU' : 'en-US');
            });
            subCategoriesPanel.innerHTML = '';
            subCategoriesPanel.style.display = 'none';
            sortedSubcategories.forEach((subcat, idx) => {
                const btn = document.createElement('button');
                btn.className = 'subcategory-btn';
                btn.textContent = `${translateText(subcat)} (${subcategoryMap[subcat].length})`;
                if (subcat === currentSubcategory) {
                    btn.classList.add('active');
                    currentSubCategoryIndex = idx;
                }
                btn.addEventListener('click', () => selectSubcategory(subcat, idx));
                btn.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        this.click();
                    }
                });
                subCategoriesPanel.appendChild(btn);
            });
            if (sortedSubcategories.length > 0) {
                subCategoriesPanel.style.display = 'flex';
            }
            if (watching.length === 0) {
                channelsContainer.innerHTML = `
                    <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                        <i class="fas fa-users" style="font-size:48px; margin-bottom:20px;"></i><br>
                        ${translateText("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç...")}<br>
                        ${translateText("–í–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞ 60+ —Å–µ–∫ ‚Äî –∏ –≤—ã –ø–µ—Ä–≤—ã–º –ø–æ—è–≤–∏—Ç–µ—Å—å –∑–¥–µ—Å—å!")}
                    </div>`;
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Firebase:", error);
            showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"));
            channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")}</div>`;
        } finally {
            initialLoader.style.display = 'none';
            setTimeout(() => {
                const firstChannel = document.querySelector('.channel-card');
                if (firstChannel) firstChannel.focus();
            }, 100);
        }
        return;
    }
    if (mainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        initialLoader.style.display = 'none';
        let customPlaylist;
        try {
            const raw = localStorage.getItem('customPlaylist');
            customPlaylist = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(customPlaylist)) {
                customPlaylist = [];
                localStorage.removeItem('customPlaylist');
            }
        } catch (e) {
            customPlaylist = [];
            localStorage.removeItem('customPlaylist');
        }
        renderChannels(customPlaylist);
        if (customPlaylist.length === 0) {
            channelsContainer.innerHTML = `
                <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                    <i class="fas fa-list" style="font-size:48px; margin-bottom:20px;"></i><br>
                    ${translateText("–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")}<br>
                    ${translateText("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥–º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª")}
                </div>`;
        }
        return;
    }
    if (mainCategory === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
        initialLoader.style.display = 'flex';
        channelsContainer.innerHTML = '';
        try {
            const snapshot = await database.ref('publicPlaylists').get();
            if (snapshot.exists()) {
                const playlistData = Object.values(snapshot.val()).find(pl => pl.name === subcategory);
                if (playlistData) {
                    const url = playlistData.url;
                    if (!loadedPlaylists[url]) {
                        await fetchAndCachePlaylist(url, playlistData.name);
                    }
                    const channels = loadedPlaylists[url] || [];
                    renderChannels(channels);
                    return;
                }
            }
            throw new Error('–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", error);
            showToast(translateText("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"));
            channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")}</div>`;
        } finally {
            initialLoader.style.display = 'none';
            setTimeout(() => {
                const firstChannel = document.querySelector('.channel-card');
                if (firstChannel) firstChannel.focus();
            }, 100);
        }
        return;
    }
    if (mainCategory === '–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª') {
        loadRandomChannel();
        return;
    }
    if (!categoryTree[mainCategory] || !categoryTree[mainCategory][subcategory]) {
        renderChannels([]);
        return;
    }
    const url = categoryTree[mainCategory][subcategory];
    initialLoader.style.display = 'flex';
    try {
        let channels = loadedPlaylists[url] || await fetchAndCachePlaylist(url, subcategory);
        renderChannels(channels);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"));
        renderChannels([]);
    } finally {
        initialLoader.style.display = 'none';
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
        }, 100);
    }
}

// üëá –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
async function loadRandomChannel() {
    initialLoader.style.display = 'flex';
    channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ó–∞–≥—Ä—É–∑–∫–∞...")}</div>`;

    try {
        // üëá –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        let allChannels = [];

        // 1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        try {
            const watchedRaw = localStorage.getItem('watchedChannels');
            if (watchedRaw) {
                const watched = JSON.parse(watchedRaw);
                if (Array.isArray(watched)) {
                    allChannels = allChannels.concat(watched);
                }
            }
        } catch (e) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞");
        }

        // 2. –°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
        try {
            const customRaw = localStorage.getItem('customPlaylist');
            if (customRaw) {
                const custom = JSON.parse(customRaw);
                if (Array.isArray(custom)) {
                    allChannels = allChannels.concat(custom);
                }
            }
        } catch (e) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞");
        }

        // 3. –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ Firebase (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã)
        try {
            const snapshot = await database.ref('publicPlaylists').get();
            if (snapshot.exists()) {
                const playlistKeys = Object.keys(snapshot.val());
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ 1-2 –ø–ª–µ–π–ª–∏—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
                const sampleSize = Math.min(3, playlistKeys.length);
                const sampledKeys = [];
                for (let i = 0; i < sampleSize; i++) {
                    const randomIndex = Math.floor(Math.random() * playlistKeys.length);
                    sampledKeys.push(playlistKeys[randomIndex]);
                    playlistKeys.splice(randomIndex, 1); // –£–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                }

                for (const key of sampledKeys) {
                    const playlist = snapshot.val()[key];
                    if (!loadedPlaylists[playlist.url]) {
                        await fetchAndCachePlaylist(playlist.url, playlist.name);
                    }
                    const playlistChannels = loadedPlaylists[playlist.url] || [];
                    allChannels = allChannels.concat(playlistChannels);
                }
            }
        } catch (e) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞");
        }

        // 4. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Å—Ç—Ä–∞–Ω—ã/—è–∑—ã–∫–∏ ‚Äî –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë
        if (allChannels.length === 0) {
            const availableCategories = ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–°—Ç—Ä–∞–Ω—ã", "–Ø–∑—ã–∫–∏", "–†–µ–≥–∏–æ–Ω—ã"].filter(cat => 
                categoryTree[cat] && Object.keys(categoryTree[cat]).length > 0
            );

            if (availableCategories.length > 0) {
                const randomCategory = availableCategories[Math.floor(Math.random() * availableCategories.length)];
                const subcategories = Object.keys(categoryTree[randomCategory]);
                const randomSubcategory = subcategories[Math.floor(Math.random() * subcategories.length)];
                const url = categoryTree[randomCategory][randomSubcategory];

                if (!loadedPlaylists[url]) {
                    await fetchAndCachePlaylist(url, randomSubcategory);
                }
                allChannels = loadedPlaylists[url] || [];
            }
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        const blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
        allChannels = allChannels.filter(channel => !blacklist.includes(channel.url));

        if (allChannels.length === 0) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞');
        }

        let attempts = 0;
        const maxAttempts = 10;
        let selectedChannel = null;

        while (attempts < maxAttempts && allChannels.length > 0) {
            attempts++;
            const randomIndex = Math.floor(Math.random() * allChannels.length);
            selectedChannel = allChannels[randomIndex];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            const isAvailable = await checkChannelAvailability(selectedChannel.url);
            if (isAvailable) {
                break;
            } else {
                // –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                allChannels.splice(randomIndex, 1);
                addToBlacklist(selectedChannel.url);
                selectedChannel = null;
            }
        }

        if (selectedChannel) {
            renderChannels([selectedChannel]);
            setTimeout(() => {
                const firstChannel = document.querySelector('.channel-card');
                if (firstChannel) {
                    firstChannel.focus();
                    navigationState = 'channels';
                }
            }, 100);
        } else {
            channelsContainer.innerHTML = `
                <div style="color:#aaa; padding:60px 20px; text-align:center; font-size:16px;">
                    <i class="fas fa-dice" style="font-size:48px; margin-bottom:20px;"></i><br>
                    ${translateText("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª")}<br>
                    ${translateText("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")}
                </div>`;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:", error);
        showToast(translateText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"));
        channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")}</div>`;
    } finally {
        initialLoader.style.display = 'none';
    }
}

// üëá –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
function checkChannelAvailability(url) {
    return new Promise((resolve) => {
        const video = document.createElement('video');
        video.muted = true;
        video.playsInline = true;
        let manifestLoaded = false;
        let errorOccurred = false;
        const timeoutId = setTimeout(() => {
            if (!manifestLoaded && !errorOccurred) {
                console.warn("–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:", url);
                cleanup();
                resolve(false);
            }
        }, 5000);
        function cleanup() {
            clearTimeout(timeoutId);
            if (hlsInstance) {
                hlsInstance.destroy();
            }
            video.src = '';
            video.load();
        }
        let hlsInstance = null;
        if (Hls.isSupported()) {
            hlsInstance = new Hls();
            hlsInstance.loadSource(url);
            hlsInstance.attachMedia(video);
            hlsInstance.on(Hls.Events.MANIFEST_PARSED, () => {
                manifestLoaded = true;
                cleanup();
                resolve(true);
            });
            hlsInstance.on(Hls.Events.ERROR, (event, data) => {
                if (data.fatal) {
                    errorOccurred = true;
                    cleanup();
                    resolve(false);
                }
            });
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = url;
            video.addEventListener('loadedmetadata', () => {
                manifestLoaded = true;
                cleanup();
                resolve(true);
            });
            video.addEventListener('error', () => {
                errorOccurred = true;
                cleanup();
                resolve(false);
            });
        } else {
            cleanup();
            resolve(false);
        }
        video.play().catch(() => {});
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ M3U
async function fetchM3U(url) {
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    return await response.text();
}

// –ü–∞—Ä—Å–∏–Ω–≥ M3U —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π tvg-group-title
function parseM3UContent(content, assignedCategory) {
    const channels = [];
    const lines = content.split('\n');
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('#EXTINF:')) {
            const infoLine = lines[i];
            const urlLine = lines[i + 1];
            if (urlLine && !urlLine.startsWith('#')) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                let name = infoLine.split(',')[1] || '–ö–∞–Ω–∞–ª';
                name = name.trim();

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
                const logoMatch = infoLine.match(/tvg-logo="([^"]*)"/);
                const logo = logoMatch ? logoMatch[1] : '';

                // üëá –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ tvg-group-title, –µ—Å–ª–∏ –µ—Å—Ç—å
                let group = assignedCategory; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                const groupMatch = infoLine.match(/tvg-group-title="([^"]*)"/);
                if (groupMatch && groupMatch[1]) {
                    group = groupMatch[1].trim();
                }

                channels.push({ name, url: urlLine.trim(), group, logo });
            }
        }
    }
    return filterBlacklistedChannels(channels);
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
function filterBlacklistedChannels(channelsList) {
    const blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    return channelsList.filter(channel => !blacklist.includes(channel.url));
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
function renderChannels(channelsToRender) {
    channelsContainer.innerHTML = '';
    if (channelsToRender.length === 0 && initialLoader.style.display === 'none') {
        channelsContainer.innerHTML = `<div style="color:#aaa; padding:40px; text-align:center">${translateText("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")}</div>`;
        return;
    }
    channelsToRender.forEach((channel, index) => {
        const groupIcon = getGroupIcon(channel.group);
        const channelCard = document.createElement('div');
        channelCard.className = 'channel-card';
        channelCard.setAttribute('tabindex', '0');
        channelCard.dataset.index = index;
        const mediaContainer = document.createElement('div');
        mediaContainer.className = 'channel-media';
        if (channel.logo) {
            const img = document.createElement('img');
            img.src = channel.logo;
            img.alt = channel.name;
            img.onerror = () => { img.style.display = 'none'; };
            mediaContainer.appendChild(img);
        }
        const icon = document.createElement('i');
        icon.className = `fas ${groupIcon}`;
        mediaContainer.appendChild(icon);
        const miniPlayer = createMiniPlayer(channel.url);
        mediaContainer.appendChild(miniPlayer);
        let viewsText = '';
        if (channel.views) {
            viewsText = ` üë• ${channel.views}`;
        }
        if (currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å' && channel.lastWatched) {
            const now = Date.now();
            if (now - channel.lastWatched < 600000) {
                viewsText += ` ‚ö°`;
            }
        }
        const infoContainer = document.createElement('div');
        infoContainer.className = 'channel-info';
        infoContainer.innerHTML = `<h3>${channel.name}${viewsText}</h3><p>${channel.group}</p>`;
        channelCard.appendChild(mediaContainer);
        channelCard.appendChild(infoContainer);
        channelCard.addEventListener('focus', function() {
            if (window.watchingNowInterval && currentMainCategory !== '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
                clearInterval(window.watchingNowInterval);
                window.watchingNowInterval = null;
                if (document.getElementById('reloadTimer')) {
                    document.getElementById('reloadTimer').remove();
                }
            }
            currentChannelIndex = parseInt(this.dataset.index);
            if (focusTimer) clearTimeout(focusTimer);
            if (currentMiniPlayer && currentMiniPlayer !== miniPlayer) {
                currentMiniPlayer.style.display = 'none';
                const prevIcon = currentMiniPlayer.parentElement.querySelector('i');
                if (prevIcon) prevIcon.style.display = 'block';
                const prevVideo = currentMiniPlayer.querySelector('video');
                if (prevVideo) prevVideo.pause();
            }
            miniPlayer.style.display = 'block';
            icon.style.display = 'none';
            currentMiniPlayer = miniPlayer;
            focusTimer = setTimeout(() => {
                const video = miniPlayer.querySelector('video');
                if (!video.dataset.initialized) {
                    initializeMiniPlayer(video, channel.url, miniPlayer, icon);
                } else if (video.paused) {
                    video.play().catch(e => console.log("Autoplay:", e));
                }
            }, 3000);
        });
        channelCard.addEventListener('blur', function() {
            if (focusTimer) clearTimeout(focusTimer);
            setTimeout(() => {
                if (!channelCard.contains(document.activeElement)) {
                    miniPlayer.style.display = 'none';
                    icon.style.display = 'block';
                    const video = miniPlayer.querySelector('video');
                    if (video) video.pause();
                }
            }, 100);
        });
        channelCard.addEventListener('click', () => openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo));
        channelCard.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
            }
        });
        channelsContainer.appendChild(channelCard);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function createMiniPlayer(url) {
    if (miniPlayers.has(url)) return miniPlayers.get(url);
    const container = document.createElement('div');
    container.className = 'mini-player';
    container.dataset.url = url;
    const video = document.createElement('video');
    video.muted = true;
    video.playsInline = true;
    video.loop = true;
    video.style.width = '100%';
    video.style.height = '100%';
    video.style.background = '#000';
    container.appendChild(video);
    miniPlayers.set(url, container);
    return container;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function initializeMiniPlayer(video, url, miniPlayer, icon) {
    video.dataset.initialized = 'true';
    let manifestLoaded = false;
    let networkErrorOccurred = false;
    const timeoutId = setTimeout(() => {
        if (!manifestLoaded && !networkErrorOccurred) {
            console.warn("–¢–∞–π–º–∞—É—Ç:", url);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        }
    }, 30000);
    if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(video);
        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(e => console.log("Autoplay:", e));
        });
        hls.on(Hls.Events.ERROR, (event, data) => {
            if (data.fatal && data.type === Hls.ErrorTypes.NETWORK_ERROR) {
                networkErrorOccurred = true;
                clearTimeout(timeoutId);
                handleStreamError(url, miniPlayer);
                addToBlacklist(url);
                miniPlayer.style.display = 'none';
                icon.style.display = 'block';
            }
        });
    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = url;
        video.addEventListener('loadedmetadata', () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(e => console.log("Autoplay:", e));
        });
        video.addEventListener('error', () => {
            clearTimeout(timeoutId);
            handleStreamError(url, miniPlayer);
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ—Ç–æ–∫–∞
function handleStreamError(url, container) {
    showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
    console.error("–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞:", url);
    const icon = container.parentElement.querySelector('i');
    if (icon) icon.style.display = 'block';
    container.style.display = 'none';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
function addToBlacklist(url) {
    let blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    if (!blacklist.includes(url)) {
        blacklist.push(url);
        localStorage.setItem('blacklist', JSON.stringify(blacklist));
    }
}

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞
function openFullScreenPlayer(name, url, group, logo) {
    currentWatchedChannel = { name, url, group, logo };
    watchStartTime = Date.now();
    playerModal.style.display = 'flex';
    videoPlayerElement.src = '';
    videoPlayerElement.load();
    videoPlayerElement.muted = false;
    let manifestLoaded = false;
    const timeoutId = setTimeout(() => {
        if (!manifestLoaded) {
            console.warn("–¢–∞–π–º–∞—É—Ç –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω:", url);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
            addToBlacklist(url);
            playerModal.style.display = 'none';
        }
    }, 30000);
    if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(videoPlayerElement);
        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(e => {
                console.log("Autoplay blocked:", e);
                showToast(translateText("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"));
            });
            setTimeout(() => requestNativeFullscreen(), 1000);
        });
        hls.on(Hls.Events.ERROR, (event, data) => {
            if (data.fatal) {
                clearTimeout(timeoutId);
                showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
                addToBlacklist(url);
                playerModal.style.display = 'none';
            }
        });
    } else if (videoPlayerElement.canPlayType('application/vnd.apple.mpegurl')) {
        videoPlayerElement.src = url;
        videoPlayerElement.addEventListener('loadedmetadata', () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(e => {
                console.log("Autoplay blocked:", e);
                showToast(translateText("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"));
            });
            setTimeout(() => requestNativeFullscreen(), 1000);
        });
        videoPlayerElement.addEventListener('error', () => {
            clearTimeout(timeoutId);
            showToast(translateText('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
            addToBlacklist(url);
            playerModal.style.display = 'none';
        });
    } else {
        clearTimeout(timeoutId);
        showToast(translateText('–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
        playerModal.style.display = 'none';
    }
}

// Fullscreen API
function requestNativeFullscreen() {
    const elem = videoPlayerElement;
    if (elem.requestFullscreen) {
        elem.requestFullscreen().catch(err => console.log("Fullscreen:", err));
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen().catch(err => console.log("Fullscreen:", err));
    }
}

// –ò–∫–æ–Ω–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
function getGroupIcon(group) {
    group = group.toLowerCase();
    if (group.includes('–Ω–æ–≤–æ—Å—Ç–∏')) return 'fa-newspaper';
    if (group.includes('—Å–ø–æ—Ä—Ç')) return 'fa-futbol';
    if (group.includes('–∫–∏–Ω–æ')) return 'fa-film';
    if (group.includes('–º—É–∑—ã–∫–∞')) return 'fa-music';
    if (group.includes('–¥–µ—Ç—Å–∫')) return 'fa-child';
    if (group.includes('–¥–æ–∫—É–º–µ–Ω—Ç')) return 'fa-video';
    if (group.includes('—Ä–∞–∑–≤–ª–µ—á')) return 'fa-theater-masks';
    return 'fa-tv';
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
function moveFocus(direction) {
    if (navigationState === 'channels') {
        const cards = document.querySelectorAll('.channel-card');
        if (cards.length === 0) return;
        const currentIndex = Array.from(cards).indexOf(document.activeElement);
        const cols = Math.floor(channelsContainer.offsetWidth / 280) || 1;
        let nextIndex = currentIndex;
        switch(direction) {
            case 'right': nextIndex = (currentIndex + 1) % cards.length; break;
            case 'left': nextIndex = (currentIndex - 1 + cards.length) % cards.length; break;
            case 'down': nextIndex = (currentIndex + cols) % cards.length; break;
            case 'up': {
                nextIndex = (currentIndex - cols + cards.length) % cards.length;
                if (nextIndex >= currentIndex) {
                    if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                        const input = document.getElementById('playlistURL');
                        if (input) {
                            input.focus();
                            navigationState = 'customInput';
                            return;
                        }
                    } else if (currentMainCategory === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
                        navigationState = 'subCategories';
                        subCategoriesPanel.style.display = 'flex';
                        setTimeout(() => {
                            const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                            if (buttons.length > 0) {
                                buttons[0].focus();
                                currentSubCategoryIndex = 0;
                            }
                        }, 100);
                        return;
                    } else {
                        navigationState = 'subCategories';
                        subCategoriesPanel.style.display = 'flex';
                        setTimeout(() => {
                            const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                            if (buttons.length > 0) {
                                buttons[0].focus();
                                currentSubCategoryIndex = 0;
                            }
                        }, 100);
                        return;
                    }
                }
                break;
            }
        }
        if (nextIndex >= 0 && nextIndex < cards.length) {
            cards[nextIndex].focus();
        }
    } 
    else if (navigationState === 'mainCategories') {
        const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons.length === 0) return;
        let nextIndex = direction === 'right'
            ? (currentMainCategoryIndex + 1) % buttons.length
            : (currentMainCategoryIndex - 1 + buttons.length) % buttons.length;
        currentMainCategoryIndex = nextIndex;
        currentMainCategory = buttons[nextIndex].textContent;
        updateMainCategoryActive();
        buttons[nextIndex].focus();
    } 
    else if (navigationState === 'subCategories') {
        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
        if (buttons.length === 0) return;
        let nextIndex = direction === 'right'
            ? (currentSubCategoryIndex + 1) % buttons.length
            : (currentSubCategoryIndex - 1 + buttons.length) % buttons.length;
        currentSubCategoryIndex = nextIndex;
        currentSubcategory = buttons[nextIndex].textContent;
        updateSubCategoryActive();
        buttons[nextIndex].focus();
    }
    else if (navigationState === 'customInput') {
        const input = document.getElementById('playlistURL');
        const button = subCategoriesPanel.querySelector('button');
        if (!input || !button) return;
        if (direction === 'right') {
            button.focus();
        } else if (direction === 'left') {
            input.focus();
        } else if (direction === 'down') {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) {
                firstChannel.focus();
                navigationState = 'channels';
            }
        } else if (direction === 'up') {
            navigationState = 'mainCategories';
            mainCategoriesPanel.style.display = 'flex';
            setTimeout(() => {
                const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                if (buttons[currentMainCategoryIndex]) {
                    buttons[currentMainCategoryIndex].focus();
                }
            }, 100);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
document.addEventListener('keydown', function(e) {
    if (playerModal.style.display === 'flex') {
        if (e.key === 'Escape') closeModal.click();
        return;
    }
    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', 'Escape'].includes(e.key)) {
        e.preventDefault();
    }
    switch(e.key) {
        case 'ArrowLeft':
        case 'ArrowRight':
            moveFocus(e.key === 'ArrowRight' ? 'right' : 'left');
            break;
        case 'ArrowUp':
            if (navigationState === 'channels') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else if (currentMainCategory === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                        }
                    }, 100);
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories' || navigationState === 'customInput') {
                navigationState = 'mainCategories';
                mainCategoriesPanel.style.display = 'flex';
                setTimeout(() => {
                    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                    if (buttons[currentMainCategoryIndex]) {
                        buttons[currentMainCategoryIndex].focus();
                    }
                }, 100);
            }
            break;
        case 'ArrowDown':
            if (navigationState === 'mainCategories') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else if (currentMainCategory === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                        }
                    }, 100);
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories' || navigationState === 'customInput') {
                navigationState = 'channels';
                setTimeout(() => {
                    const firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                }, 100);
            }
            break;
        case 'Enter':
            if (navigationState === 'mainCategories') {
                if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    const input = document.getElementById('playlistURL');
                    if (input) {
                        input.focus();
                        navigationState = 'customInput';
                    }
                } else if (currentMainCategory === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                            currentSubcategory = buttons[0].textContent;
                            updateSubCategoryActive();
                        }
                    }, 100);
                } else {
                    navigationState = 'subCategories';
                    subCategoriesPanel.style.display = 'flex';
                    setTimeout(() => {
                        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                        if (buttons.length > 0) {
                            buttons[0].focus();
                            currentSubCategoryIndex = 0;
                            currentSubcategory = buttons[0].textContent;
                            updateSubCategoryActive();
                        }
                    }, 100);
                }
            } else if (navigationState === 'subCategories') {
                const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                if (buttons[currentSubCategoryIndex]) {
                    if (currentMainCategory === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
                        selectPublicPlaylist(JSON.parse(buttons[currentSubCategoryIndex].title), currentSubCategoryIndex);
                    } else {
                        selectSubcategory(buttons[currentSubCategoryIndex].textContent, currentSubCategoryIndex);
                    }
                }
            } else if (navigationState === 'customInput') {
                const active = document.activeElement;
                if (active.id === 'playlistURL') {
                    loadPlaylistFromURL();
                } else if (active.tagName === 'BUTTON') {
                    active.click();
                }
            } else if (navigationState === 'channels' && document.activeElement.classList.contains('channel-card')) {
                const card = document.activeElement;
                const index = parseInt(card.dataset.index);
                let list;
                if (currentMainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
                    list = JSON.parse(localStorage.getItem('watchedChannels') || '[]');
                } else if (currentMainCategory === '–°–º–æ—Ç—Ä—è—Ç' || currentMainCategory === '–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å') {
                    const cards = document.querySelectorAll('.channel-card');
                    if (index >= 0 && index < cards.length) {
                        const channel = {
                            name: cards[index].querySelector('h3').textContent.replace(/ üë• \d+.*$/, ''),
                            url: cards[index].dataset.url || '',
                            group: cards[index].querySelector('p').textContent,
                            logo: ''
                        };
                        openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
                        return;
                    }
                } else if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    list = JSON.parse(localStorage.getItem('customPlaylist') || '[]');
                } else if (currentMainCategory === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã') {
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ Firebase
                    const snapshot = database.ref('publicPlaylists').get();
                    // –ù–æ –ø—Ä–æ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å loadedPlaylists
                    const playlistUrl = Object.values(loadedPlaylists).find(pl => pl.some(ch => ch.url === card.dataset.url))?.[0]?.url;
                    if (playlistUrl) {
                        list = loadedPlaylists[playlistUrl] || [];
                    }
                } else {
                    list = loadedPlaylists[categoryTree[currentMainCategory][currentSubcategory]] || [];
                }
                if (index >= 0 && index < list.length) {
                    const channel = list[index];
                    openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
                }
            }
            break;
        case 'Escape':
            if (navigationState === 'subCategories' || navigationState === 'customInput') {
                navigationState = 'mainCategories';
                setTimeout(() => {
                    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                    if (buttons[currentMainCategoryIndex]) {
                        buttons[currentMainCategoryIndex].focus();
                    }
                }, 100);
            } else if (navigationState === 'mainCategories') {
                navigationState = 'channels';
                setTimeout(() => {
                    const firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                }, 100);
            }
            break;
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    currentLanguage = localStorage.getItem('appLanguage') || 'ru';
    const safetyTimeout = setTimeout(() => {
        initialLoader.style.display = 'none';
        showToast(translateText("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"));
    }, 10000);
    try {
        currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
        renderMainCategories();
        renderSubCategories();
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
        const lastCleanup = localStorage.getItem('lastFirebaseCleanup');
        const now = Date.now();
        if (!lastCleanup || now - parseInt(lastCleanup) > 24 * 60 * 60 * 1000) {
            database.ref('watching').once('value', async (snapshot) => {
                if (snapshot.exists()) {
                    const updates = {};
                    const data = snapshot.val();
                    let deleted = 0;
                    for (let key in data) {
                        if (now - data[key].lastWatched > 24 * 60 * 60 * 1000) {
                            updates[key] = null;
                            deleted++;
                        }
                    }
                    if (Object.keys(updates).length > 0) {
                        await database.ref('watching').update(updates);
                        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleted} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ "–°–º–æ—Ç—Ä—è—Ç"`);
                    }
                }
            });
            localStorage.setItem('lastFirebaseCleanup', now.toString());
        }
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
        }, 500);
        clearTimeout(safetyTimeout);
    } catch (error) {
        clearTimeout(safetyTimeout);
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        initialLoader.style.display = 'none';
        showToast(translateText("–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"));
    }
}

// üëá –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
window.addEventListener('beforeunload', () => {
    if (window.watchingNowInterval) clearInterval(window.watchingNowInterval);
    if (window.watchingNowTimerInterval) clearInterval(window.watchingNowTimerInterval);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initApp();
});

// ============= MOUSE WHEEL SCROLL FOR HORIZONTAL MENUS =============
function initMouseWheelScroll() {
    const scrollContainers = [
        document.getElementById('mainCategoriesPanel'),
        document.getElementById('subCategoriesPanel')
    ];
    scrollContainers.forEach(container => {
        if (!container) return;
        container.addEventListener('wheel', function(e) {
            if (e.deltaY === 0) return;
            e.preventDefault();
            this.scrollLeft += e.deltaY;
        }, { passive: false });
        container.addEventListener('mouseenter', () => {
            container.style.cursor = 'grab';
        });
        container.addEventListener('mousedown', () => {
            container.style.cursor = 'grabbing';
        });
        container.addEventListener('mouseup', () => {
            container.style.cursor = 'grab';
        });
        container.addEventListener('mouseleave', () => {
            container.style.cursor = 'default';
        });
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initMouseWheelScroll();
});
