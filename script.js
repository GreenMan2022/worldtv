document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const channelsGrid = document.getElementById('channels-grid');
    const mainVideoContainer = document.getElementById('video-container');
    const searchInput = document.getElementById('search');
    const loadingEl = document.getElementById('loading');
    const errorEl = document.getElementById('error');
    const retryBtn = document.getElementById('retry');
    const currentChannelNameEl = document.getElementById('current-channel-name');

    let allChannels = [];
    let focusedChannel = null;
    let activePlayerTile = null; // –ü–ª–∏—Ç–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç –≤–∏–¥–µ–æ
    let previewPlayers = new Map();
    let mainPlayer = null; // HLS-–∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞

    // ====================
    // FETCH CHANNELS
    // ====================
    async function fetchChannels() {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–Ω–∞–ª–æ–≤...');

        // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ 1
        try {
            const proxyUrl = 'https://corsproxy.io/?';
            const targetUrl = 'https://iptv-org.github.io/iptv/index.m3u8';
            const fullUrl = proxyUrl + encodeURIComponent(targetUrl);

            const response = await fetch(fullUrl, {
                headers: { 'Accept': 'text/plain' }
            });

            if (!response.ok) throw new Error(`HTTP ${response.status}`);

            const data = await response.text();
            const channels = parseM3U(data);

            if (channels.length > 0) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤`);
                return channels;
            }
        } catch (err) {
            console.warn('‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', err.message);
        }

        // –ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        try {
            const response = await fetch('channels.m3u8');
            if (!response.ok) throw new Error(`HTTP ${response.status}`);

            const data = await response.text();
            const channels = parseM3U(data);

            if (channels.length > 0) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞`);
                return channels;
            }
        } catch (err) {
            console.error('‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', err.message);
        }

        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã');
    }

    // ====================
    // PARSE M3U
    // ====================
    function parseM3U(data) {
        if (!data || typeof data !== 'string') return [];

        const lines = data.split('\n');
        const channels = [];

        for (let i = 0; i < lines.length; i++) {
            if (lines[i].startsWith('#EXTINF')) {
                const line = lines[i];
                const url = lines[i + 1]?.trim();

                if (!url || url.startsWith('#') || url.length < 10) continue;

                const parts = line.split(',');
                const name = parts[parts.length - 1]?.trim();
                if (!name || name.length < 2) continue;

                let group = 'unknown';
                const groupMatch = line.match(/group-title="([^"]*)"/i);
                if (groupMatch && groupMatch[1]) {
                    group = groupMatch[1].toLowerCase();
                }

                let logo = '';
                const logoMatch = line.match(/tvg-logo="([^"]*)"/i);
                if (logoMatch && logoMatch[1]) {
                    logo = logoMatch[1];
                } else {
                    const initials = name.substring(0, 2).toUpperCase();
                    logo = `https://placehold.co/200x120/1a1a2e/ffffff?text=${encodeURIComponent(initials)}`;
                }

                channels.push({ name, url, group, logo });
                i++;
            }
        }

        return channels;
    }

    // ====================
    // RENDER CHANNELS ‚Äî –ü–õ–ò–¢–ö–ò
    // ====================
    function renderChannelTiles(channels) {
        channelsGrid.innerHTML = '';

        if (!channels || channels.length === 0) {
            channelsGrid.innerHTML = `
                <div class="no-results">
                    <h3>üì∫ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª <code>channels.m3u8</code></p>
                </div>`;
            return;
        }

        channels.forEach(channel => {
            const tile = document.createElement('div');
            tile.className = 'channel-tile';
            tile.setAttribute('tabIndex', '0');
            tile.setAttribute('title', channel.name);
            tile.dataset.url = channel.url;
            tile.dataset.name = channel.name;

            const content = document.createElement('div');
            content.className = 'tile-content';

            // –í–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–≤—å—é –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            const video = document.createElement('video');
            video.className = 'tile-video';
            video.muted = true;
            video.playsInline = true;
            video.controls = false; // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            // –õ–æ–≥–æ—Ç–∏–ø
            const logo = document.createElement('img');
            logo.src = channel.logo;
            logo.alt = channel.name;
            logo.className = 'channel-logo';
            logo.onerror = () => {
                logo.src = `https://placehold.co/200x120/1a1a2e/ffffff?text=${encodeURIComponent(channel.name.substring(0, 2))}`;
            };

            // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            const name = document.createElement('div');
            name.className = 'channel-name';
            name.textContent = channel.name;

            content.appendChild(video);
            content.appendChild(logo);
            tile.appendChild(content);
            tile.appendChild(name);

            tile.addEventListener('click', () => playInTile(tile, channel));
            tile.addEventListener('focus', () => handleTileFocus(tile, channel));
            tile.addEventListener('blur', () => handleTileBlur(tile, channel));

            channelsGrid.appendChild(tile);
        });

        setTimeout(() => {
            const firstTile = document.querySelector('.channel-tile');
            if (firstTile) firstTile.focus();
        }, 100);
    }

    // ====================
    // PLAY VIDEO IN TILE ‚Äî –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
    // ====================
    function playInTile(tile, channel) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if (activePlayerTile && activePlayerTile !== tile) {
            stopTilePlayback(activePlayerTile);
        }

        activePlayerTile = tile;
        const video = tile.querySelector('.tile-video');
        const logo = tile.querySelector('.channel-logo');
        const name = tile.querySelector('.channel-name');

        // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        logo.style.opacity = '0';
        name.style.transform = 'translateY(100%)';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –ø–ª–∏—Ç–∫–∏
        video.style.opacity = '1';
        video.controls = true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
        currentChannelNameEl.textContent = channel.name;

        if (Hls.isSupported()) {
            if (mainPlayer) {
                mainPlayer.destroy();
            }

            const hls = new Hls({
                debug: false,
                enableWorker: true,
                lowLatencyMode: true,
                maxBufferLength: 30
            });

            mainPlayer = hls;
            hls.loadSource(channel.url);
            hls.attachMedia(video);

            hls.on(Hls.Events.MANIFEST_PARSED, () => {
                video.play().catch(e => {
                    console.warn('üîá –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É');

                    const playButton = createPlayButton(() => {
                        video.play().then(() => playButton.remove());
                    });

                    tile.appendChild(playButton);
                });
            });

            hls.on(Hls.Events.ERROR, (event, data) => {
                if (data.fatal) {
                    alert('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ' + data.type);
                    hls.destroy();
                    mainPlayer = null;
                }
            });

        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = channel.url;
            video.addEventListener('loadedmetadata', () => {
                video.play().catch(e => {
                    const playButton = createPlayButton(() => {
                        video.play().then(() => playButton.remove());
                    });
                    tile.appendChild(playButton);
                });
            });
        }
    }

    // ====================
    // STOP PLAYBACK IN TILE
    // ====================
    function stopTilePlayback(tile) {
        const video = tile.querySelector('.tile-video');
        const logo = tile.querySelector('.channel-logo');
        const name = tile.querySelector('.channel-name');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        logo.style.opacity = '0.9';
        name.style.transform = 'translateY(0)';

        // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        video.style.opacity = '0';
        video.controls = false;

        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        if (mainPlayer) {
            mainPlayer.destroy();
            mainPlayer = null;
        }
        video.src = '';
        video.load();
    }

    // ====================
    // PREVIEW ON FOCUS (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä)
    // ====================
    function handleTileFocus(tile, channel) {
        if (activePlayerTile === tile) return; // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä
        if (focusedChannel === tile) return;

        if (focusedChannel) {
            const prevVideo = focusedChannel.querySelector('.tile-video');
            const prevHls = previewPlayers.get(focusedChannel);
            if (prevHls) {
                prevHls.destroy();
                previewPlayers.delete(focusedChannel);
            }
            if (prevVideo) {
                prevVideo.src = '';
                prevVideo.load();
            }
        }

        focusedChannel = tile;
        const video = tile.querySelector('.tile-video');
        if (!video) return;

        if (Hls.isSupported()) {
            const hls = new Hls({
                debug: false,
                enableWorker: true,
                lowLatencyMode: true,
                maxBufferLength: 10
            });

            hls.loadSource(channel.url);
            hls.attachMedia(video);

            hls.on(Hls.Events.MANIFEST_PARSED, () => {
                video.play().catch(e => {
                    console.warn('üîá –ü—Ä–µ–≤—å—é: –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
                });
            });

            hls.on(Hls.Events.ERROR, (event, data) => {
                if (data.fatal) {
                    hls.destroy();
                    previewPlayers.delete(tile);
                }
            });

            previewPlayers.set(tile, hls);
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = channel.url;
            video.addEventListener('loadedmetadata', () => {
                video.play().catch(e => {
                    console.warn('üîá –ü—Ä–µ–≤—å—é: –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
                });
            });
        }
    }

    function handleTileBlur(tile, channel) {
        if (activePlayerTile === tile) return; // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä

        const hls = previewPlayers.get(tile);
        if (hls) {
            hls.destroy();
            previewPlayers.delete(tile);
        }

        const video = tile.querySelector('.tile-video');
        if (video) {
            video.src = '';
            video.load();
        }
    }

    // ====================
    // CREATE PLAY BUTTON
    // ====================
    function createPlayButton(onClick) {
        const playButton = document.createElement('div');
        playButton.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 15px 30px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 18px;
            z-index: 10;
            display: flex;
            align-items: center;
            gap: 10px;
            user-select: none;
        `;
        playButton.innerHTML = '‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏';
        playButton.onclick = onClick;
        return playButton;
    }

    // ====================
    // MAIN RENDER FUNCTION
    // ====================
    async function renderChannels() {
        loadingEl.classList.remove('hidden');
        errorEl.classList.add('hidden');
        channelsGrid.innerHTML = '';

        try {
            allChannels = await fetchChannels();
            renderChannelTiles(allChannels);
            loadingEl.classList.add('hidden');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–µ—Ä ‚Äî —Ç–µ–ø–µ—Ä—å –≤—Å—ë –∏–≥—Ä–∞–µ—Ç –≤ –ø–ª–∏—Ç–∫–∞—Ö
            mainVideoContainer.style.display = 'none';
        } catch (err) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã:', err);
            loadingEl.classList.add('hidden');
            errorEl.classList.remove('hidden');
        }
    }

    // ====================
    // SEARCH
    // ====================
    searchInput.addEventListener('input', (e) => {
        const query = e.target.value.toLowerCase().trim();
        const filtered = allChannels.filter(channel => 
            channel.name.toLowerCase().includes(query)
        );
        renderChannelTiles(filtered);
    });

    // ====================
    // KEYBOARD NAVIGATION
    // ====================
    document.addEventListener('keydown', (e) => {
        const tiles = Array.from(document.querySelectorAll('.channel-tile'));
        if (tiles.length === 0) return;

        const currentIndex = tiles.findIndex(tile => tile === document.activeElement);
        if (currentIndex === -1) return;

        let nextIndex = currentIndex;

        if (e.key === 'ArrowRight') {
            nextIndex = (currentIndex + 1) % tiles.length;
        } else if (e.key === 'ArrowLeft') {
            nextIndex = (currentIndex - 1 + tiles.length) % tiles.length;
        } else if (e.key === 'ArrowDown') {
            const rowLength = Math.floor(document.querySelector('.channels-grid').clientWidth / 180) || 1;
            nextIndex = (currentIndex + rowLength) % tiles.length;
        } else if (e.key === 'ArrowUp') {
            const rowLength = Math.floor(document.querySelector('.channels-grid').clientWidth / 180) || 1;
            nextIndex = (currentIndex - rowLength + tiles.length) % tiles.length;
        } else if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            if (document.activeElement.classList.contains('channel-tile')) {
                document.activeElement.click();
            }
        }

        if (nextIndex !== currentIndex) {
            e.preventDefault();
            tiles[nextIndex].focus();
        }
    });

    // ====================
    // RETRY BUTTON
    // ====================
    retryBtn.addEventListener('click', renderChannels);

    // ====================
    // INITIALIZE
    // ====================
    renderChannels();
});
