// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const channelsContainer = document.getElementById('channelsContainer');
const mainCategoriesPanel = document.getElementById('mainCategoriesPanel');
const subCategoriesPanel = document.getElementById('subCategoriesPanel');
const playerModal = document.getElementById('playerModal');
const videoPlayerElement = document.getElementById('videoPlayerElement');
const closeModal = document.getElementById('closeModal');
const initialLoader = document.getElementById('initialLoader');
const toastContainer = document.getElementById('toastContainer');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
let currentSubcategory = '';
let currentMainCategoryIndex = 0;
let currentSubCategoryIndex = 0;
let currentChannelIndex = 0;
let currentMiniPlayer = null;
let miniPlayers = new Map();
let focusTimer = null;
let loadedPlaylists = {};
let navigationState = 'channels';

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentWatchedChannel = null; // { name, url, group, logo }
let watchStartTime = null;        // timestamp –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
const categoryTree = {
  "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ": {},
  "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç": {}, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
  "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": {
    "–ù–æ–≤–æ—Å—Ç–∏": "https://iptv-org.github.io/iptv/categories/news.m3u  ",
    "–°–ø–æ—Ä—Ç": "https://iptv-org.github.io/iptv/categories/sports.m3u  ",
    "–§—É—Ç–±–æ–ª": "https://iptv-org.github.io/iptv/categories/football.m3u  ",
    "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "https://iptv-org.github.io/iptv/categories/basketball.m3u  ",
    "–¢–µ–Ω–Ω–∏—Å": "https://iptv-org.github.io/iptv/categories/tennis.m3u  ",
    "–ö–∏–Ω–æ": "https://iptv-org.github.io/iptv/categories/movies.m3u  ",
    "–ë–æ–µ–≤–∏–∫–∏": "https://iptv-org.github.io/iptv/categories/action.m3u  ",
    "–ö–æ–º–µ–¥–∏–∏": "https://iptv-org.github.io/iptv/categories/comedy.m3u  ",
    "–î—Ä–∞–º—ã": "https://iptv-org.github.io/iptv/categories/drama.m3u  ",
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "https://iptv-org.github.io/iptv/categories/entertainment.m3u  ",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ": "https://iptv-org.github.io/iptv/categories/documentary.m3u  ",
    "–î–µ—Ç—Å–∫–∏–µ": "https://iptv-org.github.io/iptv/categories/kids.m3u  ",
    "–ú—É–∑—ã–∫–∞": "https://iptv-org.github.io/iptv/categories/music.m3u  ",
    "–ü–æ–ø": "https://iptv-org.github.io/iptv/categories/pop.m3u  ",
    "–†–æ–∫": "https://iptv-org.github.io/iptv/categories/rock.m3u  ",
    "–•–∏–ø-—Ö–æ–ø": "https://iptv-org.github.io/iptv/categories/hiphop.m3u  "
  },
  "–°—Ç—Ä–∞–Ω—ã": {
    "–†–æ—Å—Å–∏—è": "https://iptv-org.github.io/iptv/countries/ru.m3u  ",
    "–°–®–ê": "https://iptv-org.github.io/iptv/countries/us.m3u  ",
    "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/gb.m3u  ",
    "–ì–µ—Ä–º–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/de.m3u  ",
    "–§—Ä–∞–Ω—Ü–∏—è": "https://iptv-org.github.io/iptv/countries/fr.m3u  ",
    "–ò—Ç–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/it.m3u  ",
    "–ò—Å–ø–∞–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/es.m3u  ",
    "–ö–∏—Ç–∞–π": "https://iptv-org.github.io/iptv/countries/cn.m3u  ",
    "–Ø–ø–æ–Ω–∏—è": "https://iptv-org.github.io/iptv/countries/jp.m3u  ",
    "–ö–æ—Ä–µ—è": "https://iptv-org.github.io/iptv/countries/kr.m3u  ",
    "–ò–Ω–¥–∏—è": "https://iptv-org.github.io/iptv/countries/in.m3u  ",
    "–ë—Ä–∞–∑–∏–ª–∏—è": "https://iptv-org.github.io/iptv/countries/br.m3u  ",
    "–ö–∞–Ω–∞–¥–∞": "https://iptv-org.github.io/iptv/countries/ca.m3u  ",
    "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": "https://iptv-org.github.io/iptv/countries/au.m3u  "
  },
  "–Ø–∑—ã–∫–∏": {
    "–†—É—Å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/rus.m3u  ",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/eng.m3u  ",
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/spa.m3u  ",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/fra.m3u  ",
    "–ù–µ–º–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/deu.m3u  ",
    "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ita.m3u  ",
    "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/por.m3u  ",
    "–ö–∏—Ç–∞–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/zho.m3u  ",
    "–Ø–ø–æ–Ω—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/jpn.m3u  ",
    "–ö–æ—Ä–µ–π—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/kor.m3u  ",
    "–ê—Ä–∞–±—Å–∫–∏–π": "https://iptv-org.github.io/iptv/languages/ara.m3u  ",
    "–¢—É—Ä–µ—Ü–∫–∏–π": "https://iptv-org.github.io/iptv/languages/tur.m3u  ",
    "–•–∏–Ω–¥–∏": "https://iptv-org.github.io/iptv/languages/hin.m3u  "
  }
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
closeModal.addEventListener('click', function() {
    playerModal.style.display = 'none';
    videoPlayerElement.pause();
    videoPlayerElement.src = '';

    // üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if (currentWatchedChannel && watchStartTime) {
        const watchedSeconds = Math.floor((Date.now() - watchStartTime) / 1000);
        console.log(`üì∫ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${watchedSeconds} —Å–µ–∫—É–Ω–¥`);

        if (watchedSeconds >= 60) {
            addToWatched(
                currentWatchedChannel.name,
                currentWatchedChannel.url,
                currentWatchedChannel.group,
                currentWatchedChannel.logo
            );
        }

        // –°–±—Ä–æ—Å
        currentWatchedChannel = null;
        watchStartTime = null;
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    toastContainer.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ localStorage ‚Äî —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
function addToWatched(name, url, group, logo) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏–∑ localStorage
    let watched;
    try {
        const raw = localStorage.getItem('watchedChannels');
        watched = raw ? JSON.parse(raw) : [];
        if (!Array.isArray(watched)) {
            console.warn('‚ö†Ô∏è watchedChannels –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî —Å–±—Ä–æ—Å');
            watched = [];
        }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ watchedChannels:', e);
        watched = [];
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if (watched.some(item => item.url === url)) {
        console.log(`‚ÑπÔ∏è –ö–∞–Ω–∞–ª "${name}" —É–∂–µ –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"`);
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º
    watched.push({ name, url, group, logo });
    try {
        localStorage.setItem('watchedChannels', JSON.stringify(watched));
        console.log(`‚úÖ –ö–∞–Ω–∞–ª "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"`);
    } catch (e) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', e);
        showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }

    // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ" ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    if (currentMainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
        loadAndRenderChannels('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ', '');
    }
}

// üëá –°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ
async function loadPlaylistFromURL() {
    const urlInput = document.getElementById('playlistURL');
    const url = urlInput.value.trim();
    if (!url) {
        showToast('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É');
        return;
    }

    initialLoader.style.display = 'flex';
    try {
        const content = await fetchM3U(url);
        const channels = parseM3UContent(content, '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç');
        localStorage.setItem('customPlaylist', JSON.stringify(channels));
        showToast('–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!');
        loadAndRenderChannels('–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç', '');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ URL:', err);
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç');
    } finally {
        initialLoader.style.display = 'none';
    }
}

// üëá –°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç: –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏
function showCustomPlaylistUploadUI() {
    channelsContainer.innerHTML = `
        <div style="padding: 40px; text-align: center; color: #aaa; width: 100%;">
            <h3>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç</h3>
            <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç M3U</p>
            
            <div style="margin: 30px 0; display: flex; flex-direction: column; gap: 15px; align-items: center;">
                <input type="file" id="uploadM3UFile" accept=".m3u,.m3u8" style="display: none;">
                <button onclick="document.getElementById('uploadM3UFile').click()" 
                        style="padding: 12px 24px; background: #ff375f; color: white; border: none; border-radius: 8px; cursor: pointer;">
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                </button>
                
                <div style="width: 100%; max-width: 400px;">
                    <input type="text" id="playlistURL" 
                           placeholder="https://example.com/playlist.m3u" 
                           style="width: 100%; padding: 10px; border-radius: 6px; border: 1px solid #444; background: #222; color: white; margin-bottom: 10px;">
                    <button onclick="loadPlaylistFromURL()" 
                            style="width: 100%; padding: 10px; background: #ff5e41; color: white; border: none; border-radius: 6px; cursor: pointer;">
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ
                    </button>
                </div>

                <button onclick="localStorage.removeItem('customPlaylist'); showCustomPlaylistUploadUI();" 
                        style="margin-top: 10px; padding: 8px 16px; background: #555; color: white; border: none; border-radius: 6px; cursor: pointer;">
                    –û—á–∏—Å—Ç–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
                </button>
            </div>
        </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const fileInput = document.getElementById('uploadM3UFile');
    fileInput.addEventListener('change', async function(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = async function(event) {
            try {
                const content = event.target.result;
                const channels = parseM3UContent(content, '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç');
                localStorage.setItem('customPlaylist', JSON.stringify(channels));
                showToast('–ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!');
                loadAndRenderChannels('–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç', '');
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err);
                showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            }
        };
        reader.readAsText(file);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    const safetyTimeout = setTimeout(() => {
        initialLoader.style.display = 'none';
        showToast("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
    }, 10000);

    try {
        currentMainCategory = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ';
        renderMainCategories();
        renderSubCategories();
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
        
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
        }, 500);
        
        clearTimeout(safetyTimeout);
    } catch (error) {
        clearTimeout(safetyTimeout);
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        initialLoader.style.display = 'none';
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderMainCategories() {
    mainCategoriesPanel.innerHTML = '';
    const mainCategories = Object.keys(categoryTree);
    
    mainCategories.forEach((cat, index) => {
        const btn = document.createElement('button');
        btn.className = 'category-btn';
        btn.textContent = cat;
        if (cat === currentMainCategory) {
            btn.classList.add('active');
            currentMainCategoryIndex = index;
        }
        
        btn.addEventListener('click', () => selectMainCategory(cat, index));
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        
        mainCategoriesPanel.appendChild(btn);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderSubCategories() {
    subCategoriesPanel.innerHTML = '';
    subCategoriesPanel.style.display = 'none';
    
    if (!categoryTree[currentMainCategory]) return;
    const subcategories = Object.keys(categoryTree[currentMainCategory]);
    
    subcategories.forEach((subcat, index) => {
        const btn = document.createElement('button');
        btn.className = 'subcategory-btn';
        btn.textContent = subcat;
        if (subcat === currentSubcategory) {
            btn.classList.add('active');
            currentSubCategoryIndex = index;
        }
        
        btn.addEventListener('click', () => selectSubcategory(subcat, index));
        btn.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        
        subCategoriesPanel.appendChild(btn);
    });
    
    if (subcategories.length > 0) {
        subCategoriesPanel.style.display = 'flex';
    }
}

// –í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectMainCategory(categoryName, index) {
    currentMainCategory = categoryName;
    currentMainCategoryIndex = index;
    currentSubcategory = '';
    currentSubCategoryIndex = 0;

    renderSubCategories();

    // üëá –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ" –∏–ª–∏ "–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç")
    if (!categoryTree[categoryName] || Object.keys(categoryTree[categoryName]).length === 0) {
        loadAndRenderChannels(currentMainCategory, currentSubcategory);
    }

    setTimeout(() => {
        const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons[index]) buttons[index].focus();
    }, 100);
}

// –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectSubcategory(subcategoryName, index) {
    currentSubcategory = subcategoryName;
    currentSubCategoryIndex = index;
    loadAndRenderChannels(currentMainCategory, currentSubcategory);
    
    setTimeout(() => {
        const firstChannel = document.querySelector('.channel-card');
        if (firstChannel) firstChannel.focus();
    }, 100);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
function updateMainCategoryActive() {
    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
    buttons.forEach((btn, i) => {
        if (i === currentMainCategoryIndex) btn.classList.add('active');
        else btn.classList.remove('active');
    });
}

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–æ–¥–º–µ–Ω—é
function updateSubCategoryActive() {
    const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
    buttons.forEach((btn, i) => {
        if (i === currentSubCategoryIndex) btn.classList.add('active');
        else btn.classList.remove('active');
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
async function loadAndRenderChannels(mainCategory, subcategory) {
    // üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π
    if (mainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
        initialLoader.style.display = 'none';
        let watched;
        try {
            const raw = localStorage.getItem('watchedChannels');
            watched = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(watched)) {
                console.warn('‚ö†Ô∏è watchedChannels –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî —Å–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
                watched = [];
                localStorage.setItem('watchedChannels', '[]');
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', e);
            watched = [];
            localStorage.setItem('watchedChannels', '[]');
        }
        renderChannels(watched);
        return;
    }

    // üëá –°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    if (mainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
        initialLoader.style.display = 'none';
        let customPlaylist;
        try {
            const raw = localStorage.getItem('customPlaylist');
            customPlaylist = raw ? JSON.parse(raw) : [];
            if (!Array.isArray(customPlaylist)) {
                console.warn('‚ö†Ô∏è customPlaylist –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî —Å–±—Ä–æ—Å');
                customPlaylist = [];
                localStorage.removeItem('customPlaylist');
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ customPlaylist:', e);
            customPlaylist = [];
            localStorage.removeItem('customPlaylist');
        }
        renderChannels(customPlaylist);
        // üëá –ï—Å–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏
        if (customPlaylist.length === 0) {
            showCustomPlaylistUploadUI();
        }
        return;
    }

    if (!categoryTree[mainCategory] || !categoryTree[mainCategory][subcategory]) {
        renderChannels([]);
        return;
    }
    
    const url = categoryTree[mainCategory][subcategory];
    initialLoader.style.display = 'flex';
    
    try {
        let channels = loadedPlaylists[url] || await fetchAndCachePlaylist(url, subcategory);
        renderChannels(channels);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        showToast("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤");
        renderChannels([]);
    } finally {
        initialLoader.style.display = 'none';
        setTimeout(() => {
            const firstChannel = document.querySelector('.channel-card');
            if (firstChannel) firstChannel.focus();
        }, 100);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
async function fetchAndCachePlaylist(url, group) {
    const content = await fetchM3U(url);
    const channels = parseM3UContent(content, group);
    loadedPlaylists[url] = channels;
    return channels;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ M3U
async function fetchM3U(url) {
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    return await response.text();
}

// –ü–∞—Ä—Å–∏–Ω–≥ M3U
function parseM3UContent(content, assignedCategory) {
    const channels = [];
    const lines = content.split('\n');
    
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('#EXTINF:')) {
            const infoLine = lines[i];
            const urlLine = lines[i + 1];
            
            if (urlLine && !urlLine.startsWith('#')) {
                let name = infoLine.split(',')[1] || '–ö–∞–Ω–∞–ª';
                name = name.trim();
                
                const logoMatch = infoLine.match(/tvg-logo="([^"]*)"/);
                const logo = logoMatch ? logoMatch[1] : '';
                
                channels.push({ name, url: urlLine.trim(), group: assignedCategory, logo });
            }
        }
    }
    return filterBlacklistedChannels(channels);
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
function filterBlacklistedChannels(channelsList) {
    const blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    return channelsList.filter(channel => !blacklist.includes(channel.url));
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
function renderChannels(channelsToRender) {
    channelsContainer.innerHTML = '';
    
    if (channelsToRender.length === 0) {
        channelsContainer.innerHTML = `
            <div style="color:#aaa; padding:40px; text-align:center">
                ${initialLoader.style.display === 'none' ? '–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ó–∞–≥—Ä—É–∑–∫–∞...'}
            </div>`;
        return;
    }
    
    channelsToRender.forEach((channel, index) => {
        const groupIcon = getGroupIcon(channel.group);
        const channelCard = document.createElement('div');
        channelCard.className = 'channel-card';
        channelCard.setAttribute('tabindex', '0');
        channelCard.dataset.index = index;
        
        // –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const mediaContainer = document.createElement('div');
        mediaContainer.className = 'channel-media';
        
        if (channel.logo) {
            const img = document.createElement('img');
            img.src = channel.logo;
            img.alt = channel.name;
            img.onerror = () => { img.style.display = 'none'; };
            mediaContainer.appendChild(img);
        }
        
        const icon = document.createElement('i');
        icon.className = `fas ${groupIcon}`;
        mediaContainer.appendChild(icon);
        
        // –ú–∏–Ω–∏-–ø–ª–µ–µ—Ä
        const miniPlayer = createMiniPlayer(channel.url);
        mediaContainer.appendChild(miniPlayer);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const infoContainer = document.createElement('div');
        infoContainer.className = 'channel-info';
        infoContainer.innerHTML = `<h3>${channel.name}</h3><p>${channel.group}</p>`;
        
        channelCard.appendChild(mediaContainer);
        channelCard.appendChild(infoContainer);
        
        // –§–æ–∫—É—Å
        channelCard.addEventListener('focus', function() {
            currentChannelIndex = parseInt(this.dataset.index);
            if (focusTimer) clearTimeout(focusTimer);
            
            if (currentMiniPlayer && currentMiniPlayer !== miniPlayer) {
                currentMiniPlayer.style.display = 'none';
                const prevIcon = currentMiniPlayer.parentElement.querySelector('i');
                if (prevIcon) prevIcon.style.display = 'block';
                const prevVideo = currentMiniPlayer.querySelector('video');
                if (prevVideo) prevVideo.pause();
            }
            
            miniPlayer.style.display = 'block';
            icon.style.display = 'none';
            currentMiniPlayer = miniPlayer;
            
            focusTimer = setTimeout(() => {
                const video = miniPlayer.querySelector('video');
                if (!video.dataset.initialized) {
                    initializeMiniPlayer(video, channel.url, miniPlayer, icon);
                } else if (video.paused) {
                    video.play().catch(e => console.log("Autoplay:", e));
                }
            }, 3000);
        });
        
        // –ë–ª—é—Ä
        channelCard.addEventListener('blur', function() {
            if (focusTimer) clearTimeout(focusTimer);
            setTimeout(() => {
                if (!channelCard.contains(document.activeElement)) {
                    miniPlayer.style.display = 'none';
                    icon.style.display = 'block';
                    const video = miniPlayer.querySelector('video');
                    if (video) video.pause();
                }
            }, 100);
        });
        
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞
        channelCard.addEventListener('click', () => openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo));
        channelCard.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
            }
        });
        
        channelsContainer.appendChild(channelCard);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function createMiniPlayer(url) {
    if (miniPlayers.has(url)) return miniPlayers.get(url);
    const container = document.createElement('div');
    container.className = 'mini-player';
    container.dataset.url = url;
    
    const video = document.createElement('video');
    video.muted = true;
    video.playsInline = true;
    video.loop = true;
    video.style.width = '100%';
    video.style.height = '100%';
    video.style.background = '#000';
    
    container.appendChild(video);
    miniPlayers.set(url, container);
    return container;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–ø–ª–µ–µ—Ä–∞
function initializeMiniPlayer(video, url, miniPlayer, icon) {
    video.dataset.initialized = 'true';
    let manifestLoaded = false;
    let networkErrorOccurred = false;

    const timeoutId = setTimeout(() => {
        if (!manifestLoaded && !networkErrorOccurred) {
            console.warn("–¢–∞–π–º–∞—É—Ç:", url);
            showToast('–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        }
    }, 30000);

    if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(video);
        
        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(e => console.log("Autoplay:", e));
        });
        
        hls.on(Hls.Events.ERROR, (event, data) => {
            if (data.fatal && data.type === Hls.ErrorTypes.NETWORK_ERROR) {
                networkErrorOccurred = true;
                clearTimeout(timeoutId);
                handleStreamError(url, miniPlayer);
                addToBlacklist(url);
                miniPlayer.style.display = 'none';
                icon.style.display = 'block';
            }
        });
    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.src = url;
        video.addEventListener('loadedmetadata', () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            video.play().catch(e => console.log("Autoplay:", e));
        });
        video.addEventListener('error', () => {
            clearTimeout(timeoutId);
            handleStreamError(url, miniPlayer);
            addToBlacklist(url);
            miniPlayer.style.display = 'none';
            icon.style.display = 'block';
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ—Ç–æ–∫–∞
function handleStreamError(url, container) {
    showToast('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.error("–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞:", url);
    const icon = container.parentElement.querySelector('i');
    if (icon) icon.style.display = 'block';
    container.style.display = 'none';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
function addToBlacklist(url) {
    let blacklist = JSON.parse(localStorage.getItem('blacklist') || '[]');
    if (!blacklist.includes(url)) {
        blacklist.push(url);
        localStorage.setItem('blacklist', JSON.stringify(blacklist));
    }
}

// üëá –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞
function openFullScreenPlayer(name, url, group, logo) {
    // üëá –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–Ω–∞–ª –∏ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è
    currentWatchedChannel = { name, url, group, logo };
    watchStartTime = Date.now();

    playerModal.style.display = 'flex';
    videoPlayerElement.src = '';
    videoPlayerElement.load();
    videoPlayerElement.muted = false;

    let manifestLoaded = false;

    const timeoutId = setTimeout(() => {
        if (!manifestLoaded) {
            console.warn("–¢–∞–π–º–∞—É—Ç –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω:", url);
            showToast('–ö–∞–Ω–∞–ª –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
            addToBlacklist(url);
            playerModal.style.display = 'none';
        }
    }, 30000);

    if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(videoPlayerElement);
        
        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(e => {
                console.log("Autoplay blocked:", e);
                showToast("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è");
            });
            setTimeout(() => requestNativeFullscreen(), 1000);
        });
        
        hls.on(Hls.Events.ERROR, (event, data) => {
            if (data.fatal) {
                clearTimeout(timeoutId);
                showToast('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                addToBlacklist(url);
                playerModal.style.display = 'none';
            }
        });
    } else if (videoPlayerElement.canPlayType('application/vnd.apple.mpegurl')) {
        videoPlayerElement.src = url;
        videoPlayerElement.addEventListener('loadedmetadata', () => {
            clearTimeout(timeoutId);
            manifestLoaded = true;
            videoPlayerElement.play().catch(e => {
                console.log("Autoplay blocked:", e);
                showToast("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è");
            });
            setTimeout(() => requestNativeFullscreen(), 1000);
        });
        videoPlayerElement.addEventListener('error', () => {
            clearTimeout(timeoutId);
            showToast('–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            addToBlacklist(url);
            playerModal.style.display = 'none';
        });
    } else {
        clearTimeout(timeoutId);
        showToast('–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        playerModal.style.display = 'none';
    }
}

// Fullscreen API
function requestNativeFullscreen() {
    const elem = videoPlayerElement;
    if (elem.requestFullscreen) {
        elem.requestFullscreen().catch(err => console.log("Fullscreen:", err));
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen().catch(err => console.log("Fullscreen:", err));
    }
}

// –ò–∫–æ–Ω–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
function getGroupIcon(group) {
    group = group.toLowerCase();
    if (group.includes('–Ω–æ–≤–æ—Å—Ç–∏')) return 'fa-newspaper';
    if (group.includes('—Å–ø–æ—Ä—Ç')) return 'fa-futbol';
    if (group.includes('–∫–∏–Ω–æ')) return 'fa-film';
    if (group.includes('–º—É–∑—ã–∫–∞')) return 'fa-music';
    if (group.includes('–¥–µ—Ç—Å–∫')) return 'fa-child';
    if (group.includes('–¥–æ–∫—É–º–µ–Ω—Ç')) return 'fa-video';
    if (group.includes('—Ä–∞–∑–≤–ª–µ—á')) return 'fa-theater-masks';
    return 'fa-tv';
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
function moveFocus(direction) {
    if (navigationState === 'channels') {
        const cards = document.querySelectorAll('.channel-card');
        if (cards.length === 0) return;
        const currentIndex = Array.from(cards).indexOf(document.activeElement);
        const cols = Math.floor(channelsContainer.offsetWidth / 280) || 1;
        let nextIndex = currentIndex;

        switch(direction) {
            case 'right': nextIndex = (currentIndex + 1) % cards.length; break;
            case 'left': nextIndex = (currentIndex - 1 + cards.length) % cards.length; break;
            case 'down': nextIndex = (currentIndex + cols) % cards.length; break;
            case 'up': nextIndex = (currentIndex - cols + cards.length) % cards.length; break;
        }

        if (nextIndex >= 0 && nextIndex < cards.length) {
            cards[nextIndex].focus();
        }
    } else if (navigationState === 'mainCategories') {
        const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
        if (buttons.length === 0) return;
        let nextIndex = direction === 'right'
            ? (currentMainCategoryIndex + 1) % buttons.length
            : (currentMainCategoryIndex - 1 + buttons.length) % buttons.length;
        currentMainCategoryIndex = nextIndex;
        currentMainCategory = buttons[nextIndex].textContent;
        updateMainCategoryActive();
        buttons[nextIndex].focus();
    } else if (navigationState === 'subCategories') {
        const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
        if (buttons.length === 0) return;
        let nextIndex = direction === 'right'
            ? (currentSubCategoryIndex + 1) % buttons.length
            : (currentSubCategoryIndex - 1 + buttons.length) % buttons.length;
        currentSubCategoryIndex = nextIndex;
        currentSubcategory = buttons[nextIndex].textContent;
        updateSubCategoryActive();
        buttons[nextIndex].focus();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
document.addEventListener('keydown', function(e) {
    if (playerModal.style.display === 'flex') {
        if (e.key === 'Escape') closeModal.click();
        return;
    }

    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', 'Escape'].includes(e.key)) {
        e.preventDefault();
    }

    switch(e.key) {
        case 'ArrowLeft':
        case 'ArrowRight':
            moveFocus(e.key === 'ArrowRight' ? 'right' : 'left');
            break;
        case 'ArrowUp':
            navigationState = 'mainCategories';
            mainCategoriesPanel.style.display = 'flex';
            subCategoriesPanel.style.display = 'none';
            setTimeout(() => {
                const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                if (buttons[currentMainCategoryIndex]) {
                    buttons[currentMainCategoryIndex].focus();
                }
            }, 100);
            break;
        case 'ArrowDown':
            navigationState = 'channels';
            mainCategoriesPanel.style.display = 'flex';
            subCategoriesPanel.style.display = 'none';
            setTimeout(() => {
                const firstChannel = document.querySelector('.channel-card');
                if (firstChannel) firstChannel.focus();
            }, 100);
            break;
        case 'Enter':
            if (navigationState === 'mainCategories') {
                navigationState = 'subCategories';
                subCategoriesPanel.style.display = 'flex';
                setTimeout(() => {
                    const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                    if (buttons.length > 0) {
                        buttons[0].focus();
                        currentSubCategoryIndex = 0;
                        currentSubcategory = buttons[0].textContent;
                        updateSubCategoryActive();
                    }
                }, 100);
            } else if (navigationState === 'subCategories') {
                const buttons = subCategoriesPanel.querySelectorAll('.subcategory-btn');
                if (buttons[currentSubCategoryIndex]) {
                    selectSubcategory(buttons[currentSubCategoryIndex].textContent, currentSubCategoryIndex);
                }
            } else if (navigationState === 'channels' && document.activeElement.classList.contains('channel-card')) {
                const card = document.activeElement;
                const index = parseInt(card.dataset.index);
                let list;
                if (currentMainCategory === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ') {
                    list = JSON.parse(localStorage.getItem('watchedChannels') || '[]');
                } else if (currentMainCategory === '–°–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç') {
                    list = JSON.parse(localStorage.getItem('customPlaylist') || '[]');
                } else {
                    list = loadedPlaylists[categoryTree[currentMainCategory][currentSubcategory]] || [];
                }
                if (index >= 0 && index < list.length) {
                    const channel = list[index];
                    openFullScreenPlayer(channel.name, channel.url, channel.group, channel.logo);
                }
            }
            break;
        case 'Escape':
            if (navigationState === 'subCategories') {
                navigationState = 'mainCategories';
                setTimeout(() => {
                    const buttons = mainCategoriesPanel.querySelectorAll('.category-btn');
                    if (buttons[currentMainCategoryIndex]) {
                        buttons[currentMainCategoryIndex].focus();
                    }
                }, 100);
            } else if (navigationState === 'mainCategories') {
                navigationState = 'channels';
                setTimeout(() => {
                    const firstChannel = document.querySelector('.channel-card');
                    if (firstChannel) firstChannel.focus();
                }, 100);
            }
            break;
    }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initApp();
});
