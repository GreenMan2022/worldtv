document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const channelsGrid = document.getElementById('channels-grid');
    const videoPlayer = document.getElementById('videoPlayer');
    const searchInput = document.getElementById('search');
    const loadingEl = document.getElementById('loading');
    const errorEl = document.getElementById('error');
    const retryBtn = document.getElementById('retry');
    const currentChannelNameEl = document.getElementById('current-channel-name');

    let allChannels = [];
    let focusedChannel = null;
    let previewPlayers = new Map();

    // ====================
    // FETCH CHANNELS ‚Äî –° –£–ú–ù–´–ú –§–û–õ–õ–ë–≠–ö–û–ú
    // ====================
    async function fetchChannels() {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–Ω–∞–ª–æ–≤...');

        // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ 1: corsproxy.io
        try {
            const proxyUrl = 'https://corsproxy.io/?';
            const targetUrl = 'https://iptv-org.github.io/iptv/index.m3u8';
            const fullUrl = proxyUrl + encodeURIComponent(targetUrl);

            console.log('üì° –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ 1 (corsproxy.io):', fullUrl);

            const response = await fetch(fullUrl, {
                headers: { 'Accept': 'text/plain' }
            });

            if (!response.ok) throw new Error(`HTTP ${response.status}`);

            const data = await response.text();
            const channels = parseM3U(data);

            if (channels.length > 0) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ corsproxy.io`);
                return channels;
            }
        } catch (err) {
            console.warn('‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', err.message);
        }

        // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ 2: api.codetabs.com
        try {
            const proxyUrl = 'https://api.codetabs.com/v1/proxy?quest=';
            const targetUrl = 'https://iptv-org.github.io/iptv/index.m3u8';
            const fullUrl = proxyUrl + encodeURIComponent(targetUrl);

            console.log('üì° –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ 2 (codetabs):', fullUrl);

            const response = await fetch(fullUrl, {
                headers: { 'Accept': 'text/plain' }
            });

            if (!response.ok) throw new Error(`HTTP ${response.status}`);

            const data = await response.text();
            const channels = parseM3U(data);

            if (channels.length > 0) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ codetabs`);
                return channels;
            }
        } catch (err) {
            console.warn('‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', err.message);
        }

        // –ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        try {
            console.log('üìÇ –ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª channels.m3u8');

            const response = await fetch('channels.m3u8');
            if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);

            const data = await response.text();
            console.log('üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', data.length, '—Å–∏–º–≤–æ–ª–æ–≤');

            if (!data || data.trim().length === 0) {
                throw new Error('–§–∞–π–ª –ø—É—Å—Ç–æ–π');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ HTML ‚Äî –∑–Ω–∞—á–∏—Ç, GitHub –æ—Ç–¥–∞–ª 404
            if (data.includes('<!DOCTYPE html>') || data.includes('<html')) {
                throw new Error('–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç HTML ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, 404');
            }

            const channels = parseM3U(data);

            if (channels.length > 0) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞`);
                return channels;
            } else {
                throw new Error('–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
            }

        } catch (err) {
            console.error('‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', err.message);
            throw new Error('–ù–∏ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–∞–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª channels.m3u8.');
        }
    }

    // ====================
    // PARSE M3U ‚Äî –£–°–¢–û–ô–ß–ò–í–´–ô –ü–ê–†–°–ï–†
    // ====================
    function parseM3U(data) {
        if (!data || typeof data !== 'string') {
            console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return [];
        }

        const lines = data.split('\n');
        const channels = [];

        for (let i = 0; i < lines.length; i++) {
            if (lines[i].startsWith('#EXTINF')) {
                const line = lines[i];
                const url = lines[i + 1]?.trim();

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç URL –∏–ª–∏ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
                if (!url || url.startsWith('#') || url.length < 10) {
                    continue;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –≤—Å—ë –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø—è—Ç–æ–π
                const parts = line.split(',');
                const name = parts[parts.length - 1]?.trim();

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                if (!name || name.length < 2) {
                    continue;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É
                let group = 'unknown';
                const groupMatch = line.match(/group-title="([^"]*)"/i);
                if (groupMatch && groupMatch[1]) {
                    group = groupMatch[1].toLowerCase();
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
                let logo = '';
                const logoMatch = line.match(/tvg-logo="([^"]*)"/i);
                if (logoMatch && logoMatch[1]) {
                    logo = logoMatch[1];
                } else {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º placeholder —Å –ø–µ—Ä–≤—ã–º–∏ –±—É–∫–≤–∞–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
                    const initials = name.substring(0, 2).toUpperCase();
                    logo = `https://placehold.co/200x120/1a1a2e/ffffff?text=${encodeURIComponent(initials)}`;
                }

                channels.push({ 
                    name, 
                    url, 
                    group,
                    logo
                });

                i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å URL
            }
        }

        console.log(`üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤`);
        return channels;
    }

    // ====================
    // RENDER CHANNELS ‚Äî –ü–õ–ò–¢–ö–ò
    // ====================
    function renderChannelTiles(channels) {
        channelsGrid.innerHTML = '';

        if (!channels || channels.length === 0) {
            channelsGrid.innerHTML = `
                <div class="no-results">
                    <h3>üì∫ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª <code>channels.m3u8</code> ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ M3U.</p>
                    <p>–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π.</p>
                </div>`;
            return;
        }

        channels.forEach(channel => {
            const tile = document.createElement('div');
            tile.className = 'channel-tile';
            tile.setAttribute('tabIndex', '0');
            tile.setAttribute('title', channel.name);
            tile.dataset.url = channel.url;
            tile.dataset.name = channel.name;

            const content = document.createElement('div');
            content.className = 'tile-content';

            // –í–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–≤—å—é
            const video = document.createElement('video');
            video.className = 'tile-video';
            video.muted = true; // üîá –í–∞–∂–Ω–æ! –ë–µ–∑ mute –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
            video.playsInline = true;
            video.loop = true;

            // –õ–æ–≥–æ—Ç–∏–ø
            const logo = document.createElement('img');
            logo.src = channel.logo;
            logo.alt = channel.name;
            logo.className = 'channel-logo';
            logo.onerror = () => {
                logo.src = `https://placehold.co/200x120/1a1a2e/ffffff?text=${encodeURIComponent(channel.name.substring(0, 2))}`;
            };

            // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            const name = document.createElement('div');
            name.className = 'channel-name';
            name.textContent = channel.name;

            content.appendChild(video);
            content.appendChild(logo);
            tile.appendChild(content);
            tile.appendChild(name);

            tile.addEventListener('click', () => playMainChannel(channel.url, channel.name));
            tile.addEventListener('focus', () => handleTileFocus(tile, channel));
            tile.addEventListener('blur', () => handleTileBlur(tile, channel));

            channelsGrid.appendChild(tile);
        });

        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤—É—é –ø–ª–∏—Ç–∫—É
        setTimeout(() => {
            const firstTile = document.querySelector('.channel-tile');
            if (firstTile) firstTile.focus();
        }, 100);
    }

    // ====================
    // PREVIEW ON FOCUS
    // ====================
    function handleTileFocus(tile, channel) {
        if (focusedChannel === tile) return;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–µ–≤—å—é
        if (focusedChannel) {
            const prevVideo = focusedChannel.querySelector('.tile-video');
            const prevHls = previewPlayers.get(focusedChannel);
            if (prevHls) {
                prevHls.destroy();
                previewPlayers.delete(focusedChannel);
            }
            if (prevVideo) {
                prevVideo.src = '';
                prevVideo.load();
            }
        }

        focusedChannel = tile;
        const video = tile.querySelector('.tile-video');
        if (!video) return;

        if (Hls.isSupported()) {
            const hls = new Hls({
                debug: false,
                enableWorker: true,
                lowLatencyMode: true,
                maxBufferLength: 10,
                xhrSetup: function(xhr, url) {
                    xhr.withCredentials = false;
                    xhr.setRequestHeader('Origin', window.location.origin);
                }
            });

            hls.loadSource(channel.url);
            hls.attachMedia(video);

            hls.on(Hls.Events.MANIFEST_PARSED, () => {
                video.play().catch(e => {
                    console.warn('üîá –ü—Ä–µ–≤—å—é: –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
                });
            });

            hls.on(Hls.Events.ERROR, (event, data) => {
                if (data.fatal) {
                    hls.destroy();
                    previewPlayers.delete(tile);
                    console.warn('üîá –ü—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
                }
            });

            previewPlayers.set(tile, hls);
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = channel.url;
            video.addEventListener('loadedmetadata', () => {
                video.play().catch(e => {
                    console.warn('üîá –ü—Ä–µ–≤—å—é: –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
                });
            });
        }
    }

    function handleTileBlur(tile, channel) {
        const hls = previewPlayers.get(tile);
        if (hls) {
            hls.destroy();
            previewPlayers.delete(tile);
        }

        const video = tile.querySelector('.tile-video');
        if (video) {
            video.src = '';
            video.load();
        }
    }

    // ====================
    // PLAY MAIN CHANNEL ‚Äî –° –ö–ù–û–ü–ö–û–ô –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø
    // ====================
    function playMainChannel(url, name) {
        currentChannelNameEl.textContent = name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
        videoPlayer.innerHTML = '';
        videoPlayer.src = '';
        videoPlayer.controls = true;
        videoPlayer.load();

        console.log('‚ñ∂Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏:', name, url);

        if (Hls.isSupported()) {
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if (window.mainHls) {
                window.mainHls.destroy();
            }

            const hls = new Hls({
                debug: true, // üîç –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É!
                enableWorker: true,
                lowLatencyMode: true,
                maxBufferLength: 30,
                xhrSetup: function(xhr, url) {
                    xhr.withCredentials = false;
                    xhr.setRequestHeader('Origin', window.location.origin);
                }
            });

            window.mainHls = hls;
            hls.loadSource(url);

            hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {
                console.log('‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –£—Ä–æ–≤–Ω–µ–π:', data.levels.length);
                videoPlayer.play().catch(e => {
                    console.warn('üîá –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É.');

                    // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    const container = document.querySelector('#video-container');
                    const existingButton = container.querySelector('.play-button');
                    if (existingButton) existingButton.remove();

                    const playButton = document.createElement('div');
                    playButton.className = 'play-button';
                    playButton.style.cssText = `
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        background: rgba(0,0,0,0.7);
                        color: white;
                        padding: 15px 30px;
                        border-radius: 50px;
                        cursor: pointer;
                        font-size: 18px;
                        z-index: 10;
                        display: flex;
                        align-items: center;
                        gap: 10px;
                        user-select: none;
                    `;
                    playButton.innerHTML = '‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏';
                    playButton.onclick = () => {
                        videoPlayer.play().then(() => {
                            playButton.remove();
                        }).catch(err => {
                            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.');
                        });
                    };
                    container.appendChild(playButton);
                });
            });

            hls.on(Hls.Events.LEVEL_LOADED, (event, data) => {
                console.log('üìà –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω. –°–µ–≥–º–µ–Ω—Ç–æ–≤:', data.details.fragments.length);
            });

            hls.on(Hls.Events.FRAG_LOADED, (event, data) => {
                console.log('üì• –°–µ–≥–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
            });

            hls.on(Hls.Events.ERROR, (event, data) => {
                console.error('‚ùå HLS Error:', data.type, data.details);
                if (data.fatal) {
                    alert('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ' + data.type + '\n' + (data.details || ''));
                    hls.destroy();
                }
            });

            hls.attachMedia(videoPlayer);

        } else if (videoPlayer.canPlayType('application/vnd.apple.mpegurl')) {
            // Safari / iOS
            console.log('üçè –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π HLS –¥–ª—è Safari');
            videoPlayer.src = url;
            videoPlayer.addEventListener('loadedmetadata', () => {
                videoPlayer.play().catch(e => {
                    console.warn('üîá –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ Safari');
                    alert('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª–µ–µ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.');
                });
            });
            videoPlayer.addEventListener('error', () => {
                alert('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ Safari. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.');
            });
        } else {
            alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HLS-–ø–æ—Ç–æ–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Chrome, Firefox –∏–ª–∏ Edge.');
        }
    }

    // ====================
    // MAIN RENDER FUNCTION
    // ====================
    async function renderChannels() {
        loadingEl.classList.remove('hidden');
        errorEl.classList.add('hidden');
        channelsGrid.innerHTML = '';

        try {
            allChannels = await fetchChannels();
            renderChannelTiles(allChannels);
            loadingEl.classList.add('hidden');
        } catch (err) {
            console.error('‚ùå –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª:', err);
            loadingEl.classList.add('hidden');
            errorEl.classList.remove('hidden');
        }
    }

    // ====================
    // SEARCH
    // ====================
    searchInput.addEventListener('input', (e) => {
        const query = e.target.value.toLowerCase().trim();
        const filtered = allChannels.filter(channel => 
            channel.name.toLowerCase().includes(query)
        );
        renderChannelTiles(filtered);
    });

    // ====================
    // KEYBOARD NAVIGATION
    // ====================
    document.addEventListener('keydown', (e) => {
        const tiles = Array.from(document.querySelectorAll('.channel-tile'));
        if (tiles.length === 0) return;

        const currentIndex = tiles.findIndex(tile => tile === document.activeElement);
        if (currentIndex === -1) return;

        let nextIndex = currentIndex;

        if (e.key === 'ArrowRight') {
            nextIndex = (currentIndex + 1) % tiles.length;
        } else if (e.key === 'ArrowLeft') {
            nextIndex = (currentIndex - 1 + tiles.length) % tiles.length;
        } else if (e.key === 'ArrowDown') {
            const rowLength = Math.floor(document.querySelector('.channels-grid').clientWidth / 180) || 1;
            nextIndex = (currentIndex + rowLength) % tiles.length;
        } else if (e.key === 'ArrowUp') {
            const rowLength = Math.floor(document.querySelector('.channels-grid').clientWidth / 180) || 1;
            nextIndex = (currentIndex - rowLength + tiles.length) % tiles.length;
        } else if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            if (document.activeElement.classList.contains('channel-tile')) {
                document.activeElement.click();
            }
        }

        if (nextIndex !== currentIndex) {
            e.preventDefault();
            tiles[nextIndex].focus();
        }
    });

    // ====================
    // RETRY BUTTON
    // ====================
    retryBtn.addEventListener('click', renderChannels);

    // ====================
    // INITIALIZE
    // ====================
    renderChannels();
});
